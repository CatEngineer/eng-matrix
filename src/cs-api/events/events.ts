import Entity from "../../core/entity.js";
import Manager from "../../core/manager.js";
import type { GetOneEventData, GetRoomStateData } from "../generated/matrix.js";
import type { Room } from "../rooms.js";
import { type RoomMember } from "../rooms/member.js";

type Content<T> = T & Record<string, any>; 

type EventConstructData = GetOneEventData;

/** @internal */
export class Event<T> extends Entity<EventManager> {
    /** @internal */
    public readonly data: EventConstructData;

    public readonly content: Content<T>;

    public readonly unsigned: EventConstructData["unsigned"] & {
        /**
         * The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.
         * @format int64
         * @example 1567437
         */
        age?: number;

        /**
         * EventContent
         * The previous `content` for this event. This field is generated
         * by the local homeserver, and is only returned if the event is a state event,
         * and the client has permission to see the previous content.
         */
        previous?: Event<T>;

        /**
         * ClientEventWithoutRoomID
         * The event that redacted this event, if any.
         * @example {"content":{"reason":"spam"},"event_id":"$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE","origin_server_ts":1632491098485,"redacts":"$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45","sender":"@moderator:example.org","type":"m.room.redaction","unsigned":{"age":1257}}
         */
        redacted?: RedactedEvent;

        /**
         * The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via
         * `PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,
         * if the client being given the event is the same one which sent it.
         */
        transactionId?: string;
    }

    public readonly type: string;

    constructor(manager: EventManager, raw: EventConstructData) {
        super(manager, raw.event_id);
        this.data = raw;
        this.content = raw.content as Content<T>;
        this.unsigned = {
            age: raw.unsigned?.age,
            previous: raw.unsigned?.prev_content === undefined
                ? undefined 
                : new Event(manager, raw.unsigned.prev_content as EventConstructData),
            redacted: raw.unsigned?.redacted_because === undefined
                ? undefined
                : new RedactedEvent(
                    manager, 
                    raw.unsigned.redacted_because as EventConstructData,
                ),
            transactionId: raw.unsigned?.transaction_id,
        };
        this.type = raw.type;
    }

    public async getAuthor(): Promise<RoomMember> {
        const room = this.getRoom();
        return room.members.getMember(this.data.sender);
    }

    public getRoom(): Room {
        return this.manager.room;
    }

    // eslint-disable-next-line @typescript-eslint/naming-convention
    public toJSON(): any {
        return this.data;
    }
}

/** @internal */
export class StateEvent<T> extends Event<T> {
    public readonly stateKey: string;

    constructor(manager: EventManager, raw: EventConstructData) {
        super(manager, raw);
        this.stateKey = raw.state_key ?? "";
    }
}

type AnyEvent<T> = Event<T> | StateEvent<T>
export default class EventManager extends Manager<string, AnyEvent<any>> {
    constructor(public readonly room: Room, holds: string) {
        super(room.client, holds);
    }

    public async getEvent<T>(id: string): Promise<Event<T>> {
        const cached = await this.getCachedEvent(id);
        if (cached) return cached as StateEvent<T>;

        const resp = await this.rest.matrix.getOneRoomEvent(this.room.id, id);
        const result = new Event<T>(this, { ...resp.data });

        await this.cacheEvent(result);
        return result;
    }

    public async getState<T>(
        type: string,
        stateKey = ""
    ): Promise<StateEvent<T>> {
        const cached = await this.getCachedStateEvent(type, stateKey);
        if (cached) return cached as StateEvent<T>;

        const states = await this.getRoomState();
        let result: StateEvent<T> | undefined;
        for (const state of states) {
            if (state.data.type === type && state.stateKey === stateKey) {
                result = state;
                break;
            }
        }

        if (!result) {
            throw new Error("State event not found");
        }
        
        await this.cacheStateEvent(result);
        return result;
    }

    public async getRoomState(): Promise<Array<StateEvent<any>>> {
        const resp = await this.rest.matrix.getRoomState(this.room.id);
        return resp.data.map((data) => {
            const result = new StateEvent<any>(this, { ...data });
            return result;
        });
    }

    public async redact(id: string, reason?: string): Promise<void> {
        const txId = this.util.getTxId();
        await this.rest.matrix.redactEvent(this.room.id, id, txId, { reason });
    }

    /** @internal */
    public async cacheEvent<T>(event: Event<T>): Promise<void> {
        const cache = await this.getCache();
        await cache.set(event.id, event);
    }

    /** @internal */
    public async cacheStateEvent<T>(event: StateEvent<T>): Promise<void> {
        const cache = await this.getCache();
        await cache.set(`${event.data.type}:${event.stateKey}`, event);
    }

    /** @internal */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    public fromJSON<T>(data: string): AnyEvent<T> {
        const raw = JSON.parse(data) as EventConstructData;
        if (raw.state_key)
            return new StateEvent(this, raw);
        return new Event(this, raw);
    }

    private async getCachedStateEvent<T>(
        type: string,
        stateKey = ""
    ): Promise<StateEvent<T> | undefined> {
        const cache = await this.getCache();
        const key = `${type}:${stateKey}`;
        const cached = await cache.get(key);
        if (cached) return cached as StateEvent<T>;
        return undefined;
    }

    private async getCachedEvent<T>(id: string): Promise<Event<T> | undefined> {
        const cache = await this.getCache();
        const cached = await cache.get(id);
        if (cached) return cached as Event<T>;
        return undefined;
    }
}

export class RedactedEvent extends Event<{ reason?: string }> {}
