import Builder from "../../core/builder.js";
import Entity from "../../core/entity.js";
import type { GetOneEventData } from "../generated/matrix.js";
import type EventManager from "./events.js";

type ConstructData = GetOneEventData & {

};

export class Event<T> extends Entity<EventManager> {
    public readonly content: T;

    public readonly unsigned: ConstructData["unsigned"] & {
        /**
         * The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.
         * @format int64
         * @example 1567437
         */
        age?: number;

        /**
         * EventContent
         * The previous `content` for this event. This field is generated
         * by the local homeserver, and is only returned if the event is a state event,
         * and the client has permission to see the previous content.
         */
        previous?: Event<T>;

        /**
         * ClientEventWithoutRoomID
         * The event that redacted this event, if any.
         * @example {"content":{"reason":"spam"},"event_id":"$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE","origin_server_ts":1632491098485,"redacts":"$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45","sender":"@moderator:example.org","type":"m.room.redaction","unsigned":{"age":1257}}
         */
        redacted?: RedactedEvent;

        /**
         * The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via
         * `PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,
         * if the client being given the event is the same one which sent it.
         */
        transactionId?: string;
    }

    constructor(manager: EventManager, raw: ConstructData) {
        super(manager, raw.event_id);
        this.content = raw.content as T;
        this.unsigned = {
            age: raw.unsigned?.age,
            previous: raw.unsigned?.prev_content === undefined
                ? undefined 
                : new Event(manager, raw.unsigned.prev_content as GetOneEventData),
            redacted: raw.unsigned?.redacted_because === undefined
                ? undefined
                : new RedactedEvent(manager, raw.unsigned.redacted_because as GetOneEventData),
            transactionId: raw.unsigned?.transaction_id,
        };
    }
}

export class StateEvent<T> extends Event<T> {
    public readonly stateKey: string;
}

/** @internal */
export class EventBuilder extends Builder<EventManager, GetOneEventData> {
    public async build(from: GetOneEventData): Promise<Event<any>> {
        throw new Error("Method not implemented.");
    }
}

export class RedactedEvent extends Event<{ reason?: string }> {}
