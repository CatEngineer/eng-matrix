{
  "swagger": "2.0",
  "info": {
    "title": "Matrix Client-Server API",
    "version": "unstable"
  },
  "host": "matrix.org",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/.well-known/matrix/client": {
      "get": {
        "tags": [
          "Server administration"
        ],
        "summary": "Gets Matrix server discovery information about the domain.",
        "description": "Gets discovery information about the domain. The file may include\nadditional keys, which MUST follow the Java package naming convention,\ne.g. `com.example.myapp.property`. This ensures property names are\nsuitably namespaced for each application and reduces the risk of\nclashes.\n\nNote that this endpoint is not necessarily handled by the homeserver,\nbut by another webserver, to be used for discovering the homeserver URL.",
        "operationId": "getWellknown",
        "responses": {
          "200": {
            "description": "Server discovery information.",
            "schema": {
              "title": "Discovery Information",
              "type": "object",
              "description": "Used by clients to determine the homeserver, identity server, and other\noptional components they should be interacting with.",
              "example": {
                "m.homeserver": {
                  "base_url": "https://matrix.example.com"
                },
                "m.identity_server": {
                  "base_url": "https://identity.example.com"
                },
                "org.example.custom.property": {
                  "app_url": "https://custom.app.example.org"
                }
              },
              "additionalProperties": {
                "type": "object",
                "description": "Application-dependent keys using Java package naming convention."
              },
              "required": [
                "m.homeserver"
              ],
              "properties": {
                "m.homeserver": {
                  "title": "Homeserver Information",
                  "type": "object",
                  "description": "Used by clients to discover homeserver information.",
                  "required": [
                    "base_url"
                  ],
                  "properties": {
                    "base_url": {
                      "type": "string",
                      "description": "The base URL for the homeserver for client-server connections.",
                      "format": "uri",
                      "example": "https://matrix.example.com"
                    }
                  }
                },
                "m.identity_server": {
                  "title": "Identity Server Information",
                  "type": "object",
                  "description": "Used by clients to discover identity server information.",
                  "required": [
                    "base_url"
                  ],
                  "properties": {
                    "base_url": {
                      "type": "string",
                      "description": "The base URL for the identity server for client-server connections.",
                      "format": "uri",
                      "example": "https://identity.example.com"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No server discovery information available."
          }
        }
      }
    },
    "/_matrix/client/v1/register/m.login.registration_token/validity": {
      "get": {
        "tags": [
          "Account management"
        ],
        "summary": "Query if a given registration token is still valid.",
        "description": "Queries the server to determine if a given registration token is still\nvalid at the time of request. This is a point-in-time check where the\ntoken might still expire by the time it is used.\n\nServers should be sure to rate limit this endpoint to avoid brute force\nattacks.",
        "operationId": "registrationTokenValidity",
        "parameters": [
          {
            "type": "string",
            "name": "token",
            "in": "query",
            "required": true,
            "description": "The token to check validity of.",
            "x-example": "fBVFdqVE"
          }
        ],
        "responses": {
          "200": {
            "description": "The check has a result.",
            "schema": {
              "type": "object",
              "required": [
                "valid"
              ],
              "properties": {
                "valid": {
                  "type": "boolean",
                  "description": "True if the token is still valid, false otherwise. This should\nadditionally be false if the token is not a recognised token by\nthe server."
                }
              }
            },
            "examples": {
              "application/json": {
                "valid": true
              }
            }
          },
          "403": {
            "description": "The homeserver does not permit registration and thus all tokens are\nconsidered invalid.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_FORBIDDEN",
                "error": "Registration is not enabled on this homeserver."
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "x-addedInMatrixVersion": "1.2"
      }
    },
    "/_matrix/client/v1/rooms/{roomId}/hierarchy": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Retrieve a portion of a space tree.",
        "description": "Paginates over the space tree in a depth-first manner to locate child rooms of a given space.\n\nWhere a child room is unknown to the local server, federation is used to fill in the details.\nThe servers listed in the `via` array should be contacted to attempt to fill in missing rooms.\n\nOnly [`m.space.child`](#mspacechild) state events of the room are considered. Invalid child\nrooms and parent events are not covered by this endpoint.",
        "operationId": "getSpaceHierarchy",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room ID of the space to get a hierarchy for.",
            "x-example": "!space:example.org"
          },
          {
            "type": "boolean",
            "name": "suggested_only",
            "in": "query",
            "description": "Optional (default `false`) flag to indicate whether or not the server should only consider\nsuggested rooms. Suggested rooms are annotated in their [`m.space.child`](#mspacechild) event\ncontents.",
            "x-example": true
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query",
            "description": "Optional limit for the maximum number of rooms to include per response. Must be an integer\ngreater than zero.\n\nServers should apply a default value, and impose a maximum value to avoid resource exhaustion.",
            "x-example": 20
          },
          {
            "type": "integer",
            "name": "max_depth",
            "in": "query",
            "description": "Optional limit for how far to go into the space. Must be a non-negative integer.\n\nWhen reached, no further child rooms will be returned.\n\nServers should apply a default value, and impose a maximum value to avoid resource exhaustion.",
            "x-example": 5
          },
          {
            "type": "string",
            "name": "from",
            "in": "query",
            "description": "A pagination token from a previous result. If specified, `max_depth` and `suggested_only` cannot\nbe changed from the first request.",
            "x-example": "next_batch_token"
          }
        ],
        "responses": {
          "200": {
            "description": "A portion of the space tree, starting at the provided room ID.",
            "schema": {
              "type": "object",
              "required": [
                "rooms"
              ],
              "properties": {
                "next_batch": {
                  "type": "string",
                  "description": "A token to supply to `from` to keep paginating the responses. Not present when there are\nno further results."
                },
                "rooms": {
                  "type": "array",
                  "description": "The rooms for the current page, with the current filters.",
                  "items": {
                    "allOf": [
                      {
                        "title": "PublicRoomsChunk",
                        "type": "object",
                        "required": [
                          "room_id",
                          "num_joined_members",
                          "world_readable",
                          "guest_can_join"
                        ],
                        "properties": {
                          "avatar_url": {
                            "type": "string",
                            "description": "The URL for the room's avatar, if one is set.",
                            "format": "uri",
                            "example": "mxc://example.org/abcdef"
                          },
                          "canonical_alias": {
                            "type": "string",
                            "description": "The canonical alias of the room, if any.",
                            "example": "#general:example.org"
                          },
                          "guest_can_join": {
                            "type": "boolean",
                            "description": "Whether guest users may join the room and participate in it.\nIf they can, they will be subject to ordinary power level\nrules like any other user.",
                            "example": true
                          },
                          "join_rule": {
                            "type": "string",
                            "description": "The room's join rule. When not present, the room is assumed to\nbe `public`.",
                            "example": "public"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the room, if any.",
                            "example": "General Chat"
                          },
                          "num_joined_members": {
                            "type": "integer",
                            "description": "The number of members joined to the room.",
                            "example": 42
                          },
                          "room_id": {
                            "type": "string",
                            "description": "The ID of the room.",
                            "example": "!abcdefg:example.org"
                          },
                          "room_type": {
                            "type": "string",
                            "description": "The `type` of room (from [`m.room.create`](https://spec.matrix.org/v1.5/client-server-api/#mroomcreate)), if any.",
                            "x-addedInMatrixVersion": "1.4"
                          },
                          "topic": {
                            "type": "string",
                            "description": "The topic of the room, if any.",
                            "example": "All things general"
                          },
                          "world_readable": {
                            "type": "boolean",
                            "description": "Whether the room may be viewed by guest users without joining.",
                            "example": false
                          }
                        }
                      },
                      {
                        "title": "ChildRoomsChunk",
                        "type": "object",
                        "required": [
                          "children_state"
                        ],
                        "properties": {
                          "children_state": {
                            "type": "array",
                            "description": "The [`m.space.child`](#mspacechild) events of the space-room, represented\nas [Stripped State Events](#stripped-state) with an added `origin_server_ts` key.\n\nIf the room is not a space-room, this should be empty.",
                            "items": {
                              "allOf": [
                                {
                                  "title": "StrippedStateEvent",
                                  "type": "object",
                                  "description": "A stripped down state event, with only the `type`, `state_key`,\n`sender`, and `content` keys.",
                                  "required": [
                                    "type",
                                    "state_key",
                                    "content",
                                    "sender"
                                  ],
                                  "properties": {
                                    "content": {
                                      "title": "EventContent",
                                      "type": "object",
                                      "description": "The `content` for the event."
                                    },
                                    "sender": {
                                      "type": "string",
                                      "description": "The `sender` for the event."
                                    },
                                    "state_key": {
                                      "type": "string",
                                      "description": "The `state_key` for the event."
                                    },
                                    "type": {
                                      "type": "string",
                                      "description": "The `type` for the event."
                                    }
                                  }
                                },
                                {
                                  "title": "StrippedChildStateEvent",
                                  "type": "object",
                                  "required": [
                                    "origin_server_ts"
                                  ],
                                  "properties": {
                                    "origin_server_ts": {
                                      "type": "integer",
                                      "description": "The `origin_server_ts` for the event.",
                                      "format": "int64"
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "room_type": {
                            "type": "string",
                            "description": "The `type` of room (from [`m.room.create`](https://spec.matrix.org/v1.5/client-server-api/#mroomcreate)), if any."
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "next_batch": "next_batch_token",
                "rooms": [
                  {
                    "avatar_url": "mxc://example.org/abcdef",
                    "canonical_alias": "#general:example.org",
                    "children_state": [
                      {
                        "content": {
                          "via": [
                            "example.org"
                          ]
                        },
                        "origin_server_ts": 1629413349153,
                        "sender": "@alice:example.org",
                        "state_key": "!a:example.org",
                        "type": "m.space.child"
                      }
                    ],
                    "guest_can_join": false,
                    "join_rule": "public",
                    "name": "The First Space",
                    "num_joined_members": 42,
                    "room_id": "!space:example.org",
                    "room_type": "m.space",
                    "topic": "No other spaces were created first, ever",
                    "world_readable": true
                  }
                ]
              }
            }
          },
          "400": {
            "description": "The request was invalid in some way. A meaningful `errcode`\nand description error text will be returned. Example reasons for rejection are:\n\n- The `from` token is unknown to the server.\n- `suggested_only` or `max_depth` changed during pagination.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_INVALID_PARAM",
                "error": "suggested_only and max_depth cannot change on paginated requests"
              }
            }
          },
          "403": {
            "description": "The user cannot view or peek on the room. A meaningful `errcode`\nand description error text will be returned. Example reasons for rejection are:\n\n- The room is not set up for peeking.\n- The user has been banned from the room.\n- The room does not exist.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_FORBIDDEN",
                "error": "You are not allowed to view this room."
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ],
        "x-addedInMatrixVersion": "1.2"
      }
    },
    "/_matrix/client/v1/rooms/{roomId}/relations/{eventId}": {
      "get": {
        "tags": [
          "Event relationships"
        ],
        "summary": "Get the child events for a given parent event.",
        "description": "Retrieve all of the child events for a given parent event.\n\nNote that when paginating the `from` token should be \"after\" the `to` token in\nterms of topological ordering, because it is only possible to paginate \"backwards\"\nthrough events, starting at `from`.\n\nFor example, passing a `from` token from page 2 of the results, and a `to` token\nfrom page 1, would return the empty set. The caller can use a `from` token from\npage 1 and a `to` token from page 2 to paginate over the same range, however.",
        "operationId": "getRelatingEvents",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The ID of the room containing the parent event.",
            "x-example": "!636q39766251:matrix.org"
          },
          {
            "type": "string",
            "name": "eventId",
            "in": "path",
            "required": true,
            "description": "The ID of the parent event whose child events are to be returned.",
            "x-example": "$asfDuShaf7Gafaw"
          },
          {
            "type": "string",
            "name": "from",
            "in": "query",
            "description": "The pagination token to start returning results from. If not supplied, results\nstart at the most recent topological event known to the server.\n\nCan be a `next_batch` or `prev_batch` token from a previous call, or a returned\n`start` token from [`/messages`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3roomsroomidmessages),\nor a `next_batch` token from [`/sync`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3sync).",
            "x-example": "page2_token"
          },
          {
            "type": "string",
            "name": "to",
            "in": "query",
            "description": "The pagination token to stop returning results at. If not supplied, results\ncontinue up to `limit` or until there are no more events.\n\nLike `from`, this can be a previous token from a prior call to this endpoint\nor from `/messages` or `/sync`.",
            "x-example": "page3_token"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return in a single `chunk`. The server can\nand should apply a maximum value to this parameter to avoid large responses.\n\nSimilarly, the server should apply a default value when not supplied.",
            "x-example": 20
          },
          {
            "type": "string",
            "name": "dir",
            "in": "query",
            "description": "Optional (default `b`) direction to return events from. If this is set to `f`, events\nwill be returned in chronological order starting at `from`. If it\nis set to `b`, events will be returned in *reverse* chronological\norder, again starting at `from`.",
            "enum": [
              "b",
              "f"
            ],
            "x-addedInMatrixVersion": "1.4"
          }
        ],
        "responses": {
          "200": {
            "description": "The paginated child events which point to the parent. If no events are\npointing to the parent or the pagination yields no results, an empty `chunk`\nis returned.",
            "schema": {
              "type": "object",
              "required": [
                "chunk"
              ],
              "properties": {
                "chunk": {
                  "title": "ChildEventsChunk",
                  "type": "array",
                  "description": "The child events of the requested event, ordered topologically most-recent first.",
                  "items": {
                    "allOf": [
                      {
                        "title": "ClientEvent",
                        "type": "object",
                        "description": "The format used for events when they are returned from a homeserver to a client\nvia the Client-Server API, or sent to an Application Service via the Application Services API.",
                        "allOf": [
                          {
                            "title": "ClientEventWithoutRoomID",
                            "type": "object",
                            "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                            "required": [
                              "event_id",
                              "type",
                              "sender",
                              "origin_server_ts",
                              "content"
                            ],
                            "properties": {
                              "content": {
                                "type": "object",
                                "description": "The body of this event, as created by the client which sent it.",
                                "example": {
                                  "membership": "join"
                                }
                              },
                              "event_id": {
                                "type": "string",
                                "description": "The globally unique identifier for this event.",
                                "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                              },
                              "origin_server_ts": {
                                "type": "integer",
                                "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                                "format": "int64",
                                "example": 1632489532305
                              },
                              "sender": {
                                "type": "string",
                                "description": "Contains the fully-qualified ID of the user who sent this event.",
                                "example": "@example:example.org"
                              },
                              "state_key": {
                                "type": "string",
                                "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                                "example": "@user:example.org"
                              },
                              "type": {
                                "type": "string",
                                "description": "The type of the event.",
                                "example": "m.room.member"
                              },
                              "unsigned": {
                                "title": "UnsignedData",
                                "type": "object",
                                "description": "Contains optional extra information about the event.",
                                "properties": {
                                  "age": {
                                    "type": "integer",
                                    "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                    "format": "int64",
                                    "example": 1567437
                                  },
                                  "prev_content": {
                                    "title": "EventContent",
                                    "type": "object",
                                    "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                    "x-changedInMatrixVersion": {
                                      "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                    }
                                  },
                                  "redacted_because": {
                                    "title": "ClientEventWithoutRoomID",
                                    "type": "object",
                                    "description": "The event that redacted this event, if any.",
                                    "example": {
                                      "content": {
                                        "reason": "spam"
                                      },
                                      "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                      "origin_server_ts": 1632491098485,
                                      "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                      "sender": "@moderator:example.org",
                                      "type": "m.room.redaction",
                                      "unsigned": {
                                        "age": 1257
                                      }
                                    }
                                  },
                                  "transaction_id": {
                                    "type": "string",
                                    "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "room_id"
                            ],
                            "properties": {
                              "room_id": {
                                "type": "string",
                                "description": "The ID of the room associated with this event.",
                                "example": "!jEsUZKDJdhlrceRyVU:example.org"
                              },
                              "unsigned": {
                                "properties": {
                                  "redacted_because": {
                                    "title": "ClientEvent",
                                    "example": {
                                      "content": {
                                        "reason": "spam"
                                      },
                                      "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                      "origin_server_ts": 1632491098485,
                                      "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                      "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                                      "sender": "@moderator:example.org",
                                      "type": "m.room.redaction",
                                      "unsigned": {
                                        "age": 1257
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                },
                "next_batch": {
                  "type": "string",
                  "description": "An opaque string representing a pagination token. The absence of this token\nmeans there are no more results to fetch and the client should stop paginating."
                },
                "prev_batch": {
                  "type": "string",
                  "description": "An opaque string representing a pagination token. The absence of this token\nmeans this is the start of the result set, i.e. this is the first batch/page."
                }
              }
            },
            "examples": {
              "application/json": {
                "chunk": [
                  {
                    "content": {
                      "m.relates_to": {
                        "event_id": "$asfDuShaf7Gafaw",
                        "rel_type": "org.example.my_relation"
                      }
                    },
                    "event_id": "$143273582443PhrSn:example.org",
                    "origin_server_ts": 1432735824653,
                    "room_id": "!636q39766251:matrix.org",
                    "sender": "@example:example.org",
                    "type": "m.room.message",
                    "unsigned": {
                      "age": 1234
                    }
                  }
                ],
                "next_batch": "page2_token",
                "prev_batch": "page1_token"
              }
            }
          },
          "404": {
            "description": "The parent event was not found or the user does not have permission to read\nthis event (it might be contained in history that is not accessible to the user).",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "Event not found."
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v1/rooms/{roomId}/relations/{eventId}/{relType}": {
      "get": {
        "tags": [
          "Event relationships"
        ],
        "summary": "Get the child events for a given parent event, with a given `relType`.",
        "description": "Retrieve all of the child events for a given parent event which relate to the parent\nusing the given `relType`.\n\nNote that when paginating the `from` token should be \"after\" the `to` token in\nterms of topological ordering, because it is only possible to paginate \"backwards\"\nthrough events, starting at `from`.\n\nFor example, passing a `from` token from page 2 of the results, and a `to` token\nfrom page 1, would return the empty set. The caller can use a `from` token from\npage 1 and a `to` token from page 2 to paginate over the same range, however.",
        "operationId": "getRelatingEventsWithRelType",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The ID of the room containing the parent event.",
            "x-example": "!636q39766251:matrix.org"
          },
          {
            "type": "string",
            "name": "eventId",
            "in": "path",
            "required": true,
            "description": "The ID of the parent event whose child events are to be returned.",
            "x-example": "$asfDuShaf7Gafaw"
          },
          {
            "type": "string",
            "name": "relType",
            "in": "path",
            "required": true,
            "description": "The [relationship type](https://spec.matrix.org/v1.5/client-server-api/#relationship-types) to search for.",
            "x-example": "org.example.my_relation"
          },
          {
            "type": "string",
            "name": "from",
            "in": "query",
            "description": "The pagination token to start returning results from. If not supplied, results\nstart at the most recent topological event known to the server.\n\nCan be a `next_batch` or `prev_batch` token from a previous call, or a returned\n`start` token from [`/messages`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3roomsroomidmessages),\nor a `next_batch` token from [`/sync`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3sync).",
            "x-example": "page2_token"
          },
          {
            "type": "string",
            "name": "to",
            "in": "query",
            "description": "The pagination token to stop returning results at. If not supplied, results\ncontinue up to `limit` or until there are no more events.\n\nLike `from`, this can be a previous token from a prior call to this endpoint\nor from `/messages` or `/sync`.",
            "x-example": "page3_token"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return in a single `chunk`. The server can\nand should apply a maximum value to this parameter to avoid large responses.\n\nSimilarly, the server should apply a default value when not supplied.",
            "x-example": 20
          },
          {
            "type": "string",
            "name": "dir",
            "in": "query",
            "description": "Optional (default `b`) direction to return events from. If this is set to `f`, events\nwill be returned in chronological order starting at `from`. If it\nis set to `b`, events will be returned in *reverse* chronological\norder, again starting at `from`.",
            "enum": [
              "b",
              "f"
            ],
            "x-addedInMatrixVersion": "1.4"
          }
        ],
        "responses": {
          "200": {
            "description": "The paginated child events which point to the parent. If no events are\npointing to the parent or the pagination yields no results, an empty `chunk`\nis returned.",
            "schema": {
              "type": "object",
              "required": [
                "chunk"
              ],
              "properties": {
                "chunk": {
                  "title": "ChildEventsChunk",
                  "type": "array",
                  "description": "The child events of the requested event, ordered topologically\nmost-recent first. The events returned will match the `relType`\nsupplied in the URL.",
                  "items": {
                    "allOf": [
                      {
                        "title": "ClientEvent",
                        "type": "object",
                        "description": "The format used for events when they are returned from a homeserver to a client\nvia the Client-Server API, or sent to an Application Service via the Application Services API.",
                        "allOf": [
                          {
                            "title": "ClientEventWithoutRoomID",
                            "type": "object",
                            "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                            "required": [
                              "event_id",
                              "type",
                              "sender",
                              "origin_server_ts",
                              "content"
                            ],
                            "properties": {
                              "content": {
                                "type": "object",
                                "description": "The body of this event, as created by the client which sent it.",
                                "example": {
                                  "membership": "join"
                                }
                              },
                              "event_id": {
                                "type": "string",
                                "description": "The globally unique identifier for this event.",
                                "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                              },
                              "origin_server_ts": {
                                "type": "integer",
                                "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                                "format": "int64",
                                "example": 1632489532305
                              },
                              "sender": {
                                "type": "string",
                                "description": "Contains the fully-qualified ID of the user who sent this event.",
                                "example": "@example:example.org"
                              },
                              "state_key": {
                                "type": "string",
                                "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                                "example": "@user:example.org"
                              },
                              "type": {
                                "type": "string",
                                "description": "The type of the event.",
                                "example": "m.room.member"
                              },
                              "unsigned": {
                                "title": "UnsignedData",
                                "type": "object",
                                "description": "Contains optional extra information about the event.",
                                "properties": {
                                  "age": {
                                    "type": "integer",
                                    "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                    "format": "int64",
                                    "example": 1567437
                                  },
                                  "prev_content": {
                                    "title": "EventContent",
                                    "type": "object",
                                    "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                    "x-changedInMatrixVersion": {
                                      "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                    }
                                  },
                                  "redacted_because": {
                                    "title": "ClientEventWithoutRoomID",
                                    "type": "object",
                                    "description": "The event that redacted this event, if any.",
                                    "example": {
                                      "content": {
                                        "reason": "spam"
                                      },
                                      "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                      "origin_server_ts": 1632491098485,
                                      "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                      "sender": "@moderator:example.org",
                                      "type": "m.room.redaction",
                                      "unsigned": {
                                        "age": 1257
                                      }
                                    }
                                  },
                                  "transaction_id": {
                                    "type": "string",
                                    "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "room_id"
                            ],
                            "properties": {
                              "room_id": {
                                "type": "string",
                                "description": "The ID of the room associated with this event.",
                                "example": "!jEsUZKDJdhlrceRyVU:example.org"
                              },
                              "unsigned": {
                                "properties": {
                                  "redacted_because": {
                                    "title": "ClientEvent",
                                    "example": {
                                      "content": {
                                        "reason": "spam"
                                      },
                                      "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                      "origin_server_ts": 1632491098485,
                                      "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                      "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                                      "sender": "@moderator:example.org",
                                      "type": "m.room.redaction",
                                      "unsigned": {
                                        "age": 1257
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                },
                "next_batch": {
                  "type": "string",
                  "description": "An opaque string representing a pagination token. The absence of this token\nmeans there are no more results to fetch and the client should stop paginating."
                },
                "prev_batch": {
                  "type": "string",
                  "description": "An opaque string representing a pagination token. The absence of this token\nmeans this is the start of the result set, i.e. this is the first batch/page."
                }
              }
            },
            "examples": {
              "application/json": {
                "chunk": [
                  {
                    "content": {
                      "m.relates_to": {
                        "event_id": "$asfDuShaf7Gafaw",
                        "rel_type": "org.example.my_relation"
                      }
                    },
                    "event_id": "$143273582443PhrSn:example.org",
                    "origin_server_ts": 1432735824653,
                    "room_id": "!636q39766251:matrix.org",
                    "sender": "@example:example.org",
                    "type": "m.room.message",
                    "unsigned": {
                      "age": 1234
                    }
                  }
                ],
                "next_batch": "page2_token",
                "prev_batch": "page1_token"
              }
            }
          },
          "404": {
            "description": "The parent event was not found or the user does not have permission to read\nthis event (it might be contained in history that is not accessible to the user).",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "Event not found."
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v1/rooms/{roomId}/relations/{eventId}/{relType}/{eventType}": {
      "get": {
        "tags": [
          "Event relationships"
        ],
        "summary": "Get the child events for a given parent event, with a given `relType` and `eventType`.",
        "description": "Retrieve all of the child events for a given parent event which relate to the parent\nusing the given `relType` and have the given `eventType`.\n\nNote that when paginating the `from` token should be \"after\" the `to` token in\nterms of topological ordering, because it is only possible to paginate \"backwards\"\nthrough events, starting at `from`.\n\nFor example, passing a `from` token from page 2 of the results, and a `to` token\nfrom page 1, would return the empty set. The caller can use a `from` token from\npage 1 and a `to` token from page 2 to paginate over the same range, however.",
        "operationId": "getRelatingEventsWithRelTypeAndEventType",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The ID of the room containing the parent event.",
            "x-example": "!636q39766251:matrix.org"
          },
          {
            "type": "string",
            "name": "eventId",
            "in": "path",
            "required": true,
            "description": "The ID of the parent event whose child events are to be returned.",
            "x-example": "$asfDuShaf7Gafaw"
          },
          {
            "type": "string",
            "name": "relType",
            "in": "path",
            "required": true,
            "description": "The [relationship type](https://spec.matrix.org/v1.5/client-server-api/#relationship-types) to search for.",
            "x-example": "org.example.my_relation"
          },
          {
            "type": "string",
            "name": "eventType",
            "in": "path",
            "required": true,
            "description": "The event type of child events to search for.\n\nNote that in encrypted rooms this will typically always be `m.room.encrypted`\nregardless of the event type contained within the encrypted payload.",
            "x-example": "m.room.message"
          },
          {
            "type": "string",
            "name": "from",
            "in": "query",
            "description": "The pagination token to start returning results from. If not supplied, results\nstart at the most recent topological event known to the server.\n\nCan be a `next_batch` or `prev_batch` token from a previous call, or a returned\n`start` token from [`/messages`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3roomsroomidmessages),\nor a `next_batch` token from [`/sync`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3sync).",
            "x-example": "page2_token"
          },
          {
            "type": "string",
            "name": "to",
            "in": "query",
            "description": "The pagination token to stop returning results at. If not supplied, results\ncontinue up to `limit` or until there are no more events.\n\nLike `from`, this can be a previous token from a prior call to this endpoint\nor from `/messages` or `/sync`.",
            "x-example": "page3_token"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return in a single `chunk`. The server can\nand should apply a maximum value to this parameter to avoid large responses.\n\nSimilarly, the server should apply a default value when not supplied.",
            "x-example": 20
          },
          {
            "type": "string",
            "name": "dir",
            "in": "query",
            "description": "Optional (default `b`) direction to return events from. If this is set to `f`, events\nwill be returned in chronological order starting at `from`. If it\nis set to `b`, events will be returned in *reverse* chronological\norder, again starting at `from`.",
            "enum": [
              "b",
              "f"
            ],
            "x-addedInMatrixVersion": "1.4"
          }
        ],
        "responses": {
          "200": {
            "description": "The paginated child events which point to the parent. If no events are\npointing to the parent or the pagination yields no results, an empty `chunk`\nis returned.",
            "schema": {
              "type": "object",
              "required": [
                "chunk"
              ],
              "properties": {
                "chunk": {
                  "title": "ChildEventsChunk",
                  "type": "array",
                  "description": "The child events of the requested event, ordered topologically most-recent\nfirst. The events returned will match the `relType` and `eventType` supplied\nin the URL.",
                  "items": {
                    "allOf": [
                      {
                        "title": "ClientEvent",
                        "type": "object",
                        "description": "The format used for events when they are returned from a homeserver to a client\nvia the Client-Server API, or sent to an Application Service via the Application Services API.",
                        "allOf": [
                          {
                            "title": "ClientEventWithoutRoomID",
                            "type": "object",
                            "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                            "required": [
                              "event_id",
                              "type",
                              "sender",
                              "origin_server_ts",
                              "content"
                            ],
                            "properties": {
                              "content": {
                                "type": "object",
                                "description": "The body of this event, as created by the client which sent it.",
                                "example": {
                                  "membership": "join"
                                }
                              },
                              "event_id": {
                                "type": "string",
                                "description": "The globally unique identifier for this event.",
                                "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                              },
                              "origin_server_ts": {
                                "type": "integer",
                                "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                                "format": "int64",
                                "example": 1632489532305
                              },
                              "sender": {
                                "type": "string",
                                "description": "Contains the fully-qualified ID of the user who sent this event.",
                                "example": "@example:example.org"
                              },
                              "state_key": {
                                "type": "string",
                                "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                                "example": "@user:example.org"
                              },
                              "type": {
                                "type": "string",
                                "description": "The type of the event.",
                                "example": "m.room.member"
                              },
                              "unsigned": {
                                "title": "UnsignedData",
                                "type": "object",
                                "description": "Contains optional extra information about the event.",
                                "properties": {
                                  "age": {
                                    "type": "integer",
                                    "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                    "format": "int64",
                                    "example": 1567437
                                  },
                                  "prev_content": {
                                    "title": "EventContent",
                                    "type": "object",
                                    "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                    "x-changedInMatrixVersion": {
                                      "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                    }
                                  },
                                  "redacted_because": {
                                    "title": "ClientEventWithoutRoomID",
                                    "type": "object",
                                    "description": "The event that redacted this event, if any.",
                                    "example": {
                                      "content": {
                                        "reason": "spam"
                                      },
                                      "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                      "origin_server_ts": 1632491098485,
                                      "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                      "sender": "@moderator:example.org",
                                      "type": "m.room.redaction",
                                      "unsigned": {
                                        "age": 1257
                                      }
                                    }
                                  },
                                  "transaction_id": {
                                    "type": "string",
                                    "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "room_id"
                            ],
                            "properties": {
                              "room_id": {
                                "type": "string",
                                "description": "The ID of the room associated with this event.",
                                "example": "!jEsUZKDJdhlrceRyVU:example.org"
                              },
                              "unsigned": {
                                "properties": {
                                  "redacted_because": {
                                    "title": "ClientEvent",
                                    "example": {
                                      "content": {
                                        "reason": "spam"
                                      },
                                      "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                      "origin_server_ts": 1632491098485,
                                      "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                      "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                                      "sender": "@moderator:example.org",
                                      "type": "m.room.redaction",
                                      "unsigned": {
                                        "age": 1257
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                },
                "next_batch": {
                  "type": "string",
                  "description": "An opaque string representing a pagination token. The absence of this token\nmeans there are no more results to fetch and the client should stop paginating."
                },
                "prev_batch": {
                  "type": "string",
                  "description": "An opaque string representing a pagination token. The absence of this token\nmeans this is the start of the result set, i.e. this is the first batch/page."
                }
              }
            },
            "examples": {
              "application/json": {
                "chunk": [
                  {
                    "content": {
                      "m.relates_to": {
                        "event_id": "$asfDuShaf7Gafaw",
                        "rel_type": "org.example.my_relation"
                      }
                    },
                    "event_id": "$143273582443PhrSn:example.org",
                    "origin_server_ts": 1432735824653,
                    "room_id": "!636q39766251:matrix.org",
                    "sender": "@example:example.org",
                    "type": "m.room.message",
                    "unsigned": {
                      "age": 1234
                    }
                  }
                ],
                "next_batch": "page2_token",
                "prev_batch": "page1_token"
              }
            }
          },
          "404": {
            "description": "The parent event was not found or the user does not have permission to read\nthis event (it might be contained in history that is not accessible to the user).",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "Event not found."
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v1/rooms/{roomId}/threads": {
      "get": {
        "tags": [
          "Threads"
        ],
        "summary": "Retrieve a list of threads in a room, with optional filters.",
        "description": "Paginates over the thread roots in a room, ordered by the `latest_event` of each thread root\nin its bundle.",
        "operationId": "getThreadRoots",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room ID where the thread roots are located.",
            "x-example": "!room:example.org"
          },
          {
            "type": "string",
            "name": "include",
            "in": "query",
            "description": "Optional (default `all`) flag to denote which thread roots are of interest to the caller.\nWhen `all`, all thread roots found in the room are returned. When `participated`, only\nthread roots for threads the user has [participated in](https://spec.matrix.org/v1.5/client-server-api/#server-side-aggregation-of-mthread-relationships)\nwill be returned.",
            "enum": [
              "all",
              "participated"
            ],
            "x-example": "all"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query",
            "description": "Optional limit for the maximum number of thread roots to include per response. Must be an integer\ngreater than zero.\n\nServers should apply a default value, and impose a maximum value to avoid resource exhaustion.",
            "x-example": 20
          },
          {
            "type": "string",
            "name": "from",
            "in": "query",
            "description": "A pagination token from a previous result. When not provided, the server starts paginating from\nthe most recent event visible to the user (as per history visibility rules; topologically).",
            "x-example": "next_batch_token"
          }
        ],
        "responses": {
          "200": {
            "description": "A portion of the available thread roots in the room, based on the filter criteria.",
            "schema": {
              "type": "object",
              "required": [
                "chunk"
              ],
              "properties": {
                "chunk": {
                  "type": "array",
                  "description": "The thread roots, ordered by the `latest_event` in each event's aggregation bundle. All events\nreturned include bundled [aggregations](https://spec.matrix.org/v1.5/client-server-api/#aggregations).\n\nIf the thread root event was sent by an [ignored user](https://spec.matrix.org/v1.5/client-server-api/#ignoring-users), the\nevent is returned redacted to the caller. This is to simulate the same behaviour of a client doing\naggregation locally on the thread.",
                  "items": {
                    "title": "ClientEvent",
                    "type": "object",
                    "description": "The format used for events when they are returned from a homeserver to a client\nvia the Client-Server API, or sent to an Application Service via the Application Services API.",
                    "allOf": [
                      {
                        "title": "ClientEventWithoutRoomID",
                        "type": "object",
                        "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                        "required": [
                          "event_id",
                          "type",
                          "sender",
                          "origin_server_ts",
                          "content"
                        ],
                        "properties": {
                          "content": {
                            "type": "object",
                            "description": "The body of this event, as created by the client which sent it.",
                            "example": {
                              "membership": "join"
                            }
                          },
                          "event_id": {
                            "type": "string",
                            "description": "The globally unique identifier for this event.",
                            "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                          },
                          "origin_server_ts": {
                            "type": "integer",
                            "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                            "format": "int64",
                            "example": 1632489532305
                          },
                          "sender": {
                            "type": "string",
                            "description": "Contains the fully-qualified ID of the user who sent this event.",
                            "example": "@example:example.org"
                          },
                          "state_key": {
                            "type": "string",
                            "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                            "example": "@user:example.org"
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of the event.",
                            "example": "m.room.member"
                          },
                          "unsigned": {
                            "title": "UnsignedData",
                            "type": "object",
                            "description": "Contains optional extra information about the event.",
                            "properties": {
                              "age": {
                                "type": "integer",
                                "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                "format": "int64",
                                "example": 1567437
                              },
                              "prev_content": {
                                "title": "EventContent",
                                "type": "object",
                                "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                "x-changedInMatrixVersion": {
                                  "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                }
                              },
                              "redacted_because": {
                                "title": "ClientEventWithoutRoomID",
                                "type": "object",
                                "description": "The event that redacted this event, if any.",
                                "example": {
                                  "content": {
                                    "reason": "spam"
                                  },
                                  "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                  "origin_server_ts": 1632491098485,
                                  "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                  "sender": "@moderator:example.org",
                                  "type": "m.room.redaction",
                                  "unsigned": {
                                    "age": 1257
                                  }
                                }
                              },
                              "transaction_id": {
                                "type": "string",
                                "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                              }
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "room_id"
                        ],
                        "properties": {
                          "room_id": {
                            "type": "string",
                            "description": "The ID of the room associated with this event.",
                            "example": "!jEsUZKDJdhlrceRyVU:example.org"
                          },
                          "unsigned": {
                            "properties": {
                              "redacted_because": {
                                "title": "ClientEvent",
                                "example": {
                                  "content": {
                                    "reason": "spam"
                                  },
                                  "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                  "origin_server_ts": 1632491098485,
                                  "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                  "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                                  "sender": "@moderator:example.org",
                                  "type": "m.room.redaction",
                                  "unsigned": {
                                    "age": 1257
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "next_batch": {
                  "type": "string",
                  "description": "A token to supply to `from` to keep paginating the responses. Not present when there are\nno further results."
                }
              }
            },
            "examples": {
              "application/json": {
                "chunk": [
                  {
                    "content": {
                      "body": "This is an example text message",
                      "format": "org.matrix.custom.html",
                      "formatted_body": "<b>This is an example text message</b>",
                      "msgtype": "m.text"
                    },
                    "event_id": "$143273582443PhrSn:example.org",
                    "origin_server_ts": 1432735824653,
                    "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                    "sender": "@example:example.org",
                    "type": "m.room.message",
                    "unsigned": {
                      "age": 1234
                    }
                  }
                ],
                "next_batch": "next_batch_token"
              }
            }
          },
          "400": {
            "description": "The request was invalid in some way. A meaningful `errcode`\nand description error text will be returned. Example reasons for rejection are:\n\n- The `from` token is unknown to the server.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_INVALID_PARAM",
                "error": "Unknown pagination token"
              }
            }
          },
          "403": {
            "description": "The user cannot view or peek on the room. A meaningful `errcode`\nand description error text will be returned. Example reasons for rejection are:\n\n- The room is not set up for peeking.\n- The user has been banned from the room.\n- The room does not exist.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_FORBIDDEN",
                "error": "You are not allowed to view this room."
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ],
        "x-addedInMatrixVersion": "1.4"
      }
    },
    "/_matrix/client/v3/account/3pid": {
      "get": {
        "tags": [
          "Account management"
        ],
        "summary": "Gets a list of a user's third party identifiers.",
        "description": "Gets a list of the third party identifiers that the homeserver has\nassociated with the user's account.\n\nThis is *not* the same as the list of third party identifiers bound to\nthe user's Matrix ID in identity servers.\n\nIdentifiers in this list may be used by the homeserver as, for example,\nidentifiers that it will accept to reset the user's account password.",
        "operationId": "getAccount3PIDs",
        "responses": {
          "200": {
            "description": "The lookup was successful.",
            "schema": {
              "type": "object",
              "properties": {
                "threepids": {
                  "type": "array",
                  "items": {
                    "title": "Third party identifier",
                    "type": "object",
                    "required": [
                      "medium",
                      "address",
                      "validated_at",
                      "added_at"
                    ],
                    "properties": {
                      "added_at": {
                        "type": "integer",
                        "description": "The timestamp, in milliseconds, when the homeserver associated the third party identifier with the user.",
                        "format": "int64"
                      },
                      "address": {
                        "type": "string",
                        "description": "The third party identifier address."
                      },
                      "medium": {
                        "type": "string",
                        "description": "The medium of the third party identifier.",
                        "enum": [
                          "email",
                          "msisdn"
                        ]
                      },
                      "validated_at": {
                        "type": "integer",
                        "description": "The timestamp, in milliseconds, when the identifier was\nvalidated by the identity server.",
                        "format": "int64"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "threepids": [
                  {
                    "added_at": 1535336848756,
                    "address": "monkey@banana.island",
                    "medium": "email",
                    "validated_at": 1535176800000
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Account management"
        ],
        "summary": "Adds contact information to the user's account.",
        "description": "Adds contact information to the user's account.\n\nThis endpoint is deprecated in favour of the more specific `/3pid/add`\nand `/3pid/bind` endpoints.\n\n**Note:**\nPreviously this endpoint supported a `bind` parameter. This parameter\nhas been removed, making this endpoint behave as though it was `false`.\nThis results in this endpoint being an equivalent to `/3pid/bind` rather\nthan dual-purpose.",
        "operationId": "post3PIDs",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "three_pid_creds": {
                  "client_secret": "d0nt-T3ll",
                  "id_access_token": "abc123_OpaqueString",
                  "id_server": "matrix.org",
                  "sid": "abc123987"
                }
              },
              "required": [
                "three_pid_creds"
              ],
              "properties": {
                "three_pid_creds": {
                  "title": "ThreePidCredentials",
                  "type": "object",
                  "description": "The third party credentials to associate with the account.",
                  "required": [
                    "client_secret",
                    "id_server",
                    "id_access_token",
                    "sid"
                  ],
                  "properties": {
                    "client_secret": {
                      "type": "string",
                      "description": "The client secret used in the session with the identity server."
                    },
                    "id_access_token": {
                      "type": "string",
                      "description": "An access token previously registered with the identity server. Servers\ncan treat this as optional to distinguish between r0.5-compatible clients\nand this specification version."
                    },
                    "id_server": {
                      "type": "string",
                      "description": "The identity server to use."
                    },
                    "sid": {
                      "type": "string",
                      "description": "The session identifier given by the identity server."
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The addition was successful.",
            "schema": {
              "type": "object",
              "properties": {
                "submit_url": {
                  "type": "string",
                  "description": "An optional field containing a URL where the client must\nsubmit the validation token to, with identical parameters\nto the Identity Service API's `POST\n/validate/email/submitToken` endpoint (without the requirement\nfor an access token). The homeserver must send this token to the\nuser (if applicable), who should then be prompted to provide it\nto the client.\n\nIf this field is not present, the client can assume that\nverification will happen without the client's involvement\nprovided the homeserver advertises this specification version\nin the `/versions` response (ie: r0.5.0).",
                  "format": "uri",
                  "example": "https://example.org/path/to/submitToken"
                }
              }
            },
            "examples": {
              "application/json": {
                "submit_url": "https://example.org/path/to/submitToken"
              }
            }
          },
          "403": {
            "description": "The credentials could not be verified with the identity server.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_THREEPID_AUTH_FAILED",
                "error": "The third party credentials could not be verified by the identity server."
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/account/3pid/add": {
      "post": {
        "tags": [
          "Account management"
        ],
        "summary": "Adds contact information to the user's account.",
        "description": "This API endpoint uses the [User-Interactive Authentication API](https://spec.matrix.org/v1.5/client-server-api/#user-interactive-authentication-api).\n\nAdds contact information to the user's account. Homeservers should use 3PIDs added\nthrough this endpoint for password resets instead of relying on the identity server.\n\nHomeservers should prevent the caller from adding a 3PID to their account if it has\nalready been added to another user's account on the homeserver.",
        "operationId": "add3PID",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "client_secret": "d0nt-T3ll",
                "sid": "abc123987"
              },
              "required": [
                "client_secret",
                "sid"
              ],
              "properties": {
                "auth": {
                  "description": "Additional authentication information for the\nuser-interactive authentication API.",
                  "allOf": [
                    {
                      "title": "Authentication Data",
                      "type": "object",
                      "description": "Used by clients to submit authentication information to the interactive-authentication API",
                      "example": {
                        "example_credential": "verypoorsharedsecret",
                        "session": "xxxxx",
                        "type": "example.type.foo"
                      },
                      "additionalProperties": {
                        "description": "Keys dependent on the login type"
                      },
                      "properties": {
                        "session": {
                          "type": "string",
                          "description": "The value of the session key given by the homeserver."
                        },
                        "type": {
                          "type": "string",
                          "description": "The authentication type that the client is attempting to complete.\nMay be omitted if `session` is given, and the client is reissuing a\nrequest which it believes has been completed out-of-band (for example,\nvia the [fallback mechanism](#fallback))."
                        }
                      }
                    }
                  ]
                },
                "client_secret": {
                  "type": "string",
                  "description": "The client secret used in the session with the homeserver."
                },
                "sid": {
                  "type": "string",
                  "description": "The session identifier given by the homeserver."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The addition was successful.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "401": {
            "description": "The homeserver requires additional authentication information.",
            "schema": {
              "title": "Authentication response",
              "type": "object",
              "description": "Used by servers to indicate that additional authentication information is required,",
              "required": [
                "flows"
              ],
              "properties": {
                "completed": {
                  "type": "array",
                  "description": "A list of the stages the client has completed successfully",
                  "items": {
                    "type": "string",
                    "example": "example.type.foo"
                  }
                },
                "flows": {
                  "type": "array",
                  "description": "A list of the login flows supported by the server for this API.",
                  "items": {
                    "title": "Flow information",
                    "type": "object",
                    "required": [
                      "stages"
                    ],
                    "properties": {
                      "stages": {
                        "type": "array",
                        "description": "The login type of each of the stages required to complete this\nauthentication flow",
                        "items": {
                          "type": "string",
                          "example": "example.type.foo"
                        }
                      }
                    }
                  }
                },
                "params": {
                  "type": "object",
                  "description": "Contains any information that the client will need to know in order to\nuse a given type of authentication. For each login type presented,\nthat type may be present as a key in this dictionary. For example, the\npublic part of an OAuth client ID could be given here.",
                  "example": {
                    "example.type.baz": {
                      "example_key": "foobar"
                    }
                  },
                  "additionalProperties": {
                    "type": "object"
                  }
                },
                "session": {
                  "type": "string",
                  "description": "This is a session identifier that the client must pass back to the home\nserver, if one is provided, in subsequent attempts to authenticate in the\nsame API call.",
                  "example": "xxxxxxyz"
                }
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/account/3pid/bind": {
      "post": {
        "tags": [
          "Account management"
        ],
        "summary": "Binds a 3PID to the user's account through an Identity Service.",
        "description": "Binds a 3PID to the user's account through the specified identity server.\n\nHomeservers should not prevent this request from succeeding if another user\nhas bound the 3PID. Homeservers should simply proxy any errors received by\nthe identity server to the caller.\n\nHomeservers should track successful binds so they can be unbound later.",
        "operationId": "bind3PID",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "client_secret": "d0nt-T3ll",
                "id_access_token": "abc123_OpaqueString",
                "id_server": "example.org",
                "sid": "abc123987"
              },
              "required": [
                "client_secret",
                "id_server",
                "id_access_token",
                "sid"
              ],
              "properties": {
                "client_secret": {
                  "type": "string",
                  "description": "The client secret used in the session with the identity server."
                },
                "id_access_token": {
                  "type": "string",
                  "description": "An access token previously registered with the identity server."
                },
                "id_server": {
                  "type": "string",
                  "description": "The identity server to use."
                },
                "sid": {
                  "type": "string",
                  "description": "The session identifier given by the identity server."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The addition was successful.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/account/3pid/delete": {
      "post": {
        "tags": [
          "Account management"
        ],
        "summary": "Deletes a third party identifier from the user's account",
        "description": "Removes a third party identifier from the user's account. This might not\ncause an unbind of the identifier from the identity server.\n\nUnlike other endpoints, this endpoint does not take an `id_access_token`\nparameter because the homeserver is expected to sign the request to the\nidentity server instead.",
        "operationId": "delete3pidFromAccount",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "medium",
                "address"
              ],
              "properties": {
                "address": {
                  "type": "string",
                  "description": "The third party address being removed.",
                  "example": "example@example.org"
                },
                "id_server": {
                  "type": "string",
                  "description": "The identity server to unbind from. If not provided, the homeserver\nMUST use the `id_server` the identifier was added through. If the\nhomeserver does not know the original `id_server`, it MUST return\na `id_server_unbind_result` of `no-support`.",
                  "example": "example.org"
                },
                "medium": {
                  "type": "string",
                  "description": "The medium of the third party identifier being removed.",
                  "example": "email",
                  "enum": [
                    "email",
                    "msisdn"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The homeserver has disassociated the third party identifier from the\nuser.",
            "schema": {
              "type": "object",
              "required": [
                "id_server_unbind_result"
              ],
              "properties": {
                "id_server_unbind_result": {
                  "type": "string",
                  "description": "An indicator as to whether or not the homeserver was able to unbind\nthe 3PID from the identity server. `success` indicates that the\nidentity server has unbound the identifier whereas `no-support`\nindicates that the identity server refuses to support the request\nor the homeserver was not able to determine an identity server to\nunbind from.",
                  "example": "success",
                  "enum": [
                    "no-support",
                    "success"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/account/3pid/email/requestToken": {
      "post": {
        "tags": [
          "Account management"
        ],
        "summary": "Begins the validation process for an email address for association with the user's account.",
        "description": "The homeserver must check that the given email address is **not**\nalready associated with an account on this homeserver. This API should\nbe used to request validation tokens when adding an email address to an\naccount. This API's parameters and response are identical to that of\nthe [`/register/email/requestToken`](https://spec.matrix.org/v1.5/client-server-api/#post_matrixclientv3registeremailrequesttoken)\nendpoint. The homeserver should validate\nthe email itself, either by sending a validation email itself or by using\na service it has control over.",
        "operationId": "requestTokenTo3PIDEmail",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "type": "object",
                  "example": {
                    "client_secret": "monkeys_are_GREAT",
                    "email": "foo@example.com",
                    "send_attempt": 1
                  },
                  "required": [
                    "client_secret",
                    "email",
                    "send_attempt"
                  ],
                  "properties": {
                    "client_secret": {
                      "type": "string",
                      "description": "A unique string generated by the client, and used to identify the\nvalidation attempt. It must be a string consisting of the characters\n`[0-9a-zA-Z.=_-]`. Its length must not exceed 255 characters and it\nmust not be empty.\n",
                      "example": "monkeys_are_GREAT"
                    },
                    "email": {
                      "type": "string",
                      "description": "The email address to validate.",
                      "example": "alice@example.org"
                    },
                    "next_link": {
                      "type": "string",
                      "description": "Optional. When the validation is completed, the identity server will\nredirect the user to this URL. This option is ignored when submitting\n3PID validation information through a POST request.",
                      "example": "https://example.org/congratulations.html"
                    },
                    "send_attempt": {
                      "type": "integer",
                      "description": "The server will only send an email if the `send_attempt`\nis a number greater than the most recent one which it has seen,\nscoped to that `email` + `client_secret` pair. This is to\navoid repeatedly sending the same email in the case of request\nretries between the POSTing user and the identity server.\nThe client should increment this value if they desire a new\nemail (e.g. a reminder) to be sent. If they do not, the server\nshould respond with success but not resend the email.",
                      "example": 1
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "id_access_token": {
                      "type": "string",
                      "description": "An access token previously registered with the identity server. Servers\ncan treat this as optional to distinguish between r0.5-compatible clients\nand this specification version.\n\nRequired if an `id_server` is supplied."
                    },
                    "id_server": {
                      "type": "string",
                      "description": "The hostname of the identity server to communicate with. May optionally\ninclude a port. This parameter is ignored when the homeserver handles\n3PID verification.\n\nThis parameter is deprecated with a plan to be removed in a future specification\nversion for `/account/password` and `/register` requests.",
                      "example": "id.example.com"
                    }
                  }
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An email was sent to the given address. Note that this may be an\nemail containing the validation token or it may be informing the\nuser of an error.",
            "schema": {
              "title": "RequestTokenResponse",
              "type": "object",
              "required": [
                "sid"
              ],
              "properties": {
                "sid": {
                  "type": "string",
                  "description": "The session ID. Session IDs are opaque strings that must consist entirely\nof the characters `[0-9a-zA-Z.=_-]`. Their length must not exceed 255\ncharacters and they must not be empty.",
                  "example": "123abc"
                },
                "submit_url": {
                  "type": "string",
                  "description": "An optional field containing a URL where the client must submit the\nvalidation token to, with identical parameters to the Identity Service\nAPI's `POST /validate/email/submitToken` endpoint (without the requirement\nfor an access token). The homeserver must send this token to the user (if\napplicable), who should then be prompted to provide it to the client.\n\nIf this field is not present, the client can assume that verification\nwill happen without the client's involvement provided the homeserver\nadvertises this specification version in the `/versions` response\n(ie: r0.5.0).",
                  "format": "uri",
                  "example": "https://example.org/path/to/submitToken"
                }
              }
            }
          },
          "400": {
            "description": "The third party identifier is already in use on the homeserver, or\nthe request was invalid. The error code `M_SERVER_NOT_TRUSTED`\ncan be returned if the server does not trust/support the identity server\nprovided in the request.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_THREEPID_IN_USE",
                "error": "Third party identifier already in use"
              }
            }
          },
          "403": {
            "description": "The homeserver does not allow the third party identifier as a\ncontact option.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_THREEPID_DENIED",
                "error": "Third party identifier is not allowed"
              }
            }
          }
        }
      }
    },
    "/_matrix/client/v3/account/3pid/msisdn/requestToken": {
      "post": {
        "tags": [
          "Account management"
        ],
        "summary": "Begins the validation process for a phone number for association with the user's account.",
        "description": "The homeserver must check that the given phone number is **not**\nalready associated with an account on this homeserver. This API should\nbe used to request validation tokens when adding a phone number to an\naccount. This API's parameters and response are identical to that of\nthe [`/register/msisdn/requestToken`](https://spec.matrix.org/v1.5/client-server-api/#post_matrixclientv3registermsisdnrequesttoken)\nendpoint. The homeserver should validate\nthe phone number itself, either by sending a validation message itself or by using\na service it has control over.",
        "operationId": "requestTokenTo3PIDMSISDN",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "type": "object",
                  "example": {
                    "client_secret": "monkeys_are_GREAT",
                    "country": "GB",
                    "phone_number": "07700900001",
                    "send_attempt": 1
                  },
                  "required": [
                    "client_secret",
                    "country",
                    "phone_number",
                    "send_attempt"
                  ],
                  "properties": {
                    "client_secret": {
                      "type": "string",
                      "description": "A unique string generated by the client, and used to identify the\nvalidation attempt. It must be a string consisting of the characters\n`[0-9a-zA-Z.=_-]`. Its length must not exceed 255 characters and it\nmust not be empty.\n",
                      "example": "monkeys_are_GREAT"
                    },
                    "country": {
                      "type": "string",
                      "description": "The two-letter uppercase ISO-3166-1 alpha-2 country code that the\nnumber in `phone_number` should be parsed as if it were dialled from.",
                      "example": "GB"
                    },
                    "next_link": {
                      "type": "string",
                      "description": "Optional. When the validation is completed, the identity server will\nredirect the user to this URL. This option is ignored when submitting\n3PID validation information through a POST request.",
                      "example": "https://example.org/congratulations.html"
                    },
                    "phone_number": {
                      "type": "string",
                      "description": "The phone number to validate.",
                      "example": "07700900001"
                    },
                    "send_attempt": {
                      "type": "integer",
                      "description": "The server will only send an SMS if the `send_attempt` is a\nnumber greater than the most recent one which it has seen,\nscoped to that `country` + `phone_number` + `client_secret`\ntriple. This is to avoid repeatedly sending the same SMS in\nthe case of request retries between the POSTing user and the\nidentity server. The client should increment this value if\nthey desire a new SMS (e.g. a reminder) to be sent.",
                      "example": 1
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "id_access_token": {
                      "type": "string",
                      "description": "An access token previously registered with the identity server. Servers\ncan treat this as optional to distinguish between r0.5-compatible clients\nand this specification version.\n\nRequired if an `id_server` is supplied."
                    },
                    "id_server": {
                      "type": "string",
                      "description": "The hostname of the identity server to communicate with. May optionally\ninclude a port. This parameter is ignored when the homeserver handles\n3PID verification.\n\nThis parameter is deprecated with a plan to be removed in a future specification\nversion for `/account/password` and `/register` requests.",
                      "example": "id.example.com"
                    }
                  }
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An SMS message was sent to the given phone number.",
            "schema": {
              "title": "RequestTokenResponse",
              "type": "object",
              "required": [
                "sid"
              ],
              "properties": {
                "sid": {
                  "type": "string",
                  "description": "The session ID. Session IDs are opaque strings that must consist entirely\nof the characters `[0-9a-zA-Z.=_-]`. Their length must not exceed 255\ncharacters and they must not be empty.",
                  "example": "123abc"
                },
                "submit_url": {
                  "type": "string",
                  "description": "An optional field containing a URL where the client must submit the\nvalidation token to, with identical parameters to the Identity Service\nAPI's `POST /validate/email/submitToken` endpoint (without the requirement\nfor an access token). The homeserver must send this token to the user (if\napplicable), who should then be prompted to provide it to the client.\n\nIf this field is not present, the client can assume that verification\nwill happen without the client's involvement provided the homeserver\nadvertises this specification version in the `/versions` response\n(ie: r0.5.0).",
                  "format": "uri",
                  "example": "https://example.org/path/to/submitToken"
                }
              }
            }
          },
          "400": {
            "description": "The third party identifier is already in use on the homeserver, or\nthe request was invalid. The error code `M_SERVER_NOT_TRUSTED`\ncan be returned if the server does not trust/support the identity server\nprovided in the request.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_THREEPID_IN_USE",
                "error": "Third party identifier already in use"
              }
            }
          },
          "403": {
            "description": "The homeserver does not allow the third party identifier as a\ncontact option.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_THREEPID_DENIED",
                "error": "Third party identifier is not allowed"
              }
            }
          }
        }
      }
    },
    "/_matrix/client/v3/account/3pid/unbind": {
      "post": {
        "tags": [
          "Account management"
        ],
        "summary": "Removes a user's third party identifier from an identity server.",
        "description": "Removes a user's third party identifier from the provided identity server\nwithout removing it from the homeserver.\n\nUnlike other endpoints, this endpoint does not take an `id_access_token`\nparameter because the homeserver is expected to sign the request to the\nidentity server instead.",
        "operationId": "unbind3pidFromAccount",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "medium",
                "address"
              ],
              "properties": {
                "address": {
                  "type": "string",
                  "description": "The third party address being removed.",
                  "example": "example@example.org"
                },
                "id_server": {
                  "type": "string",
                  "description": "The identity server to unbind from. If not provided, the homeserver\nMUST use the `id_server` the identifier was added through. If the\nhomeserver does not know the original `id_server`, it MUST return\na `id_server_unbind_result` of `no-support`.",
                  "example": "example.org"
                },
                "medium": {
                  "type": "string",
                  "description": "The medium of the third party identifier being removed.",
                  "example": "email",
                  "enum": [
                    "email",
                    "msisdn"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The identity server has disassociated the third party identifier from the\nuser.",
            "schema": {
              "type": "object",
              "required": [
                "id_server_unbind_result"
              ],
              "properties": {
                "id_server_unbind_result": {
                  "type": "string",
                  "description": "An indicator as to whether or not the identity server was able to unbind\nthe 3PID. `success` indicates that the identity server has unbound the\nidentifier whereas `no-support` indicates that the identity server\nrefuses to support the request or the homeserver was not able to determine\nan identity server to unbind from.",
                  "example": "success",
                  "enum": [
                    "no-support",
                    "success"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/account/deactivate": {
      "post": {
        "tags": [
          "Account management"
        ],
        "summary": "Deactivate a user's account.",
        "description": "Deactivate the user's account, removing all ability for the user to\nlogin again.\n\nThis API endpoint uses the [User-Interactive Authentication API](https://spec.matrix.org/v1.5/client-server-api/#user-interactive-authentication-api).\n\nAn access token should be submitted to this endpoint if the client has\nan active session.\n\nThe homeserver may change the flows available depending on whether a\nvalid access token is provided.\n\nUnlike other endpoints, this endpoint does not take an `id_access_token`\nparameter because the homeserver is expected to sign the request to the\nidentity server instead.",
        "operationId": "deactivateAccount",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "auth": {
                  "description": "Additional authentication information for the user-interactive authentication API.",
                  "allOf": [
                    {
                      "title": "Authentication Data",
                      "type": "object",
                      "description": "Used by clients to submit authentication information to the interactive-authentication API",
                      "example": {
                        "example_credential": "verypoorsharedsecret",
                        "session": "xxxxx",
                        "type": "example.type.foo"
                      },
                      "additionalProperties": {
                        "description": "Keys dependent on the login type"
                      },
                      "properties": {
                        "session": {
                          "type": "string",
                          "description": "The value of the session key given by the homeserver."
                        },
                        "type": {
                          "type": "string",
                          "description": "The authentication type that the client is attempting to complete.\nMay be omitted if `session` is given, and the client is reissuing a\nrequest which it believes has been completed out-of-band (for example,\nvia the [fallback mechanism](#fallback))."
                        }
                      }
                    }
                  ]
                },
                "id_server": {
                  "type": "string",
                  "description": "The identity server to unbind all of the user's 3PIDs from.\nIf not provided, the homeserver MUST use the `id_server`\nthat was originally use to bind each identifier. If the\nhomeserver does not know which `id_server` that was,\nit must return an `id_server_unbind_result` of\n`no-support`.",
                  "example": "example.org"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The account has been deactivated.",
            "schema": {
              "type": "object",
              "required": [
                "id_server_unbind_result"
              ],
              "properties": {
                "id_server_unbind_result": {
                  "type": "string",
                  "description": "An indicator as to whether or not the homeserver was able to unbind\nthe user's 3PIDs from the identity server(s). `success` indicates\nthat all identifiers have been unbound from the identity server while\n`no-support` indicates that one or more identifiers failed to unbind\ndue to the identity server refusing the request or the homeserver\nbeing unable to determine an identity server to unbind from. This\nmust be `success` if the homeserver has no identifiers to unbind\nfor the user.",
                  "example": "success",
                  "enum": [
                    "success",
                    "no-support"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "The homeserver requires additional authentication information.",
            "schema": {
              "title": "Authentication response",
              "type": "object",
              "description": "Used by servers to indicate that additional authentication information is required,",
              "required": [
                "flows"
              ],
              "properties": {
                "completed": {
                  "type": "array",
                  "description": "A list of the stages the client has completed successfully",
                  "items": {
                    "type": "string",
                    "example": "example.type.foo"
                  }
                },
                "flows": {
                  "type": "array",
                  "description": "A list of the login flows supported by the server for this API.",
                  "items": {
                    "title": "Flow information",
                    "type": "object",
                    "required": [
                      "stages"
                    ],
                    "properties": {
                      "stages": {
                        "type": "array",
                        "description": "The login type of each of the stages required to complete this\nauthentication flow",
                        "items": {
                          "type": "string",
                          "example": "example.type.foo"
                        }
                      }
                    }
                  }
                },
                "params": {
                  "type": "object",
                  "description": "Contains any information that the client will need to know in order to\nuse a given type of authentication. For each login type presented,\nthat type may be present as a key in this dictionary. For example, the\npublic part of an OAuth client ID could be given here.",
                  "example": {
                    "example.type.baz": {
                      "example_key": "foobar"
                    }
                  },
                  "additionalProperties": {
                    "type": "object"
                  }
                },
                "session": {
                  "type": "string",
                  "description": "This is a session identifier that the client must pass back to the home\nserver, if one is provided, in subsequent attempts to authenticate in the\nsame API call.",
                  "example": "xxxxxxyz"
                }
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/account/password": {
      "post": {
        "tags": [
          "Account management"
        ],
        "summary": "Changes a user's password.",
        "description": "Changes the password for an account on this homeserver.\n\nThis API endpoint uses the [User-Interactive Authentication API](https://spec.matrix.org/v1.5/client-server-api/#user-interactive-authentication-api) to\nensure the user changing the password is actually the owner of the\naccount.\n\nAn access token should be submitted to this endpoint if the client has\nan active session.\n\nThe homeserver may change the flows available depending on whether a\nvalid access token is provided. The homeserver SHOULD NOT revoke the\naccess token provided in the request. Whether other access tokens for\nthe user are revoked depends on the request parameters.",
        "operationId": "changePassword",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "new_password"
              ],
              "properties": {
                "auth": {
                  "description": "Additional authentication information for the user-interactive authentication API.",
                  "allOf": [
                    {
                      "title": "Authentication Data",
                      "type": "object",
                      "description": "Used by clients to submit authentication information to the interactive-authentication API",
                      "example": {
                        "example_credential": "verypoorsharedsecret",
                        "session": "xxxxx",
                        "type": "example.type.foo"
                      },
                      "additionalProperties": {
                        "description": "Keys dependent on the login type"
                      },
                      "properties": {
                        "session": {
                          "type": "string",
                          "description": "The value of the session key given by the homeserver."
                        },
                        "type": {
                          "type": "string",
                          "description": "The authentication type that the client is attempting to complete.\nMay be omitted if `session` is given, and the client is reissuing a\nrequest which it believes has been completed out-of-band (for example,\nvia the [fallback mechanism](#fallback))."
                        }
                      }
                    }
                  ]
                },
                "logout_devices": {
                  "type": "boolean",
                  "description": "Whether the user's other access tokens, and their associated devices, should be\nrevoked if the request succeeds. Defaults to true.\n\nWhen `false`, the server can still take advantage of the [soft logout method](https://spec.matrix.org/v1.5/client-server-api/#soft-logout)\nfor the user's remaining devices.",
                  "example": true
                },
                "new_password": {
                  "type": "string",
                  "description": "The new password for the account.",
                  "example": "ihatebananas"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The password has been changed.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "401": {
            "description": "The homeserver requires additional authentication information.",
            "schema": {
              "title": "Authentication response",
              "type": "object",
              "description": "Used by servers to indicate that additional authentication information is required,",
              "required": [
                "flows"
              ],
              "properties": {
                "completed": {
                  "type": "array",
                  "description": "A list of the stages the client has completed successfully",
                  "items": {
                    "type": "string",
                    "example": "example.type.foo"
                  }
                },
                "flows": {
                  "type": "array",
                  "description": "A list of the login flows supported by the server for this API.",
                  "items": {
                    "title": "Flow information",
                    "type": "object",
                    "required": [
                      "stages"
                    ],
                    "properties": {
                      "stages": {
                        "type": "array",
                        "description": "The login type of each of the stages required to complete this\nauthentication flow",
                        "items": {
                          "type": "string",
                          "example": "example.type.foo"
                        }
                      }
                    }
                  }
                },
                "params": {
                  "type": "object",
                  "description": "Contains any information that the client will need to know in order to\nuse a given type of authentication. For each login type presented,\nthat type may be present as a key in this dictionary. For example, the\npublic part of an OAuth client ID could be given here.",
                  "example": {
                    "example.type.baz": {
                      "example_key": "foobar"
                    }
                  },
                  "additionalProperties": {
                    "type": "object"
                  }
                },
                "session": {
                  "type": "string",
                  "description": "This is a session identifier that the client must pass back to the home\nserver, if one is provided, in subsequent attempts to authenticate in the\nsame API call.",
                  "example": "xxxxxxyz"
                }
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/account/password/email/requestToken": {
      "post": {
        "tags": [
          "Account management"
        ],
        "summary": "Requests a validation token be sent to the given email address for the purpose of resetting a user's password",
        "description": "The homeserver must check that the given email address **is\nassociated** with an account on this homeserver. This API should be\nused to request validation tokens when authenticating for the\n`/account/password` endpoint.\n\nThis API's parameters and response are identical to that of the\n[`/register/email/requestToken`](https://spec.matrix.org/v1.5/client-server-api/#post_matrixclientv3registeremailrequesttoken)\nendpoint, except that\n`M_THREEPID_NOT_FOUND` may be returned if no account matching the\ngiven email address could be found. The server may instead send an\nemail to the given address prompting the user to create an account.\n`M_THREEPID_IN_USE` may not be returned.\n\nThe homeserver should validate the email itself, either by sending a\nvalidation email itself or by using a service it has control over.",
        "operationId": "requestTokenToResetPasswordEmail",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "type": "object",
                  "example": {
                    "client_secret": "monkeys_are_GREAT",
                    "email": "foo@example.com",
                    "send_attempt": 1
                  },
                  "required": [
                    "client_secret",
                    "email",
                    "send_attempt"
                  ],
                  "properties": {
                    "client_secret": {
                      "type": "string",
                      "description": "A unique string generated by the client, and used to identify the\nvalidation attempt. It must be a string consisting of the characters\n`[0-9a-zA-Z.=_-]`. Its length must not exceed 255 characters and it\nmust not be empty.\n",
                      "example": "monkeys_are_GREAT"
                    },
                    "email": {
                      "type": "string",
                      "description": "The email address to validate.",
                      "example": "alice@example.org"
                    },
                    "next_link": {
                      "type": "string",
                      "description": "Optional. When the validation is completed, the identity server will\nredirect the user to this URL. This option is ignored when submitting\n3PID validation information through a POST request.",
                      "example": "https://example.org/congratulations.html"
                    },
                    "send_attempt": {
                      "type": "integer",
                      "description": "The server will only send an email if the `send_attempt`\nis a number greater than the most recent one which it has seen,\nscoped to that `email` + `client_secret` pair. This is to\navoid repeatedly sending the same email in the case of request\nretries between the POSTing user and the identity server.\nThe client should increment this value if they desire a new\nemail (e.g. a reminder) to be sent. If they do not, the server\nshould respond with success but not resend the email.",
                      "example": 1
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "id_access_token": {
                      "type": "string",
                      "description": "An access token previously registered with the identity server. Servers\ncan treat this as optional to distinguish between r0.5-compatible clients\nand this specification version.\n\nRequired if an `id_server` is supplied."
                    },
                    "id_server": {
                      "type": "string",
                      "description": "The hostname of the identity server to communicate with. May optionally\ninclude a port. This parameter is ignored when the homeserver handles\n3PID verification.\n\nThis parameter is deprecated with a plan to be removed in a future specification\nversion for `/account/password` and `/register` requests.",
                      "example": "id.example.com"
                    }
                  }
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An email was sent to the given address.",
            "schema": {
              "title": "RequestTokenResponse",
              "type": "object",
              "required": [
                "sid"
              ],
              "properties": {
                "sid": {
                  "type": "string",
                  "description": "The session ID. Session IDs are opaque strings that must consist entirely\nof the characters `[0-9a-zA-Z.=_-]`. Their length must not exceed 255\ncharacters and they must not be empty.",
                  "example": "123abc"
                },
                "submit_url": {
                  "type": "string",
                  "description": "An optional field containing a URL where the client must submit the\nvalidation token to, with identical parameters to the Identity Service\nAPI's `POST /validate/email/submitToken` endpoint (without the requirement\nfor an access token). The homeserver must send this token to the user (if\napplicable), who should then be prompted to provide it to the client.\n\nIf this field is not present, the client can assume that verification\nwill happen without the client's involvement provided the homeserver\nadvertises this specification version in the `/versions` response\n(ie: r0.5.0).",
                  "format": "uri",
                  "example": "https://example.org/path/to/submitToken"
                }
              }
            }
          },
          "400": {
            "description": "The referenced third party identifier is not recognised by the\nhomeserver, or the request was invalid. The error code `M_SERVER_NOT_TRUSTED`\ncan be returned if the server does not trust/support the identity server\nprovided in the request.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_THREEPID_NOT_FOUND",
                "error": "Email not found"
              }
            }
          },
          "403": {
            "description": "The homeserver does not allow the third party identifier as a\ncontact option.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_THREEPID_DENIED",
                "error": "Third party identifier is not allowed"
              }
            }
          }
        }
      }
    },
    "/_matrix/client/v3/account/password/msisdn/requestToken": {
      "post": {
        "tags": [
          "Account management"
        ],
        "summary": "Requests a validation token be sent to the given phone number for the purpose of resetting a user's password.",
        "description": "The homeserver must check that the given phone number **is\nassociated** with an account on this homeserver. This API should be\nused to request validation tokens when authenticating for the\n`/account/password` endpoint.\n\nThis API's parameters and response are identical to that of the\n[`/register/msisdn/requestToken`](https://spec.matrix.org/v1.5/client-server-api/#post_matrixclientv3registermsisdnrequesttoken)\nendpoint, except that\n`M_THREEPID_NOT_FOUND` may be returned if no account matching the\ngiven phone number could be found. The server may instead send the SMS\nto the given phone number prompting the user to create an account.\n`M_THREEPID_IN_USE` may not be returned.\n\nThe homeserver should validate the phone number itself, either by sending a\nvalidation message itself or by using a service it has control over.",
        "operationId": "requestTokenToResetPasswordMSISDN",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "type": "object",
                  "example": {
                    "client_secret": "monkeys_are_GREAT",
                    "country": "GB",
                    "phone_number": "07700900001",
                    "send_attempt": 1
                  },
                  "required": [
                    "client_secret",
                    "country",
                    "phone_number",
                    "send_attempt"
                  ],
                  "properties": {
                    "client_secret": {
                      "type": "string",
                      "description": "A unique string generated by the client, and used to identify the\nvalidation attempt. It must be a string consisting of the characters\n`[0-9a-zA-Z.=_-]`. Its length must not exceed 255 characters and it\nmust not be empty.\n",
                      "example": "monkeys_are_GREAT"
                    },
                    "country": {
                      "type": "string",
                      "description": "The two-letter uppercase ISO-3166-1 alpha-2 country code that the\nnumber in `phone_number` should be parsed as if it were dialled from.",
                      "example": "GB"
                    },
                    "next_link": {
                      "type": "string",
                      "description": "Optional. When the validation is completed, the identity server will\nredirect the user to this URL. This option is ignored when submitting\n3PID validation information through a POST request.",
                      "example": "https://example.org/congratulations.html"
                    },
                    "phone_number": {
                      "type": "string",
                      "description": "The phone number to validate.",
                      "example": "07700900001"
                    },
                    "send_attempt": {
                      "type": "integer",
                      "description": "The server will only send an SMS if the `send_attempt` is a\nnumber greater than the most recent one which it has seen,\nscoped to that `country` + `phone_number` + `client_secret`\ntriple. This is to avoid repeatedly sending the same SMS in\nthe case of request retries between the POSTing user and the\nidentity server. The client should increment this value if\nthey desire a new SMS (e.g. a reminder) to be sent.",
                      "example": 1
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "id_access_token": {
                      "type": "string",
                      "description": "An access token previously registered with the identity server. Servers\ncan treat this as optional to distinguish between r0.5-compatible clients\nand this specification version.\n\nRequired if an `id_server` is supplied."
                    },
                    "id_server": {
                      "type": "string",
                      "description": "The hostname of the identity server to communicate with. May optionally\ninclude a port. This parameter is ignored when the homeserver handles\n3PID verification.\n\nThis parameter is deprecated with a plan to be removed in a future specification\nversion for `/account/password` and `/register` requests.",
                      "example": "id.example.com"
                    }
                  }
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An SMS message was sent to the given phone number.",
            "schema": {
              "title": "RequestTokenResponse",
              "type": "object",
              "required": [
                "sid"
              ],
              "properties": {
                "sid": {
                  "type": "string",
                  "description": "The session ID. Session IDs are opaque strings that must consist entirely\nof the characters `[0-9a-zA-Z.=_-]`. Their length must not exceed 255\ncharacters and they must not be empty.",
                  "example": "123abc"
                },
                "submit_url": {
                  "type": "string",
                  "description": "An optional field containing a URL where the client must submit the\nvalidation token to, with identical parameters to the Identity Service\nAPI's `POST /validate/email/submitToken` endpoint (without the requirement\nfor an access token). The homeserver must send this token to the user (if\napplicable), who should then be prompted to provide it to the client.\n\nIf this field is not present, the client can assume that verification\nwill happen without the client's involvement provided the homeserver\nadvertises this specification version in the `/versions` response\n(ie: r0.5.0).",
                  "format": "uri",
                  "example": "https://example.org/path/to/submitToken"
                }
              }
            }
          },
          "400": {
            "description": "The referenced third party identifier is not recognised by the\nhomeserver, or the request was invalid. The error code `M_SERVER_NOT_TRUSTED`\ncan be returned if the server does not trust/support the identity server\nprovided in the request.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_THREEPID_NOT_FOUND",
                "error": "Phone number not found"
              }
            }
          },
          "403": {
            "description": "The homeserver does not allow the third party identifier as a\ncontact option.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_THREEPID_DENIED",
                "error": "Third party identifier is not allowed"
              }
            }
          }
        }
      }
    },
    "/_matrix/client/v3/account/whoami": {
      "get": {
        "tags": [
          "Session management"
        ],
        "summary": "Gets information about the owner of an access token.",
        "description": "Gets information about the owner of a given access token.\n\nNote that, as with the rest of the Client-Server API,\nApplication Services may masquerade as users within their\nnamespace by giving a `user_id` query parameter. In this\nsituation, the server should verify that the given `user_id`\nis registered by the appservice, and return it in the response\nbody.",
        "operationId": "getTokenOwner",
        "responses": {
          "200": {
            "description": "The token belongs to a known user.",
            "schema": {
              "type": "object",
              "required": [
                "user_id"
              ],
              "properties": {
                "device_id": {
                  "type": "string",
                  "description": "Device ID associated with the access token. If no device\nis associated with the access token (such as in the case\nof application services) then this field can be omitted.\nOtherwise this is required.",
                  "x-addedInMatrixVersion": "1.1"
                },
                "is_guest": {
                  "type": "boolean",
                  "description": "When `true`, the user is a [Guest User](#guest-access). When\nnot present or `false`, the user is presumed to be a non-guest\nuser.",
                  "x-addedInMatrixVersion": "1.2"
                },
                "user_id": {
                  "type": "string",
                  "description": "The user ID that owns the access token."
                }
              }
            },
            "examples": {
              "application/json": {
                "device_id": "ABC1234",
                "user_id": "@joe:example.org"
              }
            }
          },
          "401": {
            "description": "The token is not recognised",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_UNKNOWN_TOKEN",
                "error": "Unrecognised access token."
              }
            }
          },
          "403": {
            "description": "The appservice cannot masquerade as the user or has not registered them.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_FORBIDDEN",
                "error": "Application service has not registered this user."
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/admin/whois/{userId}": {
      "get": {
        "tags": [
          "Server administration"
        ],
        "summary": "Gets information about a particular user.",
        "description": "Gets information about a particular user.\n\nThis API may be restricted to only be called by the user being looked\nup, or by a server admin. Server-local administrator privileges are not\nspecified in this document.",
        "operationId": "getWhoIs",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The user to look up.",
            "x-example": "@peter:rabbit.rocks"
          }
        ],
        "responses": {
          "200": {
            "description": "The lookup was successful.",
            "schema": {
              "type": "object",
              "properties": {
                "devices": {
                  "type": "object",
                  "description": "Each key is an identifier for one of the user's devices.",
                  "additionalProperties": {
                    "title": "DeviceInfo",
                    "type": "object",
                    "properties": {
                      "sessions": {
                        "type": "array",
                        "description": "A user's sessions (i.e. what they did with an access token from one login).",
                        "items": {
                          "title": "SessionInfo",
                          "type": "object",
                          "properties": {
                            "connections": {
                              "type": "array",
                              "description": "Information particular connections in the session.",
                              "items": {
                                "title": "ConnectionInfo",
                                "type": "object",
                                "properties": {
                                  "ip": {
                                    "type": "string",
                                    "description": "Most recently seen IP address of the session."
                                  },
                                  "last_seen": {
                                    "type": "integer",
                                    "description": "Unix timestamp that the session was last active.",
                                    "format": "int64"
                                  },
                                  "user_agent": {
                                    "type": "string",
                                    "description": "User agent string last seen in the session."
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "user_id": {
                  "type": "string",
                  "description": "The Matrix user ID of the user."
                }
              }
            },
            "examples": {
              "application/json": {
                "devices": {
                  "teapot": {
                    "sessions": [
                      {
                        "connections": [
                          {
                            "ip": "127.0.0.1",
                            "last_seen": 1411996332123,
                            "user_agent": "curl/7.31.0-DEV"
                          },
                          {
                            "ip": "10.0.0.2",
                            "last_seen": 1411996332123,
                            "user_agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.120 Safari/537.36"
                          }
                        ]
                      }
                    ]
                  }
                },
                "user_id": "@peter:rabbit.rocks"
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/capabilities": {
      "get": {
        "tags": [
          "Capabilities"
        ],
        "summary": "Gets information about the server's capabilities.",
        "description": "Gets information about the server's supported feature set\nand other relevant capabilities.",
        "operationId": "getCapabilities",
        "responses": {
          "200": {
            "description": "The capabilities of the server.",
            "schema": {
              "type": "object",
              "required": [
                "capabilities"
              ],
              "properties": {
                "capabilities": {
                  "title": "Capabilities",
                  "type": "object",
                  "description": "The custom capabilities the server supports, using the\nJava package naming convention.",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "properties": {
                    "m.change_password": {
                      "title": "ChangePasswordCapability",
                      "type": "object",
                      "description": "Capability to indicate if the user can change their password.",
                      "required": [
                        "enabled"
                      ],
                      "properties": {
                        "enabled": {
                          "type": "boolean",
                          "description": "True if the user can change their password, false otherwise.",
                          "example": false
                        }
                      }
                    },
                    "m.room_versions": {
                      "title": "RoomVersionsCapability",
                      "type": "object",
                      "description": "The room versions the server supports.",
                      "required": [
                        "default",
                        "available"
                      ],
                      "properties": {
                        "available": {
                          "type": "object",
                          "description": "A detailed description of the room versions the server supports.",
                          "additionalProperties": {
                            "title": "RoomVersionStability",
                            "type": "string",
                            "description": "The stability of the room version.",
                            "enum": [
                              "stable",
                              "unstable"
                            ]
                          }
                        },
                        "default": {
                          "type": "string",
                          "description": "The default room version the server is using for new rooms.",
                          "example": "1"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "capabilities": {
                  "com.example.custom.ratelimit": {
                    "max_requests_per_hour": 600
                  },
                  "m.change_password": {
                    "enabled": false
                  },
                  "m.room_versions": {
                    "available": {
                      "1": "stable",
                      "2": "stable",
                      "3": "unstable",
                      "test-version": "unstable"
                    },
                    "default": "1"
                  }
                }
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/createRoom": {
      "post": {
        "tags": [
          "Room creation"
        ],
        "summary": "Create a new room",
        "description": "Create a new room with various configuration options.\n\nThe server MUST apply the normal state resolution rules when creating\nthe new room, including checking power levels for each event. It MUST\napply the events implied by the request in the following order:\n\n1. The `m.room.create` event itself. Must be the first event in the\n   room.\n\n2. An `m.room.member` event for the creator to join the room. This is\n   needed so the remaining events can be sent.\n\n3. A default `m.room.power_levels` event, giving the room creator\n   (and not other members) permission to send state events. Overridden\n   by the `power_level_content_override` parameter.\n\n4. An `m.room.canonical_alias` event if `room_alias_name` is given.\n\n5. Events set by the `preset`. Currently these are the `m.room.join_rules`,\n   `m.room.history_visibility`, and `m.room.guest_access` state events.\n\n6. Events listed in `initial_state`, in the order that they are\n   listed.\n\n7. Events implied by `name` and `topic` (`m.room.name` and `m.room.topic`\n   state events).\n\n8. Invite events implied by `invite` and `invite_3pid` (`m.room.member` with\n   `membership: invite` and `m.room.third_party_invite`).\n\nThe available presets do the following with respect to room state:\n\n| Preset                 | `join_rules` | `history_visibility` | `guest_access` | Other |\n|------------------------|--------------|----------------------|----------------|-------|\n| `private_chat`         | `invite`     | `shared`             | `can_join`     |       |\n| `trusted_private_chat` | `invite`     | `shared`             | `can_join`     | All invitees are given the same power level as the room creator. |\n| `public_chat`          | `public`     | `shared`             | `forbidden`    |       |\n\nThe server will create a `m.room.create` event in the room with the\nrequesting user as the creator, alongside other keys provided in the\n`creation_content`.",
        "operationId": "createRoom",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The desired room configuration.",
            "schema": {
              "type": "object",
              "example": {
                "creation_content": {
                  "m.federate": false
                },
                "name": "The Grand Duke Pub",
                "preset": "public_chat",
                "room_alias_name": "thepub",
                "topic": "All about happy hour"
              },
              "properties": {
                "creation_content": {
                  "title": "CreationContent",
                  "type": "object",
                  "description": "Extra keys, such as `m.federate`, to be added to the content\nof the [`m.room.create`](https://spec.matrix.org/v1.5/client-server-api/#mroomcreate) event. The server will overwrite the following\nkeys: `creator`, `room_version`. Future versions of the specification\nmay allow the server to overwrite other keys."
                },
                "initial_state": {
                  "type": "array",
                  "description": "A list of state events to set in the new room. This allows\nthe user to override the default state events set in the new\nroom. The expected format of the state events are an object\nwith type, state_key and content keys set.\n\nTakes precedence over events set by `preset`, but gets\noverridden by `name` and `topic` keys.",
                  "items": {
                    "title": "StateEvent",
                    "type": "object",
                    "required": [
                      "type",
                      "content"
                    ],
                    "properties": {
                      "content": {
                        "type": "object",
                        "description": "The content of the event."
                      },
                      "state_key": {
                        "type": "string",
                        "description": "The state_key of the state event. Defaults to an empty string."
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of event to send."
                      }
                    }
                  }
                },
                "invite": {
                  "type": "array",
                  "description": "A list of user IDs to invite to the room. This will tell the\nserver to invite everyone in the list to the newly created room.",
                  "items": {
                    "type": "string"
                  }
                },
                "invite_3pid": {
                  "type": "array",
                  "description": "A list of objects representing third party IDs to invite into\nthe room.",
                  "items": {
                    "title": "Invite3pid",
                    "type": "object",
                    "required": [
                      "id_server",
                      "id_access_token",
                      "medium",
                      "address"
                    ],
                    "properties": {
                      "address": {
                        "type": "string",
                        "description": "The invitee's third party identifier."
                      },
                      "id_access_token": {
                        "type": "string",
                        "description": "An access token previously registered with the identity server. Servers\ncan treat this as optional to distinguish between r0.5-compatible clients\nand this specification version."
                      },
                      "id_server": {
                        "type": "string",
                        "description": "The hostname+port of the identity server which should be used for third party identifier lookups."
                      },
                      "medium": {
                        "type": "string",
                        "description": "The kind of address being passed in the address field, for example `email`."
                      }
                    }
                  }
                },
                "is_direct": {
                  "type": "boolean",
                  "description": "This flag makes the server set the `is_direct` flag on the\n`m.room.member` events sent to the users in `invite` and\n`invite_3pid`. See [Direct Messaging](https://spec.matrix.org/v1.5/client-server-api/#direct-messaging) for more information."
                },
                "name": {
                  "type": "string",
                  "description": "If this is included, an `m.room.name` event will be sent\ninto the room to indicate the name of the room. See Room\nEvents for more information on `m.room.name`."
                },
                "power_level_content_override": {
                  "title": "Power Level Event Content",
                  "type": "object",
                  "description": "The power level content to override in the default power level\nevent. This object is applied on top of the generated\n[`m.room.power_levels`](https://spec.matrix.org/v1.5/client-server-api/#mroompower_levels)\nevent content prior to it being sent to the room. Defaults to\noverriding nothing."
                },
                "preset": {
                  "type": "string",
                  "description": "Convenience parameter for setting various default state events\nbased on a preset.\n\nIf unspecified, the server should use the `visibility` to determine\nwhich preset to use. A visbility of `public` equates to a preset of\n`public_chat` and `private` visibility equates to a preset of\n`private_chat`.",
                  "enum": [
                    "private_chat",
                    "public_chat",
                    "trusted_private_chat"
                  ]
                },
                "room_alias_name": {
                  "type": "string",
                  "description": "The desired room alias **local part**. If this is included, a\nroom alias will be created and mapped to the newly created\nroom. The alias will belong on the *same* homeserver which\ncreated the room. For example, if this was set to \"foo\" and\nsent to the homeserver \"example.com\" the complete room alias\nwould be `#foo:example.com`.\n\nThe complete room alias will become the canonical alias for\nthe room and an `m.room.canonical_alias` event will be sent\ninto the room."
                },
                "room_version": {
                  "type": "string",
                  "description": "The room version to set for the room. If not provided, the homeserver is\nto use its configured default. If provided, the homeserver will return a\n400 error with the errcode `M_UNSUPPORTED_ROOM_VERSION` if it does not\nsupport the room version.",
                  "example": "1"
                },
                "topic": {
                  "type": "string",
                  "description": "If this is included, an `m.room.topic` event will be sent\ninto the room to indicate the topic for the room. See Room\nEvents for more information on `m.room.topic`."
                },
                "visibility": {
                  "type": "string",
                  "description": "A `public` visibility indicates that the room will be shown\nin the published room list. A `private` visibility will hide\nthe room from the published room list. Rooms default to\n`private` visibility if this key is not included. NB: This\nshould not be confused with `join_rules` which also uses the\nword `public`.",
                  "enum": [
                    "public",
                    "private"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the newly created room.",
            "schema": {
              "type": "object",
              "description": "Information about the newly created room.",
              "required": [
                "room_id"
              ],
              "properties": {
                "room_id": {
                  "type": "string",
                  "description": "The created room's ID."
                }
              }
            },
            "examples": {
              "application/json": {
                "room_id": "!sefiuhWgwghwWgh:example.com"
              }
            }
          },
          "400": {
            "description": "\nThe request is invalid. A meaningful `errcode` and description\nerror text will be returned. Example reasons for rejection include:\n\n- The request body is malformed (`errcode` set to `M_BAD_JSON`\n  or `M_NOT_JSON`).\n\n- The room alias specified is already taken (`errcode` set to\n  `M_ROOM_IN_USE`).\n\n- The initial state implied by the parameters to the request is\n  invalid: for example, the user's `power_level` is set below\n  that necessary to set the room name (`errcode` set to\n  `M_INVALID_ROOM_STATE`).\n\n- The homeserver doesn't support the requested room version, or\n  one or more users being invited to the new room are residents\n  of a homeserver which does not support the requested room version.\n  The `errcode` will be `M_UNSUPPORTED_ROOM_VERSION` in these\n  cases.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/delete_devices": {
      "post": {
        "tags": [
          "Device management"
        ],
        "summary": "Bulk deletion of devices",
        "description": "This API endpoint uses the [User-Interactive Authentication API](https://spec.matrix.org/v1.5/client-server-api/#user-interactive-authentication-api).\n\nDeletes the given devices, and invalidates any access token associated with them.",
        "operationId": "deleteDevices",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "devices"
              ],
              "properties": {
                "auth": {
                  "description": "Additional authentication information for the\nuser-interactive authentication API.",
                  "allOf": [
                    {
                      "title": "Authentication Data",
                      "type": "object",
                      "description": "Used by clients to submit authentication information to the interactive-authentication API",
                      "example": {
                        "example_credential": "verypoorsharedsecret",
                        "session": "xxxxx",
                        "type": "example.type.foo"
                      },
                      "additionalProperties": {
                        "description": "Keys dependent on the login type"
                      },
                      "properties": {
                        "session": {
                          "type": "string",
                          "description": "The value of the session key given by the homeserver."
                        },
                        "type": {
                          "type": "string",
                          "description": "The authentication type that the client is attempting to complete.\nMay be omitted if `session` is given, and the client is reissuing a\nrequest which it believes has been completed out-of-band (for example,\nvia the [fallback mechanism](#fallback))."
                        }
                      }
                    }
                  ]
                },
                "devices": {
                  "type": "array",
                  "description": "The list of device IDs to delete.",
                  "example": [
                    "QBUAZIFURK",
                    "AUIECTSRND"
                  ],
                  "items": {
                    "type": "string",
                    "description": "A list of device IDs."
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The devices were successfully removed, or had been removed\npreviously.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "401": {
            "description": "The homeserver requires additional authentication information.",
            "schema": {
              "title": "Authentication response",
              "type": "object",
              "description": "Used by servers to indicate that additional authentication information is required,",
              "required": [
                "flows"
              ],
              "properties": {
                "completed": {
                  "type": "array",
                  "description": "A list of the stages the client has completed successfully",
                  "items": {
                    "type": "string",
                    "example": "example.type.foo"
                  }
                },
                "flows": {
                  "type": "array",
                  "description": "A list of the login flows supported by the server for this API.",
                  "items": {
                    "title": "Flow information",
                    "type": "object",
                    "required": [
                      "stages"
                    ],
                    "properties": {
                      "stages": {
                        "type": "array",
                        "description": "The login type of each of the stages required to complete this\nauthentication flow",
                        "items": {
                          "type": "string",
                          "example": "example.type.foo"
                        }
                      }
                    }
                  }
                },
                "params": {
                  "type": "object",
                  "description": "Contains any information that the client will need to know in order to\nuse a given type of authentication. For each login type presented,\nthat type may be present as a key in this dictionary. For example, the\npublic part of an OAuth client ID could be given here.",
                  "example": {
                    "example.type.baz": {
                      "example_key": "foobar"
                    }
                  },
                  "additionalProperties": {
                    "type": "object"
                  }
                },
                "session": {
                  "type": "string",
                  "description": "This is a session identifier that the client must pass back to the home\nserver, if one is provided, in subsequent attempts to authenticate in the\nsame API call.",
                  "example": "xxxxxxyz"
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/devices": {
      "get": {
        "tags": [
          "Device management"
        ],
        "summary": "List registered devices for the current user",
        "description": "Gets information about all devices for the current user.",
        "operationId": "getDevices",
        "responses": {
          "200": {
            "description": "Device information",
            "schema": {
              "type": "object",
              "properties": {
                "devices": {
                  "type": "array",
                  "description": "A list of all registered devices for this user.",
                  "items": {
                    "type": "object",
                    "allOf": [
                      {
                        "title": "Device",
                        "type": "object",
                        "description": "A client device",
                        "required": [
                          "device_id"
                        ],
                        "properties": {
                          "device_id": {
                            "type": "string",
                            "description": "Identifier of this device.",
                            "example": "QBUAZIFURK"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "Display name set by the user for this device. Absent if no name has been\nset.",
                            "example": "android"
                          },
                          "last_seen_ip": {
                            "type": "string",
                            "description": "The IP address where this device was last seen. (May be a few minutes out\nof date, for efficiency reasons).",
                            "example": "1.2.3.4"
                          },
                          "last_seen_ts": {
                            "type": "integer",
                            "description": "The timestamp (in milliseconds since the unix epoch) when this devices\nwas last seen. (May be a few minutes out of date, for efficiency\nreasons).",
                            "format": "int64",
                            "example": 1474491775024
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "devices": [
                  {
                    "device_id": "QBUAZIFURK",
                    "display_name": "android",
                    "last_seen_ip": "1.2.3.4",
                    "last_seen_ts": 1474491775024
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/devices/{deviceId}": {
      "delete": {
        "tags": [
          "Device management"
        ],
        "summary": "Delete a device",
        "description": "This API endpoint uses the [User-Interactive Authentication API](https://spec.matrix.org/v1.5/client-server-api/#user-interactive-authentication-api).\n\nDeletes the given device, and invalidates any access token associated with it.",
        "operationId": "deleteDevice",
        "parameters": [
          {
            "type": "string",
            "name": "deviceId",
            "in": "path",
            "required": true,
            "description": "The device to delete.",
            "x-example": "QBUAZIFURK"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "auth": {
                  "description": "Additional authentication information for the\nuser-interactive authentication API.",
                  "allOf": [
                    {
                      "title": "Authentication Data",
                      "type": "object",
                      "description": "Used by clients to submit authentication information to the interactive-authentication API",
                      "example": {
                        "example_credential": "verypoorsharedsecret",
                        "session": "xxxxx",
                        "type": "example.type.foo"
                      },
                      "additionalProperties": {
                        "description": "Keys dependent on the login type"
                      },
                      "properties": {
                        "session": {
                          "type": "string",
                          "description": "The value of the session key given by the homeserver."
                        },
                        "type": {
                          "type": "string",
                          "description": "The authentication type that the client is attempting to complete.\nMay be omitted if `session` is given, and the client is reissuing a\nrequest which it believes has been completed out-of-band (for example,\nvia the [fallback mechanism](#fallback))."
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The device was successfully removed, or had been removed\npreviously.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "401": {
            "description": "The homeserver requires additional authentication information.",
            "schema": {
              "title": "Authentication response",
              "type": "object",
              "description": "Used by servers to indicate that additional authentication information is required,",
              "required": [
                "flows"
              ],
              "properties": {
                "completed": {
                  "type": "array",
                  "description": "A list of the stages the client has completed successfully",
                  "items": {
                    "type": "string",
                    "example": "example.type.foo"
                  }
                },
                "flows": {
                  "type": "array",
                  "description": "A list of the login flows supported by the server for this API.",
                  "items": {
                    "title": "Flow information",
                    "type": "object",
                    "required": [
                      "stages"
                    ],
                    "properties": {
                      "stages": {
                        "type": "array",
                        "description": "The login type of each of the stages required to complete this\nauthentication flow",
                        "items": {
                          "type": "string",
                          "example": "example.type.foo"
                        }
                      }
                    }
                  }
                },
                "params": {
                  "type": "object",
                  "description": "Contains any information that the client will need to know in order to\nuse a given type of authentication. For each login type presented,\nthat type may be present as a key in this dictionary. For example, the\npublic part of an OAuth client ID could be given here.",
                  "example": {
                    "example.type.baz": {
                      "example_key": "foobar"
                    }
                  },
                  "additionalProperties": {
                    "type": "object"
                  }
                },
                "session": {
                  "type": "string",
                  "description": "This is a session identifier that the client must pass back to the home\nserver, if one is provided, in subsequent attempts to authenticate in the\nsame API call.",
                  "example": "xxxxxxyz"
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      },
      "get": {
        "tags": [
          "Device management"
        ],
        "summary": "Get a single device",
        "description": "Gets information on a single device, by device id.",
        "operationId": "getDevice",
        "parameters": [
          {
            "type": "string",
            "name": "deviceId",
            "in": "path",
            "required": true,
            "description": "The device to retrieve.",
            "x-example": "QBUAZIFURK"
          }
        ],
        "responses": {
          "200": {
            "description": "Device information",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "title": "Device",
                  "type": "object",
                  "description": "A client device",
                  "required": [
                    "device_id"
                  ],
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "description": "Identifier of this device.",
                      "example": "QBUAZIFURK"
                    },
                    "display_name": {
                      "type": "string",
                      "description": "Display name set by the user for this device. Absent if no name has been\nset.",
                      "example": "android"
                    },
                    "last_seen_ip": {
                      "type": "string",
                      "description": "The IP address where this device was last seen. (May be a few minutes out\nof date, for efficiency reasons).",
                      "example": "1.2.3.4"
                    },
                    "last_seen_ts": {
                      "type": "integer",
                      "description": "The timestamp (in milliseconds since the unix epoch) when this devices\nwas last seen. (May be a few minutes out of date, for efficiency\nreasons).",
                      "format": "int64",
                      "example": 1474491775024
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": {
                "device_id": "QBUAZIFURK",
                "display_name": "android",
                "last_seen_ip": "1.2.3.4",
                "last_seen_ts": 1474491775024
              }
            }
          },
          "404": {
            "description": "The current user has no device with the given ID."
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Device management"
        ],
        "summary": "Update a device",
        "description": "Updates the metadata on the given device.",
        "operationId": "updateDevice",
        "parameters": [
          {
            "type": "string",
            "name": "deviceId",
            "in": "path",
            "required": true,
            "description": "The device to update.",
            "x-example": "QBUAZIFURK"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "New information for the device.",
            "schema": {
              "type": "object",
              "example": {
                "display_name": "My other phone"
              },
              "properties": {
                "display_name": {
                  "type": "string",
                  "description": "The new display name for this device. If not given, the\ndisplay name is unchanged."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The device was successfully updated.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "404": {
            "description": "The current user has no device with the given ID."
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/directory/list/appservice/{networkId}/{roomId}": {
      "put": {
        "tags": [
          "Application service room directory management"
        ],
        "summary": "Updates a room's visibility in the application service's room directory.",
        "description": "Updates the visibility of a given room on the application service's room\ndirectory.\n\nThis API is similar to the room directory visibility API used by clients\nto update the homeserver's more general room directory.\n\nThis API requires the use of an application service access token (`as_token`)\ninstead of a typical client's access_token. This API cannot be invoked by\nusers who are not identified as application services.",
        "operationId": "updateAppserviceRoomDirectoryVisibility",
        "parameters": [
          {
            "type": "string",
            "name": "networkId",
            "in": "path",
            "required": true,
            "description": "The protocol (network) ID to update the room list for. This would\nhave been provided by the application service as being listed as\na supported protocol.",
            "x-example": "irc"
          },
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room ID to add to the directory.",
            "x-example": "!somewhere:example.org"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "visibility"
              ],
              "properties": {
                "visibility": {
                  "type": "string",
                  "description": "Whether the room should be visible (public) in the directory\nor not (private).",
                  "example": "public",
                  "enum": [
                    "public",
                    "private"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The room's directory visibility has been updated.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/directory/list/room/{roomId}": {
      "get": {
        "tags": [
          "Room discovery"
        ],
        "summary": "Gets the visibility of a room in the directory",
        "description": "Gets the visibility of a given room on the server's public room directory.",
        "operationId": "getRoomVisibilityOnDirectory",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room ID.",
            "x-example": "!curbf:matrix.org"
          }
        ],
        "responses": {
          "200": {
            "description": "The visibility of the room in the directory",
            "schema": {
              "type": "object",
              "properties": {
                "visibility": {
                  "type": "string",
                  "description": "The visibility of the room in the directory.",
                  "enum": [
                    "private",
                    "public"
                  ]
                }
              }
            },
            "examples": {
              "application/json": {
                "visibility": "public"
              }
            }
          },
          "404": {
            "description": "The room is not known to the server",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "Room not found"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Room discovery"
        ],
        "summary": "Sets the visibility of a room in the room directory",
        "description": "Sets the visibility of a given room in the server's public room\ndirectory.\n\nServers may choose to implement additional access control checks\nhere, for instance that room visibility can only be changed by\nthe room creator or a server administrator.",
        "operationId": "setRoomVisibilityOnDirectory",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room ID.",
            "x-example": "!curbf:matrix.org"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The new visibility for the room on the room directory.",
            "schema": {
              "type": "object",
              "example": {
                "visibility": "public"
              },
              "properties": {
                "visibility": {
                  "type": "string",
                  "description": "The new visibility setting for the room.\nDefaults to 'public'.",
                  "enum": [
                    "private",
                    "public"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The visibility was updated, or no change was needed.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "404": {
            "description": "The room is not known to the server",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "Room not found"
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/directory/room/{roomAlias}": {
      "delete": {
        "tags": [
          "Room directory"
        ],
        "summary": "Remove a mapping of room alias to room ID.",
        "description": "Remove a mapping of room alias to room ID.\n\nServers may choose to implement additional access control checks here, for instance that\nroom aliases can only be deleted by their creator or a server administrator.\n\n**Note:**\nServers may choose to update the `alt_aliases` for the `m.room.canonical_alias`\nstate event in the room when an alias is removed. Servers which choose to update the\ncanonical alias event are recommended to, in addition to their other relevant permission\nchecks, delete the alias and return a successful response even if the user does not\nhave permission to update the `m.room.canonical_alias` event.",
        "operationId": "deleteRoomAlias",
        "parameters": [
          {
            "type": "string",
            "name": "roomAlias",
            "in": "path",
            "required": true,
            "description": "The room alias to remove. Its format is defined\n[in the appendices](https://spec.matrix.org/v1.5/appendices/#room-aliases).\n",
            "x-example": "#monkeys:matrix.org"
          }
        ],
        "responses": {
          "200": {
            "description": "The mapping was deleted.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "404": {
            "description": "There is no mapped room ID for this room alias.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "Room alias #monkeys:example.org not found."
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      },
      "get": {
        "tags": [
          "Room directory"
        ],
        "summary": "Get the room ID corresponding to this room alias.",
        "description": "Requests that the server resolve a room alias to a room ID.\n\nThe server will use the federation API to resolve the alias if the\ndomain part of the alias does not correspond to the server's own\ndomain.",
        "operationId": "getRoomIdByAlias",
        "parameters": [
          {
            "type": "string",
            "name": "roomAlias",
            "in": "path",
            "required": true,
            "description": "The room alias. Its format is defined\n[in the appendices](https://spec.matrix.org/v1.5/appendices/#room-aliases).\n",
            "x-example": "#monkeys:matrix.org"
          }
        ],
        "responses": {
          "200": {
            "description": "The room ID and other information for this alias.",
            "schema": {
              "type": "object",
              "properties": {
                "room_id": {
                  "type": "string",
                  "description": "The room ID for this room alias."
                },
                "servers": {
                  "type": "array",
                  "description": "A list of servers that are aware of this room alias.",
                  "items": {
                    "type": "string",
                    "description": "A server which is aware of this room alias."
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "room_id": "!abnjk1jdasj98:capuchins.com",
                "servers": [
                  "capuchins.com",
                  "matrix.org",
                  "another.com"
                ]
              }
            }
          },
          "400": {
            "description": "The given `roomAlias` is not a valid room alias.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_INVALID_PARAM",
                "error": "Room alias invalid"
              }
            }
          },
          "404": {
            "description": "There is no mapped room ID for this room alias.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "Room alias #monkeys:matrix.org not found."
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Room directory"
        ],
        "summary": "Create a new mapping from room alias to room ID.",
        "operationId": "setRoomAlias",
        "parameters": [
          {
            "type": "string",
            "name": "roomAlias",
            "in": "path",
            "required": true,
            "description": "The room alias to set. Its format is defined\n[in the appendices](https://spec.matrix.org/v1.5/appendices/#room-aliases).\n",
            "x-example": "#monkeys:matrix.org"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Information about this room alias.",
            "schema": {
              "type": "object",
              "example": {
                "room_id": "!abnjk1jdasj98:capuchins.com"
              },
              "required": [
                "room_id"
              ],
              "properties": {
                "room_id": {
                  "type": "string",
                  "description": "The room ID to set."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The mapping was created.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "400": {
            "description": "The given `roomAlias` is not a valid room alias.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_INVALID_PARAM",
                "error": "Room alias invalid"
              }
            }
          },
          "409": {
            "description": "A room alias with that name already exists.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_UNKNOWN",
                "error": "Room alias #monkeys:matrix.org already exists."
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/events": {
      "get": {
        "tags": [
          "Room participation"
        ],
        "summary": "Listen on the event stream.",
        "description": "This will listen for new events and return them to the caller. This will\nblock until an event is received, or until the `timeout` is reached.\n\nThis endpoint was deprecated in r0 of this specification. Clients\nshould instead call the [`/sync`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3sync)\nendpoint with a `since` parameter. See\nthe [migration guide](https://matrix.org/docs/guides/migrating-from-client-server-api-v-1#deprecated-endpoints).",
        "operationId": "getEvents",
        "parameters": [
          {
            "type": "string",
            "name": "from",
            "in": "query",
            "description": "The token to stream from. This token is either from a previous\nrequest to this API or from the initial sync API.",
            "x-example": "s3456_9_0"
          },
          {
            "type": "integer",
            "name": "timeout",
            "in": "query",
            "description": "The maximum time in milliseconds to wait for an event.",
            "x-example": "35000"
          }
        ],
        "responses": {
          "200": {
            "description": "The events received, which may be none.",
            "schema": {
              "type": "object",
              "properties": {
                "chunk": {
                  "type": "array",
                  "description": "An array of events.",
                  "items": {
                    "title": "ClientEvent",
                    "type": "object",
                    "description": "The format used for events when they are returned from a homeserver to a client\nvia the Client-Server API, or sent to an Application Service via the Application Services API.",
                    "allOf": [
                      {
                        "title": "ClientEventWithoutRoomID",
                        "type": "object",
                        "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                        "required": [
                          "event_id",
                          "type",
                          "sender",
                          "origin_server_ts",
                          "content"
                        ],
                        "properties": {
                          "content": {
                            "type": "object",
                            "description": "The body of this event, as created by the client which sent it.",
                            "example": {
                              "membership": "join"
                            }
                          },
                          "event_id": {
                            "type": "string",
                            "description": "The globally unique identifier for this event.",
                            "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                          },
                          "origin_server_ts": {
                            "type": "integer",
                            "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                            "format": "int64",
                            "example": 1632489532305
                          },
                          "sender": {
                            "type": "string",
                            "description": "Contains the fully-qualified ID of the user who sent this event.",
                            "example": "@example:example.org"
                          },
                          "state_key": {
                            "type": "string",
                            "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                            "example": "@user:example.org"
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of the event.",
                            "example": "m.room.member"
                          },
                          "unsigned": {
                            "title": "UnsignedData",
                            "type": "object",
                            "description": "Contains optional extra information about the event.",
                            "properties": {
                              "age": {
                                "type": "integer",
                                "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                "format": "int64",
                                "example": 1567437
                              },
                              "prev_content": {
                                "title": "EventContent",
                                "type": "object",
                                "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                "x-changedInMatrixVersion": {
                                  "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                }
                              },
                              "redacted_because": {
                                "title": "ClientEventWithoutRoomID",
                                "type": "object",
                                "description": "The event that redacted this event, if any.",
                                "example": {
                                  "content": {
                                    "reason": "spam"
                                  },
                                  "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                  "origin_server_ts": 1632491098485,
                                  "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                  "sender": "@moderator:example.org",
                                  "type": "m.room.redaction",
                                  "unsigned": {
                                    "age": 1257
                                  }
                                }
                              },
                              "transaction_id": {
                                "type": "string",
                                "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                              }
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "room_id"
                        ],
                        "properties": {
                          "room_id": {
                            "type": "string",
                            "description": "The ID of the room associated with this event.",
                            "example": "!jEsUZKDJdhlrceRyVU:example.org"
                          },
                          "unsigned": {
                            "properties": {
                              "redacted_because": {
                                "title": "ClientEvent",
                                "example": {
                                  "content": {
                                    "reason": "spam"
                                  },
                                  "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                  "origin_server_ts": 1632491098485,
                                  "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                  "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                                  "sender": "@moderator:example.org",
                                  "type": "m.room.redaction",
                                  "unsigned": {
                                    "age": 1257
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "end": {
                  "type": "string",
                  "description": "A token which correlates to the end of `chunk`. This\ntoken should be used in the next request to `/events`."
                },
                "start": {
                  "type": "string",
                  "description": "A token which correlates to the start of `chunk`. This\nis usually the same token supplied to `from=`."
                }
              }
            },
            "examples": {
              "application/json": {
                "chunk": [
                  {
                    "content": {
                      "body": "This is an example text message",
                      "format": "org.matrix.custom.html",
                      "formatted_body": "<b>This is an example text message</b>",
                      "msgtype": "m.text"
                    },
                    "event_id": "$143273582443PhrSn:example.org",
                    "origin_server_ts": 1432735824653,
                    "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                    "sender": "@example:example.org",
                    "type": "m.room.message",
                    "unsigned": {
                      "age": 1234
                    }
                  }
                ],
                "end": "s3457_9_0",
                "start": "s3456_9_0"
              }
            }
          },
          "400": {
            "description": "Bad pagination `from` parameter."
          }
        },
        "deprecated": true,
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/events ": {
      "get": {
        "tags": [
          "Room participation"
        ],
        "summary": "Listen on the event stream of a particular room.",
        "description": "This will listen for new events related to a particular room and return\nthem to the caller. This will block until an event is received, or until\nthe `timeout` is reached.\n\nThis API is the same as the normal `/events` endpoint, but can be\ncalled by users who have not joined the room.\n\nNote that the normal `/events` endpoint has been deprecated. This\nAPI will also be deprecated at some point, but its replacement is not\nyet known.",
        "operationId": "peekEvents",
        "parameters": [
          {
            "type": "string",
            "name": "from",
            "in": "query",
            "description": "The token to stream from. This token is either from a previous\nrequest to this API or from the initial sync API.",
            "x-example": "s3456_9_0"
          },
          {
            "type": "integer",
            "name": "timeout",
            "in": "query",
            "description": "The maximum time in milliseconds to wait for an event.",
            "x-example": "35000"
          },
          {
            "type": "string",
            "name": "room_id",
            "in": "query",
            "description": "The room ID for which events should be returned.",
            "x-example": [
              "!somewhere:over.the.rainbow"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The events received, which may be none.",
            "schema": {
              "type": "object",
              "properties": {
                "chunk": {
                  "type": "array",
                  "description": "An array of events.",
                  "items": {
                    "title": "Event",
                    "type": "object",
                    "allOf": [
                      {
                        "title": "ClientEvent",
                        "type": "object",
                        "description": "The format used for events when they are returned from a homeserver to a client\nvia the Client-Server API, or sent to an Application Service via the Application Services API.",
                        "allOf": [
                          {
                            "title": "ClientEventWithoutRoomID",
                            "type": "object",
                            "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                            "required": [
                              "event_id",
                              "type",
                              "sender",
                              "origin_server_ts",
                              "content"
                            ],
                            "properties": {
                              "content": {
                                "type": "object",
                                "description": "The body of this event, as created by the client which sent it.",
                                "example": {
                                  "membership": "join"
                                }
                              },
                              "event_id": {
                                "type": "string",
                                "description": "The globally unique identifier for this event.",
                                "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                              },
                              "origin_server_ts": {
                                "type": "integer",
                                "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                                "format": "int64",
                                "example": 1632489532305
                              },
                              "sender": {
                                "type": "string",
                                "description": "Contains the fully-qualified ID of the user who sent this event.",
                                "example": "@example:example.org"
                              },
                              "state_key": {
                                "type": "string",
                                "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                                "example": "@user:example.org"
                              },
                              "type": {
                                "type": "string",
                                "description": "The type of the event.",
                                "example": "m.room.member"
                              },
                              "unsigned": {
                                "title": "UnsignedData",
                                "type": "object",
                                "description": "Contains optional extra information about the event.",
                                "properties": {
                                  "age": {
                                    "type": "integer",
                                    "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                    "format": "int64",
                                    "example": 1567437
                                  },
                                  "prev_content": {
                                    "title": "EventContent",
                                    "type": "object",
                                    "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                    "x-changedInMatrixVersion": {
                                      "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                    }
                                  },
                                  "redacted_because": {
                                    "title": "ClientEventWithoutRoomID",
                                    "type": "object",
                                    "description": "The event that redacted this event, if any.",
                                    "example": {
                                      "content": {
                                        "reason": "spam"
                                      },
                                      "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                      "origin_server_ts": 1632491098485,
                                      "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                      "sender": "@moderator:example.org",
                                      "type": "m.room.redaction",
                                      "unsigned": {
                                        "age": 1257
                                      }
                                    }
                                  },
                                  "transaction_id": {
                                    "type": "string",
                                    "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "room_id"
                            ],
                            "properties": {
                              "room_id": {
                                "type": "string",
                                "description": "The ID of the room associated with this event.",
                                "example": "!jEsUZKDJdhlrceRyVU:example.org"
                              },
                              "unsigned": {
                                "properties": {
                                  "redacted_because": {
                                    "title": "ClientEvent",
                                    "example": {
                                      "content": {
                                        "reason": "spam"
                                      },
                                      "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                      "origin_server_ts": 1632491098485,
                                      "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                      "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                                      "sender": "@moderator:example.org",
                                      "type": "m.room.redaction",
                                      "unsigned": {
                                        "age": 1257
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                },
                "end": {
                  "type": "string",
                  "description": "A token which correlates to the last value in `chunk`. This\ntoken should be used in the next request to `/events`."
                },
                "start": {
                  "type": "string",
                  "description": "A token which correlates to the first value in `chunk`. This\nis usually the same token supplied to `from=`."
                }
              }
            },
            "examples": {
              "application/json": {
                "chunk": [
                  {
                    "content": {
                      "body": "This is an example text message",
                      "format": "org.matrix.custom.html",
                      "formatted_body": "<b>This is an example text message</b>",
                      "msgtype": "m.text"
                    },
                    "event_id": "$143273582443PhrSn:example.org",
                    "origin_server_ts": 1432735824653,
                    "room_id": "!somewhere:over.the.rainbow",
                    "sender": "@example:example.org",
                    "type": "m.room.message",
                    "unsigned": {
                      "age": 1234
                    }
                  }
                ],
                "end": "s3457_9_0",
                "start": "s3456_9_0"
              }
            }
          },
          "400": {
            "description": "Bad pagination `from` parameter."
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/events/{eventId}": {
      "get": {
        "tags": [
          "Room participation"
        ],
        "summary": "Get a single event by event ID.",
        "description": "Get a single event based on `event_id`. You must have permission to\nretrieve this event e.g. by being a member in the room for this event.\n\nThis endpoint was deprecated in r0 of this specification. Clients\nshould instead call the\n[/rooms/{roomId}/event/{eventId}](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3roomsroomideventeventid) API\nor the [/rooms/{roomId}/context/{eventId](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3roomsroomidcontexteventid) API.",
        "operationId": "getOneEvent",
        "parameters": [
          {
            "type": "string",
            "name": "eventId",
            "in": "path",
            "required": true,
            "description": "The event ID to get.",
            "x-example": "$asfDuShaf7Gafaw:matrix.org"
          }
        ],
        "responses": {
          "200": {
            "description": "The full event.",
            "schema": {
              "title": "ClientEvent",
              "type": "object",
              "description": "The format used for events when they are returned from a homeserver to a client\nvia the Client-Server API, or sent to an Application Service via the Application Services API.",
              "allOf": [
                {
                  "title": "ClientEventWithoutRoomID",
                  "type": "object",
                  "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                  "required": [
                    "event_id",
                    "type",
                    "sender",
                    "origin_server_ts",
                    "content"
                  ],
                  "properties": {
                    "content": {
                      "type": "object",
                      "description": "The body of this event, as created by the client which sent it.",
                      "example": {
                        "membership": "join"
                      }
                    },
                    "event_id": {
                      "type": "string",
                      "description": "The globally unique identifier for this event.",
                      "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                    },
                    "origin_server_ts": {
                      "type": "integer",
                      "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                      "format": "int64",
                      "example": 1632489532305
                    },
                    "sender": {
                      "type": "string",
                      "description": "Contains the fully-qualified ID of the user who sent this event.",
                      "example": "@example:example.org"
                    },
                    "state_key": {
                      "type": "string",
                      "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                      "example": "@user:example.org"
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of the event.",
                      "example": "m.room.member"
                    },
                    "unsigned": {
                      "title": "UnsignedData",
                      "type": "object",
                      "description": "Contains optional extra information about the event.",
                      "properties": {
                        "age": {
                          "type": "integer",
                          "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                          "format": "int64",
                          "example": 1567437
                        },
                        "prev_content": {
                          "title": "EventContent",
                          "type": "object",
                          "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                          "x-changedInMatrixVersion": {
                            "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                          }
                        },
                        "redacted_because": {
                          "title": "ClientEventWithoutRoomID",
                          "type": "object",
                          "description": "The event that redacted this event, if any.",
                          "example": {
                            "content": {
                              "reason": "spam"
                            },
                            "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                            "origin_server_ts": 1632491098485,
                            "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                            "sender": "@moderator:example.org",
                            "type": "m.room.redaction",
                            "unsigned": {
                              "age": 1257
                            }
                          }
                        },
                        "transaction_id": {
                          "type": "string",
                          "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                        }
                      }
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "room_id"
                  ],
                  "properties": {
                    "room_id": {
                      "type": "string",
                      "description": "The ID of the room associated with this event.",
                      "example": "!jEsUZKDJdhlrceRyVU:example.org"
                    },
                    "unsigned": {
                      "properties": {
                        "redacted_because": {
                          "title": "ClientEvent",
                          "example": {
                            "content": {
                              "reason": "spam"
                            },
                            "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                            "origin_server_ts": 1632491098485,
                            "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                            "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                            "sender": "@moderator:example.org",
                            "type": "m.room.redaction",
                            "unsigned": {
                              "age": 1257
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": {
                "content": {
                  "body": "This is an example text message",
                  "format": "org.matrix.custom.html",
                  "formatted_body": "<b>This is an example text message</b>",
                  "msgtype": "m.text"
                },
                "event_id": "$143273582443PhrSn:example.org",
                "origin_server_ts": 1432735824653,
                "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                "sender": "@example:example.org",
                "type": "m.room.message",
                "unsigned": {
                  "age": 1234
                }
              }
            }
          },
          "404": {
            "description": "The event was not found or you do not have permission to read this event."
          }
        },
        "deprecated": true,
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/initialSync": {
      "get": {
        "tags": [
          "Room participation"
        ],
        "summary": "Get the user's current state.",
        "description": "This returns the full state for this user, with an optional limit on the\nnumber of messages per room to return.\n\nThis endpoint was deprecated in r0 of this specification. Clients\nshould instead call the [`/sync`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3sync)\nendpoint with no `since` parameter. See\nthe [migration guide](https://matrix.org/docs/guides/migrating-from-client-server-api-v-1#deprecated-endpoints).",
        "operationId": "initialSync",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query",
            "description": "The maximum number of messages to return for each room.",
            "x-example": "2"
          },
          {
            "type": "boolean",
            "name": "archived",
            "in": "query",
            "description": "Whether to include rooms that the user has left. If `false` then\nonly rooms that the user has been invited to or has joined are\nincluded. If set to `true` then rooms that the user has left are\nincluded as well. By default this is `false`.",
            "x-example": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "The user's current state.",
            "schema": {
              "type": "object",
              "required": [
                "end",
                "rooms",
                "presence"
              ],
              "properties": {
                "account_data": {
                  "type": "array",
                  "description": "The global private data created by this user.",
                  "items": {
                    "title": "Event",
                    "type": "object",
                    "allOf": [
                      {
                        "title": "Event",
                        "type": "object",
                        "description": "The basic set of fields all events must have.",
                        "required": [
                          "type",
                          "content"
                        ],
                        "properties": {
                          "content": {
                            "type": "object",
                            "description": "The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body."
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'"
                          }
                        }
                      }
                    ]
                  }
                },
                "end": {
                  "type": "string",
                  "description": "A token which correlates to the end of the timelines returned. This\ntoken should be used with the `/events` endpoint to listen for new\nevents."
                },
                "presence": {
                  "type": "array",
                  "description": "A list of presence events.",
                  "items": {
                    "title": "ClientEvent",
                    "type": "object",
                    "description": "The format used for events when they are returned from a homeserver to a client\nvia the Client-Server API, or sent to an Application Service via the Application Services API.",
                    "allOf": [
                      {
                        "title": "ClientEventWithoutRoomID",
                        "type": "object",
                        "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                        "required": [
                          "event_id",
                          "type",
                          "sender",
                          "origin_server_ts",
                          "content"
                        ],
                        "properties": {
                          "content": {
                            "type": "object",
                            "description": "The body of this event, as created by the client which sent it.",
                            "example": {
                              "membership": "join"
                            }
                          },
                          "event_id": {
                            "type": "string",
                            "description": "The globally unique identifier for this event.",
                            "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                          },
                          "origin_server_ts": {
                            "type": "integer",
                            "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                            "format": "int64",
                            "example": 1632489532305
                          },
                          "sender": {
                            "type": "string",
                            "description": "Contains the fully-qualified ID of the user who sent this event.",
                            "example": "@example:example.org"
                          },
                          "state_key": {
                            "type": "string",
                            "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                            "example": "@user:example.org"
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of the event.",
                            "example": "m.room.member"
                          },
                          "unsigned": {
                            "title": "UnsignedData",
                            "type": "object",
                            "description": "Contains optional extra information about the event.",
                            "properties": {
                              "age": {
                                "type": "integer",
                                "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                "format": "int64",
                                "example": 1567437
                              },
                              "prev_content": {
                                "title": "EventContent",
                                "type": "object",
                                "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                "x-changedInMatrixVersion": {
                                  "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                }
                              },
                              "redacted_because": {
                                "title": "ClientEventWithoutRoomID",
                                "type": "object",
                                "description": "The event that redacted this event, if any.",
                                "example": {
                                  "content": {
                                    "reason": "spam"
                                  },
                                  "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                  "origin_server_ts": 1632491098485,
                                  "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                  "sender": "@moderator:example.org",
                                  "type": "m.room.redaction",
                                  "unsigned": {
                                    "age": 1257
                                  }
                                }
                              },
                              "transaction_id": {
                                "type": "string",
                                "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                              }
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "room_id"
                        ],
                        "properties": {
                          "room_id": {
                            "type": "string",
                            "description": "The ID of the room associated with this event.",
                            "example": "!jEsUZKDJdhlrceRyVU:example.org"
                          },
                          "unsigned": {
                            "properties": {
                              "redacted_because": {
                                "title": "ClientEvent",
                                "example": {
                                  "content": {
                                    "reason": "spam"
                                  },
                                  "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                  "origin_server_ts": 1632491098485,
                                  "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                  "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                                  "sender": "@moderator:example.org",
                                  "type": "m.room.redaction",
                                  "unsigned": {
                                    "age": 1257
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "rooms": {
                  "type": "array",
                  "items": {
                    "title": "RoomInfo",
                    "type": "object",
                    "required": [
                      "room_id",
                      "membership"
                    ],
                    "properties": {
                      "account_data": {
                        "type": "array",
                        "description": "The private data that this user has attached to\nthis room.",
                        "items": {
                          "title": "ClientEvent",
                          "type": "object",
                          "description": "The format used for events when they are returned from a homeserver to a client\nvia the Client-Server API, or sent to an Application Service via the Application Services API.",
                          "allOf": [
                            {
                              "title": "ClientEventWithoutRoomID",
                              "type": "object",
                              "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                              "required": [
                                "event_id",
                                "type",
                                "sender",
                                "origin_server_ts",
                                "content"
                              ],
                              "properties": {
                                "content": {
                                  "type": "object",
                                  "description": "The body of this event, as created by the client which sent it.",
                                  "example": {
                                    "membership": "join"
                                  }
                                },
                                "event_id": {
                                  "type": "string",
                                  "description": "The globally unique identifier for this event.",
                                  "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                                },
                                "origin_server_ts": {
                                  "type": "integer",
                                  "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                                  "format": "int64",
                                  "example": 1632489532305
                                },
                                "sender": {
                                  "type": "string",
                                  "description": "Contains the fully-qualified ID of the user who sent this event.",
                                  "example": "@example:example.org"
                                },
                                "state_key": {
                                  "type": "string",
                                  "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                                  "example": "@user:example.org"
                                },
                                "type": {
                                  "type": "string",
                                  "description": "The type of the event.",
                                  "example": "m.room.member"
                                },
                                "unsigned": {
                                  "title": "UnsignedData",
                                  "type": "object",
                                  "description": "Contains optional extra information about the event.",
                                  "properties": {
                                    "age": {
                                      "type": "integer",
                                      "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                      "format": "int64",
                                      "example": 1567437
                                    },
                                    "prev_content": {
                                      "title": "EventContent",
                                      "type": "object",
                                      "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                      "x-changedInMatrixVersion": {
                                        "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                      }
                                    },
                                    "redacted_because": {
                                      "title": "ClientEventWithoutRoomID",
                                      "type": "object",
                                      "description": "The event that redacted this event, if any.",
                                      "example": {
                                        "content": {
                                          "reason": "spam"
                                        },
                                        "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                        "origin_server_ts": 1632491098485,
                                        "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                        "sender": "@moderator:example.org",
                                        "type": "m.room.redaction",
                                        "unsigned": {
                                          "age": 1257
                                        }
                                      }
                                    },
                                    "transaction_id": {
                                      "type": "string",
                                      "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "required": [
                                "room_id"
                              ],
                              "properties": {
                                "room_id": {
                                  "type": "string",
                                  "description": "The ID of the room associated with this event.",
                                  "example": "!jEsUZKDJdhlrceRyVU:example.org"
                                },
                                "unsigned": {
                                  "properties": {
                                    "redacted_because": {
                                      "title": "ClientEvent",
                                      "example": {
                                        "content": {
                                          "reason": "spam"
                                        },
                                        "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                        "origin_server_ts": 1632491098485,
                                        "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                        "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                                        "sender": "@moderator:example.org",
                                        "type": "m.room.redaction",
                                        "unsigned": {
                                          "age": 1257
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "invite": {
                        "title": "InviteEvent",
                        "type": "object",
                        "description": "The invite event if `membership` is `invite`",
                        "allOf": [
                          {
                            "title": "ClientEventWithoutRoomID",
                            "type": "object",
                            "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                            "required": [
                              "event_id",
                              "type",
                              "sender",
                              "origin_server_ts",
                              "content"
                            ],
                            "properties": {
                              "content": {
                                "type": "object",
                                "description": "The body of this event, as created by the client which sent it.",
                                "example": {
                                  "membership": "join"
                                }
                              },
                              "event_id": {
                                "type": "string",
                                "description": "The globally unique identifier for this event.",
                                "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                              },
                              "origin_server_ts": {
                                "type": "integer",
                                "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                                "format": "int64",
                                "example": 1632489532305
                              },
                              "sender": {
                                "type": "string",
                                "description": "Contains the fully-qualified ID of the user who sent this event.",
                                "example": "@example:example.org"
                              },
                              "state_key": {
                                "type": "string",
                                "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                                "example": "@user:example.org"
                              },
                              "type": {
                                "type": "string",
                                "description": "The type of the event.",
                                "example": "m.room.member"
                              },
                              "unsigned": {
                                "title": "UnsignedData",
                                "type": "object",
                                "description": "Contains optional extra information about the event.",
                                "properties": {
                                  "age": {
                                    "type": "integer",
                                    "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                    "format": "int64",
                                    "example": 1567437
                                  },
                                  "prev_content": {
                                    "title": "EventContent",
                                    "type": "object",
                                    "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                    "x-changedInMatrixVersion": {
                                      "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                    }
                                  },
                                  "redacted_because": {
                                    "title": "ClientEventWithoutRoomID",
                                    "type": "object",
                                    "description": "The event that redacted this event, if any.",
                                    "example": {
                                      "content": {
                                        "reason": "spam"
                                      },
                                      "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                      "origin_server_ts": 1632491098485,
                                      "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                      "sender": "@moderator:example.org",
                                      "type": "m.room.redaction",
                                      "unsigned": {
                                        "age": 1257
                                      }
                                    }
                                  },
                                  "transaction_id": {
                                    "type": "string",
                                    "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "room_id"
                            ],
                            "properties": {
                              "room_id": {
                                "type": "string",
                                "description": "The ID of the room associated with this event.",
                                "example": "!jEsUZKDJdhlrceRyVU:example.org"
                              },
                              "unsigned": {
                                "properties": {
                                  "redacted_because": {
                                    "title": "ClientEvent",
                                    "example": {
                                      "content": {
                                        "reason": "spam"
                                      },
                                      "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                      "origin_server_ts": 1632491098485,
                                      "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                      "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                                      "sender": "@moderator:example.org",
                                      "type": "m.room.redaction",
                                      "unsigned": {
                                        "age": 1257
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        ]
                      },
                      "membership": {
                        "type": "string",
                        "description": "The user's membership state in this room.",
                        "enum": [
                          "invite",
                          "join",
                          "leave",
                          "ban"
                        ]
                      },
                      "messages": {
                        "title": "PaginationChunk",
                        "type": "object",
                        "description": "The pagination chunk for this room.",
                        "required": [
                          "end",
                          "chunk"
                        ],
                        "properties": {
                          "chunk": {
                            "type": "array",
                            "description": "If the user is a member of the room this will be a\nlist of the most recent messages for this room. If\nthe user has left the room this will be the\nmessages that preceded them leaving. This array\nwill consist of at most `limit` elements.",
                            "items": {
                              "title": "ClientEvent",
                              "type": "object",
                              "description": "The format used for events when they are returned from a homeserver to a client\nvia the Client-Server API, or sent to an Application Service via the Application Services API.",
                              "allOf": [
                                {
                                  "title": "ClientEventWithoutRoomID",
                                  "type": "object",
                                  "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                                  "required": [
                                    "event_id",
                                    "type",
                                    "sender",
                                    "origin_server_ts",
                                    "content"
                                  ],
                                  "properties": {
                                    "content": {
                                      "type": "object",
                                      "description": "The body of this event, as created by the client which sent it.",
                                      "example": {
                                        "membership": "join"
                                      }
                                    },
                                    "event_id": {
                                      "type": "string",
                                      "description": "The globally unique identifier for this event.",
                                      "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                                    },
                                    "origin_server_ts": {
                                      "type": "integer",
                                      "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                                      "format": "int64",
                                      "example": 1632489532305
                                    },
                                    "sender": {
                                      "type": "string",
                                      "description": "Contains the fully-qualified ID of the user who sent this event.",
                                      "example": "@example:example.org"
                                    },
                                    "state_key": {
                                      "type": "string",
                                      "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                                      "example": "@user:example.org"
                                    },
                                    "type": {
                                      "type": "string",
                                      "description": "The type of the event.",
                                      "example": "m.room.member"
                                    },
                                    "unsigned": {
                                      "title": "UnsignedData",
                                      "type": "object",
                                      "description": "Contains optional extra information about the event.",
                                      "properties": {
                                        "age": {
                                          "type": "integer",
                                          "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                          "format": "int64",
                                          "example": 1567437
                                        },
                                        "prev_content": {
                                          "title": "EventContent",
                                          "type": "object",
                                          "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                          "x-changedInMatrixVersion": {
                                            "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                          }
                                        },
                                        "redacted_because": {
                                          "title": "ClientEventWithoutRoomID",
                                          "type": "object",
                                          "description": "The event that redacted this event, if any.",
                                          "example": {
                                            "content": {
                                              "reason": "spam"
                                            },
                                            "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                            "origin_server_ts": 1632491098485,
                                            "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                            "sender": "@moderator:example.org",
                                            "type": "m.room.redaction",
                                            "unsigned": {
                                              "age": 1257
                                            }
                                          }
                                        },
                                        "transaction_id": {
                                          "type": "string",
                                          "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "room_id"
                                  ],
                                  "properties": {
                                    "room_id": {
                                      "type": "string",
                                      "description": "The ID of the room associated with this event.",
                                      "example": "!jEsUZKDJdhlrceRyVU:example.org"
                                    },
                                    "unsigned": {
                                      "properties": {
                                        "redacted_because": {
                                          "title": "ClientEvent",
                                          "example": {
                                            "content": {
                                              "reason": "spam"
                                            },
                                            "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                            "origin_server_ts": 1632491098485,
                                            "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                            "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                                            "sender": "@moderator:example.org",
                                            "type": "m.room.redaction",
                                            "unsigned": {
                                              "age": 1257
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "end": {
                            "type": "string",
                            "description": "A token which correlates to the end of `chunk`.\nCan be passed to\n[`/rooms/<room_id>/messages`](#get_matrixclientv3roomsroomidmessages)\nto retrieve later events."
                          },
                          "start": {
                            "type": "string",
                            "description": "A token which correlates to the start of `chunk`.\nCan be passed to\n[`/rooms/<room_id>/messages`](#get_matrixclientv3roomsroomidmessages)\nto retrieve earlier events.\n\nIf no earlier events are available, this property may be omitted from\nthe response."
                          }
                        }
                      },
                      "room_id": {
                        "type": "string",
                        "description": "The ID of this room."
                      },
                      "state": {
                        "type": "array",
                        "description": "If the user is a member of the room this will be the\ncurrent state of the room as a list of events. If the\nuser has left the room this will be the state of the\nroom when they left it.",
                        "items": {
                          "title": "ClientEvent",
                          "type": "object",
                          "description": "The format used for events when they are returned from a homeserver to a client\nvia the Client-Server API, or sent to an Application Service via the Application Services API.",
                          "allOf": [
                            {
                              "title": "ClientEventWithoutRoomID",
                              "type": "object",
                              "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                              "required": [
                                "event_id",
                                "type",
                                "sender",
                                "origin_server_ts",
                                "content"
                              ],
                              "properties": {
                                "content": {
                                  "type": "object",
                                  "description": "The body of this event, as created by the client which sent it.",
                                  "example": {
                                    "membership": "join"
                                  }
                                },
                                "event_id": {
                                  "type": "string",
                                  "description": "The globally unique identifier for this event.",
                                  "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                                },
                                "origin_server_ts": {
                                  "type": "integer",
                                  "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                                  "format": "int64",
                                  "example": 1632489532305
                                },
                                "sender": {
                                  "type": "string",
                                  "description": "Contains the fully-qualified ID of the user who sent this event.",
                                  "example": "@example:example.org"
                                },
                                "state_key": {
                                  "type": "string",
                                  "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                                  "example": "@user:example.org"
                                },
                                "type": {
                                  "type": "string",
                                  "description": "The type of the event.",
                                  "example": "m.room.member"
                                },
                                "unsigned": {
                                  "title": "UnsignedData",
                                  "type": "object",
                                  "description": "Contains optional extra information about the event.",
                                  "properties": {
                                    "age": {
                                      "type": "integer",
                                      "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                      "format": "int64",
                                      "example": 1567437
                                    },
                                    "prev_content": {
                                      "title": "EventContent",
                                      "type": "object",
                                      "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                      "x-changedInMatrixVersion": {
                                        "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                      }
                                    },
                                    "redacted_because": {
                                      "title": "ClientEventWithoutRoomID",
                                      "type": "object",
                                      "description": "The event that redacted this event, if any.",
                                      "example": {
                                        "content": {
                                          "reason": "spam"
                                        },
                                        "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                        "origin_server_ts": 1632491098485,
                                        "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                        "sender": "@moderator:example.org",
                                        "type": "m.room.redaction",
                                        "unsigned": {
                                          "age": 1257
                                        }
                                      }
                                    },
                                    "transaction_id": {
                                      "type": "string",
                                      "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "required": [
                                "room_id"
                              ],
                              "properties": {
                                "room_id": {
                                  "type": "string",
                                  "description": "The ID of the room associated with this event.",
                                  "example": "!jEsUZKDJdhlrceRyVU:example.org"
                                },
                                "unsigned": {
                                  "properties": {
                                    "redacted_because": {
                                      "title": "ClientEvent",
                                      "example": {
                                        "content": {
                                          "reason": "spam"
                                        },
                                        "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                        "origin_server_ts": 1632491098485,
                                        "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                        "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                                        "sender": "@moderator:example.org",
                                        "type": "m.room.redaction",
                                        "unsigned": {
                                          "age": 1257
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "visibility": {
                        "type": "string",
                        "description": "Whether this room is visible to the `/publicRooms` API\nor not.\"",
                        "enum": [
                          "private",
                          "public"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "account_data": [
                  {
                    "content": {
                      "custom_config_key": "custom_config_value"
                    },
                    "type": "org.example.custom.config"
                  }
                ],
                "end": "s3456_9_0",
                "presence": [
                  {
                    "content": {
                      "avatar_url": "mxc://localhost/wefuiwegh8742w",
                      "currently_active": false,
                      "last_active_ago": 2478593,
                      "presence": "online",
                      "status_msg": "Making cupcakes"
                    },
                    "sender": "@example:localhost",
                    "type": "m.presence"
                  }
                ],
                "rooms": [
                  {
                    "account_data": [
                      {
                        "content": {
                          "tags": {
                            "work": {
                              "order": 1
                            }
                          }
                        },
                        "type": "m.tag"
                      },
                      {
                        "content": {
                          "custom_config_key": "custom_config_value"
                        },
                        "type": "org.example.custom.room.config"
                      }
                    ],
                    "membership": "join",
                    "messages": {
                      "chunk": [
                        {
                          "content": {
                            "body": "This is an example text message",
                            "format": "org.matrix.custom.html",
                            "formatted_body": "<b>This is an example text message</b>",
                            "msgtype": "m.text"
                          },
                          "event_id": "$143273582443PhrSn:example.org",
                          "origin_server_ts": 1432735824653,
                          "room_id": "!TmaZBKYIFrIPVGoUYp:localhost",
                          "sender": "@example:example.org",
                          "type": "m.room.message",
                          "unsigned": {
                            "age": 1234
                          }
                        },
                        {
                          "content": {
                            "body": "Gangnam Style",
                            "info": {
                              "duration": 2140786,
                              "h": 320,
                              "mimetype": "video/mp4",
                              "size": 1563685,
                              "thumbnail_info": {
                                "h": 300,
                                "mimetype": "image/jpeg",
                                "size": 46144,
                                "w": 300
                              },
                              "thumbnail_url": "mxc://example.org/FHyPlCeYUSFFxlgbQYZmoEoe",
                              "w": 480
                            },
                            "msgtype": "m.video",
                            "url": "mxc://example.org/a526eYUSFFxlgbQYZmo442"
                          },
                          "event_id": "$143273582443PhrSn:example.org",
                          "origin_server_ts": 1432735824653,
                          "room_id": "!TmaZBKYIFrIPVGoUYp:localhost",
                          "sender": "@example:example.org",
                          "type": "m.room.message",
                          "unsigned": {
                            "age": 1234
                          }
                        }
                      ],
                      "end": "s3456_9_0",
                      "start": "t44-3453_9_0"
                    },
                    "room_id": "!TmaZBKYIFrIPVGoUYp:localhost",
                    "state": [
                      {
                        "content": {
                          "join_rule": "public"
                        },
                        "event_id": "$143273582443PhrSn:example.org",
                        "origin_server_ts": 1432735824653,
                        "room_id": "!TmaZBKYIFrIPVGoUYp:localhost",
                        "sender": "@example:example.org",
                        "state_key": "",
                        "type": "m.room.join_rules",
                        "unsigned": {
                          "age": 1234
                        }
                      },
                      {
                        "content": {
                          "avatar_url": "mxc://example.org/SEsfnsuifSDFSSEF",
                          "displayname": "Alice Margatroid",
                          "membership": "join",
                          "reason": "Looking for support"
                        },
                        "event_id": "$143273582443PhrSn:example.org",
                        "origin_server_ts": 1432735824653,
                        "room_id": "!TmaZBKYIFrIPVGoUYp:localhost",
                        "sender": "@example:example.org",
                        "state_key": "@alice:example.org",
                        "type": "m.room.member",
                        "unsigned": {
                          "age": 1234
                        }
                      },
                      {
                        "content": {
                          "creator": "@example:example.org",
                          "m.federate": true,
                          "predecessor": {
                            "event_id": "$something:example.org",
                            "room_id": "!oldroom:example.org"
                          },
                          "room_version": "1"
                        },
                        "event_id": "$143273582443PhrSn:example.org",
                        "origin_server_ts": 1432735824653,
                        "room_id": "!TmaZBKYIFrIPVGoUYp:localhost",
                        "sender": "@example:example.org",
                        "state_key": "",
                        "type": "m.room.create",
                        "unsigned": {
                          "age": 1234
                        }
                      },
                      {
                        "content": {
                          "ban": 50,
                          "events": {
                            "m.room.name": 100,
                            "m.room.power_levels": 100
                          },
                          "events_default": 0,
                          "invite": 50,
                          "kick": 50,
                          "notifications": {
                            "room": 20
                          },
                          "redact": 50,
                          "state_default": 50,
                          "users": {
                            "@example:localhost": 100
                          },
                          "users_default": 0
                        },
                        "event_id": "$143273582443PhrSn:example.org",
                        "origin_server_ts": 1432735824653,
                        "room_id": "!TmaZBKYIFrIPVGoUYp:localhost",
                        "sender": "@example:example.org",
                        "state_key": "",
                        "type": "m.room.power_levels",
                        "unsigned": {
                          "age": 1234
                        }
                      }
                    ],
                    "visibility": "private"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "There is no avatar URL for this user or this user does not exist."
          }
        },
        "deprecated": true,
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/join/{roomIdOrAlias}": {
      "post": {
        "tags": [
          "Room membership"
        ],
        "summary": "Start the requesting user participating in a particular room.",
        "description": "*Note that this API takes either a room ID or alias, unlike* `/rooms/{roomId}/join`.\n\nThis API starts a user participating in a particular room, if that user\nis allowed to participate in that room. After this call, the client is\nallowed to see all current state events in the room, and all subsequent\nevents associated with the room until the user leaves the room.\n\nAfter a user has joined a room, the room will appear as an entry in the\nresponse of the [`/initialSync`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3initialsync)\nand [`/sync`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3sync) APIs.",
        "operationId": "joinRoom",
        "parameters": [
          {
            "type": "string",
            "name": "roomIdOrAlias",
            "in": "path",
            "required": true,
            "description": "The room identifier or alias to join.",
            "x-example": "#monkeys:matrix.org"
          },
          {
            "type": "array",
            "name": "server_name",
            "in": "query",
            "description": "The servers to attempt to join the room through. One of the servers\nmust be participating in the room.",
            "items": {
              "type": "string"
            },
            "x-example": [
              "matrix.org",
              "elsewhere.ca"
            ]
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "reason": {
                  "type": "string",
                  "description": "Optional reason to be included as the `reason` on the subsequent\nmembership event.",
                  "example": "Looking for support",
                  "x-addedInMatrixVersion": "1.1"
                },
                "third_party_signed": {
                  "description": "If a `third_party_signed` was supplied, the homeserver must verify\nthat it matches a pending `m.room.third_party_invite` event in the\nroom, and perform key validity checking if required by the event.",
                  "allOf": [
                    {
                      "title": "Third Party Signed",
                      "type": "object",
                      "description": "A signature of an `m.third_party_invite` token to prove that this user\nowns a third party identity which has been invited to the room.",
                      "required": [
                        "sender",
                        "mxid",
                        "token",
                        "signatures"
                      ],
                      "properties": {
                        "mxid": {
                          "type": "string",
                          "description": "The Matrix ID of the invitee.",
                          "example": "@bob:example.org"
                        },
                        "sender": {
                          "type": "string",
                          "description": "The Matrix ID of the user who issued the invite.",
                          "example": "@alice:example.org"
                        },
                        "signatures": {
                          "title": "Signatures",
                          "type": "object",
                          "description": "A signatures object containing a signature of the entire signed object.",
                          "example": {
                            "example.org": {
                              "ed25519:0": "some9signature"
                            }
                          },
                          "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        },
                        "token": {
                          "type": "string",
                          "description": "The state key of the m.third_party_invite event.",
                          "example": "random8nonce"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The room has been joined.\n\nThe joined room ID must be returned in the `room_id` field.",
            "schema": {
              "type": "object",
              "required": [
                "room_id"
              ],
              "properties": {
                "room_id": {
                  "type": "string",
                  "description": "The joined room ID."
                }
              }
            },
            "examples": {
              "application/json": {
                "room_id": "!d41d8cd:matrix.org"
              }
            }
          },
          "403": {
            "description": "You do not have permission to join the room. A meaningful `errcode`\nand description error text will be returned. Example reasons for rejection are:\n\n- The room is invite-only and the user was not invited.\n- The user has been banned from the room.\n- The room is restricted and the user failed to satisfy any of the conditions.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_FORBIDDEN",
                "error": "You are not invited to this room."
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/joined_rooms": {
      "get": {
        "tags": [
          "Room membership"
        ],
        "summary": "Lists the user's current rooms.",
        "description": "This API returns a list of the user's current rooms.",
        "operationId": "getJoinedRooms",
        "responses": {
          "200": {
            "description": "A list of the rooms the user is in.",
            "schema": {
              "type": "object",
              "required": [
                "joined_rooms"
              ],
              "properties": {
                "joined_rooms": {
                  "type": "array",
                  "description": "The ID of each room in which the user has `joined` membership.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "joined_rooms": [
                  "!foo:example.com"
                ]
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/keys/changes": {
      "get": {
        "tags": [
          "End-to-end encryption"
        ],
        "summary": "Query users with recent device key updates.",
        "description": "Gets a list of users who have updated their device identity keys since a\nprevious sync token.\n\nThe server should include in the results any users who:\n\n* currently share a room with the calling user (ie, both users have\n  membership state `join`); *and*\n* added new device identity keys or removed an existing device with\n  identity keys, between `from` and `to`.",
        "operationId": "getKeysChanges",
        "parameters": [
          {
            "type": "string",
            "name": "from",
            "in": "query",
            "required": true,
            "description": "The desired start point of the list. Should be the `next_batch` field\nfrom a response to an earlier call to [`/sync`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3sync). Users who have not\nuploaded new device identity keys since this point, nor deleted\nexisting devices with identity keys since then, will be excluded\nfrom the results.",
            "x-example": "s72594_4483_1934"
          },
          {
            "type": "string",
            "name": "to",
            "in": "query",
            "required": true,
            "description": "The desired end point of the list. Should be the `next_batch`\nfield from a recent call to [`/sync`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3sync) - typically the most recent\nsuch call. This may be used by the server as a hint to check its\ncaches are up to date.",
            "x-example": "s75689_5632_2435"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of users who updated their devices.",
            "schema": {
              "type": "object",
              "properties": {
                "changed": {
                  "type": "array",
                  "description": "The Matrix User IDs of all users who updated their device\nidentity keys.",
                  "example": [
                    "@alice:example.com",
                    "@bob:example.org"
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "left": {
                  "type": "array",
                  "description": "The Matrix User IDs of all users who may have left all\nthe end-to-end encrypted rooms they previously shared\nwith the user.",
                  "example": [
                    "@clara:example.com",
                    "@doug:example.org"
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/keys/claim": {
      "post": {
        "tags": [
          "End-to-end encryption"
        ],
        "summary": "Claim one-time encryption keys.",
        "description": "Claims one-time keys for use in pre-key messages.",
        "operationId": "claimKeys",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "Query defining the keys to be claimed",
            "schema": {
              "type": "object",
              "required": [
                "one_time_keys"
              ],
              "properties": {
                "one_time_keys": {
                  "type": "object",
                  "description": "The keys to be claimed. A map from user ID, to a map from\ndevice ID to algorithm name.",
                  "example": {
                    "@alice:example.com": {
                      "JLAFKJWSCS": "signed_curve25519"
                    }
                  },
                  "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string",
                      "description": "algorithm",
                      "example": "signed_curve25519"
                    }
                  }
                },
                "timeout": {
                  "type": "integer",
                  "description": "The time (in milliseconds) to wait when downloading keys from\nremote servers. 10 seconds is the recommended default.",
                  "example": 10000
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The claimed keys.",
            "schema": {
              "type": "object",
              "required": [
                "one_time_keys"
              ],
              "properties": {
                "failures": {
                  "type": "object",
                  "description": "If any remote homeservers could not be reached, they are\nrecorded here. The names of the properties are the names of\nthe unreachable servers.\n\nIf the homeserver could be reached, but the user or device\nwas unknown, no failure is recorded. Instead, the corresponding\nuser or device is missing from the `one_time_keys` result.",
                  "example": {},
                  "additionalProperties": {
                    "type": "object"
                  }
                },
                "one_time_keys": {
                  "type": "object",
                  "description": "One-time keys for the queried devices. A map from user ID, to a\nmap from devices to a map from `<algorithm>:<key_id>` to the key object.\n\nSee the [key algorithms](https://spec.matrix.org/v1.5/client-server-api/#key-algorithms) section for information\non the Key Object format.\n\nIf necessary, the claimed key might be a fallback key. Fallback\nkeys are re-used by the server until replaced by the device.",
                  "example": {
                    "@alice:example.com": {
                      "JLAFKJWSCS": {
                        "signed_curve25519:AAAAHg": {
                          "key": "zKbLg+NrIjpnagy+pIY6uPL4ZwEG2v+8F9lmgsnlZzs",
                          "signatures": {
                            "@alice:example.com": {
                              "ed25519:JLAFKJWSCS": "FLWxXqGbwrb8SM3Y795eB6OA8bwBcoMZFXBqnTn58AYWZSqiD45tlBVcDa2L7RwdKXebW/VzDlnfVJ+9jok1Bw"
                            }
                          }
                        }
                      }
                    }
                  },
                  "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                      "title": "OneTimeKeys",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/keys/device_signing/upload": {
      "post": {
        "tags": [
          "End-to-end encryption"
        ],
        "summary": "Upload cross-signing keys.",
        "description": "Publishes cross-signing keys for the user.\n\nThis API endpoint uses the [User-Interactive Authentication API](https://spec.matrix.org/v1.5/client-server-api/#user-interactive-authentication-api).",
        "operationId": "uploadCrossSigningKeys",
        "parameters": [
          {
            "name": "keys",
            "in": "body",
            "required": true,
            "description": "The keys to be published.",
            "schema": {
              "type": "object",
              "example": {
                "master_key": {
                  "keys": {
                    "ed25519:base64+master+public+key": "base64+master+public+key"
                  },
                  "usage": [
                    "master"
                  ],
                  "user_id": "@alice:example.com"
                },
                "self_signing_key": {
                  "keys": {
                    "ed25519:base64+self+signing+public+key": "base64+self+signing+master+public+key"
                  },
                  "signatures": {
                    "@alice:example.com": {
                      "ed25519:base64+master+public+key": "signature+of+self+signing+key"
                    }
                  },
                  "usage": [
                    "self_signing"
                  ],
                  "user_id": "@alice:example.com"
                },
                "user_signing_key": {
                  "keys": {
                    "ed25519:base64+user+signing+public+key": "base64+user+signing+master+public+key"
                  },
                  "signatures": {
                    "@alice:example.com": {
                      "ed25519:base64+master+public+key": "signature+of+user+signing+key"
                    }
                  },
                  "usage": [
                    "user_signing"
                  ],
                  "user_id": "@alice:example.com"
                }
              },
              "properties": {
                "auth": {
                  "description": "Additional authentication information for the\nuser-interactive authentication API.",
                  "allOf": [
                    {
                      "title": "Authentication Data",
                      "type": "object",
                      "description": "Used by clients to submit authentication information to the interactive-authentication API",
                      "example": {
                        "example_credential": "verypoorsharedsecret",
                        "session": "xxxxx",
                        "type": "example.type.foo"
                      },
                      "additionalProperties": {
                        "description": "Keys dependent on the login type"
                      },
                      "properties": {
                        "session": {
                          "type": "string",
                          "description": "The value of the session key given by the homeserver."
                        },
                        "type": {
                          "type": "string",
                          "description": "The authentication type that the client is attempting to complete.\nMay be omitted if `session` is given, and the client is reissuing a\nrequest which it believes has been completed out-of-band (for example,\nvia the [fallback mechanism](#fallback))."
                        }
                      }
                    }
                  ]
                },
                "master_key": {
                  "description": "Optional. The user\\'s master key.",
                  "allOf": [
                    {
                      "title": "CrossSigningKey",
                      "type": "object",
                      "description": "Cross signing key",
                      "required": [
                        "user_id",
                        "usage",
                        "keys"
                      ],
                      "properties": {
                        "keys": {
                          "type": "object",
                          "description": "The public key.  The object must have exactly one property, whose name is\nin the form `<algorithm>:<unpadded_base64_public_key>`, and whose value\nis the unpadded base64 public key.",
                          "example": {
                            "ed25519:alice+base64+public+key": "alice+base64+public+key"
                          },
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "signatures": {
                          "title": "Signatures",
                          "type": "object",
                          "description": "Signatures of the key, calculated using the process described at [Signing JSON](https://spec.matrix.org/v1.5/appendices/#signing-json).\nOptional for the master key. Other keys must be signed by the\nuser\\'s master key.",
                          "example": {
                            "@alice:example.com": {
                              "ed25519:alice+base64+master+key": "signature+of+key"
                            }
                          }
                        },
                        "usage": {
                          "type": "array",
                          "description": "What the key is used for.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "master",
                              "self_signing",
                              "user_signing"
                            ]
                          }
                        },
                        "user_id": {
                          "type": "string",
                          "description": "The ID of the user the key belongs to.",
                          "example": "@alice:example.com"
                        }
                      }
                    }
                  ]
                },
                "self_signing_key": {
                  "description": "Optional. The user\\'s self-signing key. Must be signed by\nthe accompanying master key, or by the user\\'s most recently\nuploaded master key if no master key is included in the\nrequest.",
                  "allOf": [
                    {
                      "title": "CrossSigningKey",
                      "type": "object",
                      "description": "Cross signing key",
                      "required": [
                        "user_id",
                        "usage",
                        "keys"
                      ],
                      "properties": {
                        "keys": {
                          "type": "object",
                          "description": "The public key.  The object must have exactly one property, whose name is\nin the form `<algorithm>:<unpadded_base64_public_key>`, and whose value\nis the unpadded base64 public key.",
                          "example": {
                            "ed25519:alice+base64+public+key": "alice+base64+public+key"
                          },
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "signatures": {
                          "title": "Signatures",
                          "type": "object",
                          "description": "Signatures of the key, calculated using the process described at [Signing JSON](https://spec.matrix.org/v1.5/appendices/#signing-json).\nOptional for the master key. Other keys must be signed by the\nuser\\'s master key.",
                          "example": {
                            "@alice:example.com": {
                              "ed25519:alice+base64+master+key": "signature+of+key"
                            }
                          }
                        },
                        "usage": {
                          "type": "array",
                          "description": "What the key is used for.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "master",
                              "self_signing",
                              "user_signing"
                            ]
                          }
                        },
                        "user_id": {
                          "type": "string",
                          "description": "The ID of the user the key belongs to.",
                          "example": "@alice:example.com"
                        }
                      }
                    }
                  ]
                },
                "user_signing_key": {
                  "description": "Optional. The user\\'s user-signing key. Must be signed by\nthe accompanying master key, or by the user\\'s most recently\nuploaded master key if no master key is included in the\nrequest.",
                  "allOf": [
                    {
                      "title": "CrossSigningKey",
                      "type": "object",
                      "description": "Cross signing key",
                      "required": [
                        "user_id",
                        "usage",
                        "keys"
                      ],
                      "properties": {
                        "keys": {
                          "type": "object",
                          "description": "The public key.  The object must have exactly one property, whose name is\nin the form `<algorithm>:<unpadded_base64_public_key>`, and whose value\nis the unpadded base64 public key.",
                          "example": {
                            "ed25519:alice+base64+public+key": "alice+base64+public+key"
                          },
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "signatures": {
                          "title": "Signatures",
                          "type": "object",
                          "description": "Signatures of the key, calculated using the process described at [Signing JSON](https://spec.matrix.org/v1.5/appendices/#signing-json).\nOptional for the master key. Other keys must be signed by the\nuser\\'s master key.",
                          "example": {
                            "@alice:example.com": {
                              "ed25519:alice+base64+master+key": "signature+of+key"
                            }
                          }
                        },
                        "usage": {
                          "type": "array",
                          "description": "What the key is used for.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "master",
                              "self_signing",
                              "user_signing"
                            ]
                          }
                        },
                        "user_id": {
                          "type": "string",
                          "description": "The ID of the user the key belongs to.",
                          "example": "@alice:example.com"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The provided keys were successfully uploaded.",
            "schema": {
              "type": "object",
              "example": {}
            }
          },
          "400": {
            "description": "The input was invalid in some way. This can include one of the\nfollowing error codes:\n\n* `M_INVALID_SIGNATURE`: For example, the self-signing or\n  user-signing key had an incorrect signature.\n* `M_MISSING_PARAM`: No master key is available.",
            "schema": {
              "type": "object",
              "example": {
                "errcode": "M_INVALID_SIGNATURE",
                "error": "Invalid signature"
              }
            }
          },
          "403": {
            "description": "The public key of one of the keys is the same as one of the user\\'s\ndevice IDs, or the request is not authorized for any other reason.",
            "schema": {
              "type": "object",
              "example": {
                "errcode": "M_FORBIDDEN",
                "error": "Key ID in use"
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ],
        "x-addedInMatrixVersion": "1.1"
      }
    },
    "/_matrix/client/v3/keys/query": {
      "post": {
        "tags": [
          "End-to-end encryption"
        ],
        "summary": "Download device identity keys.",
        "description": "Returns the current devices and identity keys for the given users.",
        "operationId": "queryKeys",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "Query defining the keys to be downloaded",
            "schema": {
              "type": "object",
              "required": [
                "device_keys"
              ],
              "properties": {
                "device_keys": {
                  "type": "object",
                  "description": "The keys to be downloaded. A map from user ID, to a list of\ndevice IDs, or to an empty list to indicate all devices for the\ncorresponding user.",
                  "example": {
                    "@alice:example.com": []
                  },
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "device ID"
                    }
                  }
                },
                "timeout": {
                  "type": "integer",
                  "description": "The time (in milliseconds) to wait when downloading keys from\nremote servers. 10 seconds is the recommended default.",
                  "example": 10000
                },
                "token": {
                  "type": "string",
                  "description": "If the client is fetching keys as a result of a device update received\nin a sync request, this should be the 'since' token of that sync request,\nor any later sync token. This allows the server to ensure its response\ncontains the keys advertised by the notification in that sync."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The device information",
            "schema": {
              "type": "object",
              "properties": {
                "device_keys": {
                  "type": "object",
                  "description": "Information on the queried devices. A map from user ID, to a\nmap from device ID to device information.  For each device,\nthe information returned will be the same as uploaded via\n`/keys/upload`, with the addition of an `unsigned`\nproperty.",
                  "example": {
                    "@alice:example.com": {
                      "JLAFKJWSCS": {
                        "algorithms": [
                          "m.olm.v1.curve25519-aes-sha2",
                          "m.megolm.v1.aes-sha2"
                        ],
                        "device_id": "JLAFKJWSCS",
                        "keys": {
                          "curve25519:JLAFKJWSCS": "3C5BFWi2Y8MaVvjM8M22DBmh24PmgR0nPvJOIArzgyI",
                          "ed25519:JLAFKJWSCS": "lEuiRJBit0IG6nUf5pUzWTUEsRVVe/HJkoKuEww9ULI"
                        },
                        "signatures": {
                          "@alice:example.com": {
                            "ed25519:JLAFKJWSCS": "dSO80A01XiigH3uBiDVx/EjzaoycHcjq9lfQX0uWsqxl2giMIiSPR8a4d291W1ihKJL/a+myXS367WT6NAIcBA"
                          }
                        },
                        "unsigned": {
                          "device_display_name": "Alice's mobile phone"
                        },
                        "user_id": "@alice:example.com"
                      }
                    }
                  },
                  "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                      "title": "DeviceInformation",
                      "properties": {
                        "unsigned": {
                          "title": "UnsignedDeviceInfo",
                          "type": "object",
                          "description": "Additional data added to the device key information\nby intermediate servers, and not covered by the\nsignatures.",
                          "properties": {
                            "device_display_name": {
                              "type": "string",
                              "description": "The display name which the user set on the device."
                            }
                          }
                        }
                      },
                      "allOf": [
                        {
                          "title": "DeviceKeys",
                          "type": "object",
                          "description": "Device identity keys",
                          "required": [
                            "user_id",
                            "device_id",
                            "algorithms",
                            "keys",
                            "signatures"
                          ],
                          "properties": {
                            "algorithms": {
                              "type": "array",
                              "description": "The encryption algorithms supported by this device.",
                              "example": [
                                "m.olm.v1.curve25519-aes-sha2",
                                "m.megolm.v1.aes-sha2"
                              ],
                              "items": {
                                "type": "string"
                              }
                            },
                            "device_id": {
                              "type": "string",
                              "description": "The ID of the device these keys belong to. Must match the device ID used\nwhen logging in.",
                              "example": "JLAFKJWSCS"
                            },
                            "keys": {
                              "type": "object",
                              "description": "Public identity keys. The names of the properties should be in the\nformat `<algorithm>:<device_id>`. The keys themselves should be\nencoded as specified by the key algorithm.",
                              "example": {
                                "curve25519:JLAFKJWSCS": "3C5BFWi2Y8MaVvjM8M22DBmh24PmgR0nPvJOIArzgyI",
                                "ed25519:JLAFKJWSCS": "lEuiRJBit0IG6nUf5pUzWTUEsRVVe/HJkoKuEww9ULI"
                              },
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "signatures": {
                              "title": "Signatures",
                              "type": "object",
                              "description": "Signatures for the device key object. A map from user ID, to a map from\n`<algorithm>:<device_id>` to the signature.\n\nThe signature is calculated using the process described at [Signing JSON](https://spec.matrix.org/v1.5/appendices/#signing-json).",
                              "example": {
                                "@alice:example.com": {
                                  "ed25519:JLAFKJWSCS": "dSO80A01XiigH3uBiDVx/EjzaoycHcjq9lfQX0uWsqxl2giMIiSPR8a4d291W1ihKJL/a+myXS367WT6NAIcBA"
                                }
                              },
                              "additionalProperties": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            },
                            "user_id": {
                              "type": "string",
                              "description": "The ID of the user the device belongs to. Must match the user ID used\nwhen logging in.",
                              "example": "@alice:example.com"
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                "failures": {
                  "type": "object",
                  "description": "If any remote homeservers could not be reached, they are\nrecorded here. The names of the properties are the names of\nthe unreachable servers.\n\nIf the homeserver could be reached, but the user or device\nwas unknown, no failure is recorded. Instead, the corresponding\nuser or device is missing from the `device_keys` result.",
                  "example": {},
                  "additionalProperties": {
                    "type": "object"
                  }
                },
                "master_keys": {
                  "type": "object",
                  "description": "Information on the master cross-signing keys of the queried users.\nA map from user ID, to master key information.  For each key, the\ninformation returned will be the same as uploaded via\n`/keys/device_signing/upload`, along with the signatures\nuploaded via `/keys/signatures/upload` that the requesting user\nis allowed to see.",
                  "example": {
                    "@alice:example.com": {
                      "keys": {
                        "ed25519:base64+master+public+key": "base64+master+public+key"
                      },
                      "usage": [
                        "master"
                      ],
                      "user_id": "@alice:example.com"
                    }
                  },
                  "additionalProperties": {
                    "allOf": [
                      {
                        "title": "CrossSigningKey",
                        "type": "object",
                        "description": "Cross signing key",
                        "required": [
                          "user_id",
                          "usage",
                          "keys"
                        ],
                        "properties": {
                          "keys": {
                            "type": "object",
                            "description": "The public key.  The object must have exactly one property, whose name is\nin the form `<algorithm>:<unpadded_base64_public_key>`, and whose value\nis the unpadded base64 public key.",
                            "example": {
                              "ed25519:alice+base64+public+key": "alice+base64+public+key"
                            },
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "signatures": {
                            "title": "Signatures",
                            "type": "object",
                            "description": "Signatures of the key, calculated using the process described at [Signing JSON](https://spec.matrix.org/v1.5/appendices/#signing-json).\nOptional for the master key. Other keys must be signed by the\nuser\\'s master key.",
                            "example": {
                              "@alice:example.com": {
                                "ed25519:alice+base64+master+key": "signature+of+key"
                              }
                            }
                          },
                          "usage": {
                            "type": "array",
                            "description": "What the key is used for.",
                            "items": {
                              "type": "string",
                              "enum": [
                                "master",
                                "self_signing",
                                "user_signing"
                              ]
                            }
                          },
                          "user_id": {
                            "type": "string",
                            "description": "The ID of the user the key belongs to.",
                            "example": "@alice:example.com"
                          }
                        }
                      }
                    ]
                  },
                  "x-addedInMatrixVersion": "1.1"
                },
                "self_signing_keys": {
                  "type": "object",
                  "description": "Information on the self-signing keys of the queried users. A map\nfrom user ID, to self-signing key information.  For each key, the\ninformation returned will be the same as uploaded via\n`/keys/device_signing/upload`.",
                  "example": {
                    "@alice:example.com": {
                      "keys": {
                        "ed25519:base64+self+signing+public+key": "base64+self+signing+master+public+key"
                      },
                      "signatures": {
                        "@alice:example.com": {
                          "ed25519:base64+master+public+key": "signature+of+self+signing+key"
                        }
                      },
                      "usage": [
                        "self_signing"
                      ],
                      "user_id": "@alice:example.com"
                    }
                  },
                  "additionalProperties": {
                    "allOf": [
                      {
                        "title": "CrossSigningKey",
                        "type": "object",
                        "description": "Cross signing key",
                        "required": [
                          "user_id",
                          "usage",
                          "keys"
                        ],
                        "properties": {
                          "keys": {
                            "type": "object",
                            "description": "The public key.  The object must have exactly one property, whose name is\nin the form `<algorithm>:<unpadded_base64_public_key>`, and whose value\nis the unpadded base64 public key.",
                            "example": {
                              "ed25519:alice+base64+public+key": "alice+base64+public+key"
                            },
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "signatures": {
                            "title": "Signatures",
                            "type": "object",
                            "description": "Signatures of the key, calculated using the process described at [Signing JSON](https://spec.matrix.org/v1.5/appendices/#signing-json).\nOptional for the master key. Other keys must be signed by the\nuser\\'s master key.",
                            "example": {
                              "@alice:example.com": {
                                "ed25519:alice+base64+master+key": "signature+of+key"
                              }
                            }
                          },
                          "usage": {
                            "type": "array",
                            "description": "What the key is used for.",
                            "items": {
                              "type": "string",
                              "enum": [
                                "master",
                                "self_signing",
                                "user_signing"
                              ]
                            }
                          },
                          "user_id": {
                            "type": "string",
                            "description": "The ID of the user the key belongs to.",
                            "example": "@alice:example.com"
                          }
                        }
                      }
                    ]
                  },
                  "x-addedInMatrixVersion": "1.1"
                },
                "user_signing_keys": {
                  "type": "object",
                  "description": "Information on the user-signing key of the user making the\nrequest, if they queried their own device information. A map\nfrom user ID, to user-signing key information.  The\ninformation returned will be the same as uploaded via\n`/keys/device_signing/upload`.",
                  "example": {
                    "@alice:example.com": {
                      "keys": {
                        "ed25519:base64+user+signing+public+key": "base64+user+signing+master+public+key"
                      },
                      "signatures": {
                        "@alice:example.com": {
                          "ed25519:base64+master+public+key": "signature+of+user+signing+key"
                        }
                      },
                      "usage": [
                        "user_signing"
                      ],
                      "user_id": "@alice:example.com"
                    }
                  },
                  "additionalProperties": {
                    "allOf": [
                      {
                        "title": "CrossSigningKey",
                        "type": "object",
                        "description": "Cross signing key",
                        "required": [
                          "user_id",
                          "usage",
                          "keys"
                        ],
                        "properties": {
                          "keys": {
                            "type": "object",
                            "description": "The public key.  The object must have exactly one property, whose name is\nin the form `<algorithm>:<unpadded_base64_public_key>`, and whose value\nis the unpadded base64 public key.",
                            "example": {
                              "ed25519:alice+base64+public+key": "alice+base64+public+key"
                            },
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "signatures": {
                            "title": "Signatures",
                            "type": "object",
                            "description": "Signatures of the key, calculated using the process described at [Signing JSON](https://spec.matrix.org/v1.5/appendices/#signing-json).\nOptional for the master key. Other keys must be signed by the\nuser\\'s master key.",
                            "example": {
                              "@alice:example.com": {
                                "ed25519:alice+base64+master+key": "signature+of+key"
                              }
                            }
                          },
                          "usage": {
                            "type": "array",
                            "description": "What the key is used for.",
                            "items": {
                              "type": "string",
                              "enum": [
                                "master",
                                "self_signing",
                                "user_signing"
                              ]
                            }
                          },
                          "user_id": {
                            "type": "string",
                            "description": "The ID of the user the key belongs to.",
                            "example": "@alice:example.com"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/keys/signatures/upload": {
      "post": {
        "tags": [
          "End-to-end encryption"
        ],
        "summary": "Upload cross-signing signatures.",
        "description": "Publishes cross-signing signatures for the user.  The request body is a\nmap from user ID to key ID to signed JSON object.",
        "operationId": "uploadCrossSigningSignatures",
        "parameters": [
          {
            "name": "signatures",
            "in": "body",
            "required": true,
            "description": "The signatures to be published.",
            "schema": {
              "title": "Signatures",
              "type": "object",
              "example": {
                "@alice:example.com": {
                  "HIJKLMN": {
                    "algorithms": [
                      "m.olm.v1.curve25519-aes-sha256",
                      "m.megolm.v1.aes-sha"
                    ],
                    "device_id": "HIJKLMN",
                    "keys": {
                      "curve25519:HIJKLMN": "base64+curve25519+key",
                      "ed25519:HIJKLMN": "base64+ed25519+key"
                    },
                    "signatures": {
                      "@alice:example.com": {
                        "ed25519:base64+self+signing+public+key": "base64+signature+of+HIJKLMN"
                      }
                    },
                    "user_id": "@alice:example.com"
                  },
                  "base64+master+public+key": {
                    "keys": {
                      "ed25519:base64+master+public+key": "base64+master+public+key"
                    },
                    "signatures": {
                      "@alice:example.com": {
                        "ed25519:HIJKLMN": "base64+signature+of+master+key"
                      }
                    },
                    "usage": [
                      "master"
                    ],
                    "user_id": "@alice:example.com"
                  }
                },
                "@bob:example.com": {
                  "bobs+base64+master+public+key": {
                    "keys": {
                      "ed25519:bobs+base64+master+public+key": "bobs+base64+master+public+key"
                    },
                    "signatures": {
                      "@alice:example.com": {
                        "ed25519:base64+user+signing+public+key": "base64+signature+of+bobs+master+key"
                      }
                    },
                    "usage": [
                      "master"
                    ],
                    "user_id": "@bob:example.com"
                  }
                }
              },
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The provided signatures were processed.",
            "schema": {
              "type": "object",
              "properties": {
                "failures": {
                  "type": "object",
                  "description": "A map from user ID to key ID to an error for any signatures\nthat failed.  If a signature was invalid, the `errcode` will\nbe set to `M_INVALID_SIGNATURE`.",
                  "example": {
                    "@alice:example.com": {
                      "HIJKLMN": {
                        "errcode": "M_INVALID_SIGNATURE",
                        "error": "Invalid signature"
                      }
                    }
                  },
                  "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                      "title": "Error",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ],
        "x-addedInMatrixVersion": "1.1"
      }
    },
    "/_matrix/client/v3/keys/upload": {
      "post": {
        "tags": [
          "End-to-end encryption"
        ],
        "summary": "Upload end-to-end encryption keys.",
        "description": "Publishes end-to-end encryption keys for the device.",
        "operationId": "uploadKeys",
        "parameters": [
          {
            "name": "keys",
            "in": "body",
            "required": true,
            "description": "The keys to be published",
            "schema": {
              "type": "object",
              "properties": {
                "device_keys": {
                  "description": "Identity keys for the device. May be absent if no new\nidentity keys are required.",
                  "allOf": [
                    {
                      "title": "DeviceKeys",
                      "type": "object",
                      "description": "Device identity keys",
                      "required": [
                        "user_id",
                        "device_id",
                        "algorithms",
                        "keys",
                        "signatures"
                      ],
                      "properties": {
                        "algorithms": {
                          "type": "array",
                          "description": "The encryption algorithms supported by this device.",
                          "example": [
                            "m.olm.v1.curve25519-aes-sha2",
                            "m.megolm.v1.aes-sha2"
                          ],
                          "items": {
                            "type": "string"
                          }
                        },
                        "device_id": {
                          "type": "string",
                          "description": "The ID of the device these keys belong to. Must match the device ID used\nwhen logging in.",
                          "example": "JLAFKJWSCS"
                        },
                        "keys": {
                          "type": "object",
                          "description": "Public identity keys. The names of the properties should be in the\nformat `<algorithm>:<device_id>`. The keys themselves should be\nencoded as specified by the key algorithm.",
                          "example": {
                            "curve25519:JLAFKJWSCS": "3C5BFWi2Y8MaVvjM8M22DBmh24PmgR0nPvJOIArzgyI",
                            "ed25519:JLAFKJWSCS": "lEuiRJBit0IG6nUf5pUzWTUEsRVVe/HJkoKuEww9ULI"
                          },
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "signatures": {
                          "title": "Signatures",
                          "type": "object",
                          "description": "Signatures for the device key object. A map from user ID, to a map from\n`<algorithm>:<device_id>` to the signature.\n\nThe signature is calculated using the process described at [Signing JSON](https://spec.matrix.org/v1.5/appendices/#signing-json).",
                          "example": {
                            "@alice:example.com": {
                              "ed25519:JLAFKJWSCS": "dSO80A01XiigH3uBiDVx/EjzaoycHcjq9lfQX0uWsqxl2giMIiSPR8a4d291W1ihKJL/a+myXS367WT6NAIcBA"
                            }
                          },
                          "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        },
                        "user_id": {
                          "type": "string",
                          "description": "The ID of the user the device belongs to. Must match the user ID used\nwhen logging in.",
                          "example": "@alice:example.com"
                        }
                      }
                    }
                  ]
                },
                "fallback_keys": {
                  "title": "OneTimeKeys",
                  "type": "object",
                  "description": "The public key which should be used if the device's one-time keys\nare exhausted. The fallback key is not deleted once used, but should\nbe replaced when additional one-time keys are being uploaded. The\nserver will notify the client of the fallback key being used through\n`/sync`.\n\nThere can only be at most one key per algorithm uploaded, and the server\nwill only persist one key per algorithm.\n\nWhen uploading a signed key, an additional `fallback: true` key should\nbe included to denote that the key is a fallback key.\n\nMay be absent if a new fallback key is not required.",
                  "example": {
                    "curve25519:AAAAAG": "/qyvZvwjiTxGdGU0RCguDCLeR+nmsb3FfNG3/Ve4vU8",
                    "signed_curve25519:AAAAGj": {
                      "fallback": true,
                      "key": "zKbLg+NrIjpnagy+pIY6uPL4ZwEG2v+8F9lmgsnlZzs",
                      "signatures": {
                        "@alice:example.com": {
                          "ed25519:JLAFKJWSCS": "FLWxXqGbwrb8SM3Y795eB6OA8bwBcoMZFXBqnTn58AYWZSqiD45tlBVcDa2L7RwdKXebW/VzDlnfVJ+9jok1Bw"
                        }
                      }
                    }
                  },
                  "x-addedInMatrixVersion": "1.2"
                },
                "one_time_keys": {
                  "title": "OneTimeKeys",
                  "type": "object",
                  "description": "One-time public keys for \"pre-key\" messages.  The names of\nthe properties should be in the format\n`<algorithm>:<key_id>`. The format of the key is determined\nby the [key algorithm](https://spec.matrix.org/v1.5/client-server-api/#key-algorithms).\n\nMay be absent if no new one-time keys are required.",
                  "example": {
                    "curve25519:AAAAAQ": "/qyvZvwjiTxGdGU0RCguDCLeR+nmsb3FfNG3/Ve4vU8",
                    "signed_curve25519:AAAAHQ": {
                      "key": "j3fR3HemM16M7CWhoI4Sk5ZsdmdfQHsKL1xuSft6MSw",
                      "signatures": {
                        "@alice:example.com": {
                          "ed25519:JLAFKJWSCS": "IQeCEPb9HFk217cU9kw9EOiusC6kMIkoIRnbnfOh5Oc63S1ghgyjShBGpu34blQomoalCyXWyhaaT3MrLZYQAA"
                        }
                      }
                    },
                    "signed_curve25519:AAAAHg": {
                      "key": "zKbLg+NrIjpnagy+pIY6uPL4ZwEG2v+8F9lmgsnlZzs",
                      "signatures": {
                        "@alice:example.com": {
                          "ed25519:JLAFKJWSCS": "FLWxXqGbwrb8SM3Y795eB6OA8bwBcoMZFXBqnTn58AYWZSqiD45tlBVcDa2L7RwdKXebW/VzDlnfVJ+9jok1Bw"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The provided keys were successfully uploaded.",
            "schema": {
              "type": "object",
              "required": [
                "one_time_key_counts"
              ],
              "properties": {
                "one_time_key_counts": {
                  "type": "object",
                  "description": "For each key algorithm, the number of unclaimed one-time keys\nof that type currently held on the server for this device.\nIf an algorithm is not listed, the count for that algorithm\nis to be assumed zero.",
                  "example": {
                    "curve25519": 10,
                    "signed_curve25519": 20
                  },
                  "additionalProperties": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/knock/{roomIdOrAlias}": {
      "post": {
        "tags": [
          "Room membership"
        ],
        "summary": "Knock on a room, requesting permission to join.",
        "description": "*Note that this API takes either a room ID or alias, unlike other membership APIs.*\n\nThis API \"knocks\" on the room to ask for permission to join, if the user\nis allowed to knock on the room. Acceptance of the knock happens out of\nband from this API, meaning that the client will have to watch for updates\nregarding the acceptance/rejection of the knock.\n\nIf the room history settings allow, the user will still be able to see\nhistory of the room while being in the \"knock\" state. The user will have\nto accept the invitation to join the room (acceptance of knock) to see\nmessages reliably. See the `/join` endpoints for more information about\nhistory visibility to the user.\n\nThe knock will appear as an entry in the response of the\n[`/sync`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3sync) API.",
        "operationId": "knockRoom",
        "parameters": [
          {
            "type": "string",
            "name": "roomIdOrAlias",
            "in": "path",
            "required": true,
            "description": "The room identifier or alias to knock upon.",
            "x-example": "#monkeys:matrix.org"
          },
          {
            "type": "array",
            "name": "server_name",
            "in": "query",
            "description": "The servers to attempt to knock on the room through. One of the servers\nmust be participating in the room.",
            "items": {
              "type": "string"
            },
            "x-example": [
              "matrix.org",
              "elsewhere.ca"
            ]
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "reason": {
                  "type": "string",
                  "description": "Optional reason to be included as the `reason` on the subsequent\nmembership event.",
                  "example": "Looking for support"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The room has been knocked upon.\n\nThe knocked room ID must be returned in the `room_id` field.",
            "schema": {
              "type": "object",
              "required": [
                "room_id"
              ],
              "properties": {
                "room_id": {
                  "type": "string",
                  "description": "The knocked room ID."
                }
              }
            },
            "examples": {
              "application/json": {
                "room_id": "!d41d8cd:matrix.org"
              }
            }
          },
          "403": {
            "description": "You do not have permission to knock on the room. A meaningful `errcode`\nand description error text will be returned. Example reasons for rejection are:\n\n- The room is not set up for knocking.\n- The user has been banned from the room.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_FORBIDDEN",
                "error": "You are not allowed to knock on this room."
              }
            }
          },
          "404": {
            "description": "The room could not be found or resolved to a room ID.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "That room does not appear to exist."
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ],
        "x-addedInMatrixVersion": "1.1"
      }
    },
    "/_matrix/client/v3/login": {
      "get": {
        "tags": [
          "Session management"
        ],
        "summary": "Get the supported login types to authenticate users",
        "description": "Gets the homeserver's supported login types to authenticate users. Clients\nshould pick one of these and supply it as the `type` when logging in.",
        "operationId": "getLoginFlows",
        "responses": {
          "200": {
            "description": "The login types the homeserver supports",
            "schema": {
              "type": "object",
              "properties": {
                "flows": {
                  "type": "array",
                  "description": "The homeserver's supported login types",
                  "items": {
                    "title": "LoginFlow",
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The login type. This is supplied as the `type` when\nlogging in."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "flows": [
                  {
                    "type": "m.login.password"
                  }
                ]
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Session management"
        ],
        "summary": "Authenticates the user.",
        "description": "Authenticates the user, and issues an access token they can\nuse to authorize themself in subsequent requests.\n\nIf the client does not supply a `device_id`, the server must\nauto-generate one.\n\nThe returned access token must be associated with the `device_id`\nsupplied by the client or generated by the server. The server may\ninvalidate any access token previously associated with that device. See\n[Relationship between access tokens and devices](https://spec.matrix.org/v1.5/client-server-api/#relationship-between-access-tokens-and-devices).",
        "operationId": "login",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "identifier": {
                  "type": "m.id.user",
                  "user": "cheeky_monkey"
                },
                "initial_device_display_name": "Jungle Phone",
                "password": "ilovebananas",
                "type": "m.login.password"
              },
              "required": [
                "type"
              ],
              "properties": {
                "address": {
                  "type": "string",
                  "description": "Third party identifier for the user.  Deprecated in favour of `identifier`."
                },
                "device_id": {
                  "type": "string",
                  "description": "ID of the client device. If this does not correspond to a\nknown client device, a new device will be created. The given\ndevice ID must not be the same as a\n[cross-signing](https://spec.matrix.org/v1.5/client-server-api/#cross-signing) key ID.\nThe server will auto-generate a device_id\nif this is not specified."
                },
                "identifier": {
                  "title": "User identifier",
                  "type": "object",
                  "description": "Identification information for a user",
                  "additionalProperties": {},
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of identification.  See [Identifier types](https://spec.matrix.org/v1.5/client-server-api/#identifier-types) for supported values and additional property descriptions."
                    }
                  }
                },
                "initial_device_display_name": {
                  "type": "string",
                  "description": "A display name to assign to the newly-created device. Ignored\nif `device_id` corresponds to a known device."
                },
                "medium": {
                  "type": "string",
                  "description": "When logging in using a third party identifier, the medium of the identifier. Must be 'email'.  Deprecated in favour of `identifier`."
                },
                "password": {
                  "type": "string",
                  "description": "Required when `type` is `m.login.password`. The user's\npassword."
                },
                "refresh_token": {
                  "type": "boolean",
                  "description": "If true, the client supports refresh tokens.",
                  "x-addedInMatrixVersion": "1.3"
                },
                "token": {
                  "type": "string",
                  "description": "Required when `type` is `m.login.token`. Part of Token-based login."
                },
                "type": {
                  "type": "string",
                  "description": "The login type being used.",
                  "enum": [
                    "m.login.password",
                    "m.login.token"
                  ]
                },
                "user": {
                  "type": "string",
                  "description": "The fully qualified user ID or just local part of the user ID, to log in.  Deprecated in favour of `identifier`."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user has been authenticated.",
            "schema": {
              "type": "object",
              "required": [
                "access_token",
                "device_id",
                "user_id"
              ],
              "properties": {
                "access_token": {
                  "type": "string",
                  "description": "An access token for the account.\nThis access token can then be used to authorize other requests."
                },
                "device_id": {
                  "type": "string",
                  "description": "ID of the logged-in device. Will be the same as the\ncorresponding parameter in the request, if one was specified."
                },
                "expires_in_ms": {
                  "type": "integer",
                  "description": "The lifetime of the access token, in milliseconds. Once\nthe access token has expired a new access token can be\nobtained by using the provided refresh token. If no\nrefresh token is provided, the client will need to re-log in\nto obtain a new access token. If not given, the client can\nassume that the access token will not expire.",
                  "x-addedInMatrixVersion": "1.3"
                },
                "home_server": {
                  "type": "string",
                  "description": "The server_name of the homeserver on which the account has\nbeen registered.\n\n**Deprecated**. Clients should extract the server_name from\n`user_id` (by splitting at the first colon) if they require\nit. Note also that `homeserver` is not spelt this way."
                },
                "refresh_token": {
                  "type": "string",
                  "description": "A refresh token for the account. This token can be used to\nobtain a new access token when it expires by calling the\n`/refresh` endpoint.",
                  "x-addedInMatrixVersion": "1.3"
                },
                "user_id": {
                  "type": "string",
                  "description": "The fully-qualified Matrix ID for the account."
                },
                "well_known": {
                  "description": "Optional client configuration provided by the server. If present,\nclients SHOULD use the provided object to reconfigure themselves,\noptionally validating the URLs within. This object takes the same\nform as the one returned from .well-known autodiscovery.",
                  "allOf": [
                    {
                      "title": "Discovery Information",
                      "type": "object",
                      "description": "Used by clients to determine the homeserver, identity server, and other\noptional components they should be interacting with.",
                      "example": {
                        "m.homeserver": {
                          "base_url": "https://matrix.example.com"
                        },
                        "m.identity_server": {
                          "base_url": "https://identity.example.com"
                        },
                        "org.example.custom.property": {
                          "app_url": "https://custom.app.example.org"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "description": "Application-dependent keys using Java package naming convention."
                      },
                      "required": [
                        "m.homeserver"
                      ],
                      "properties": {
                        "m.homeserver": {
                          "title": "Homeserver Information",
                          "type": "object",
                          "description": "Used by clients to discover homeserver information.",
                          "required": [
                            "base_url"
                          ],
                          "properties": {
                            "base_url": {
                              "type": "string",
                              "description": "The base URL for the homeserver for client-server connections.",
                              "format": "uri",
                              "example": "https://matrix.example.com"
                            }
                          }
                        },
                        "m.identity_server": {
                          "title": "Identity Server Information",
                          "type": "object",
                          "description": "Used by clients to discover identity server information.",
                          "required": [
                            "base_url"
                          ],
                          "properties": {
                            "base_url": {
                              "type": "string",
                              "description": "The base URL for the identity server for client-server connections.",
                              "format": "uri",
                              "example": "https://identity.example.com"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "application/json": {
                "access_token": "abc123",
                "device_id": "GHTYAJCE",
                "expires_in_ms": 60000,
                "refresh_token": "def456",
                "user_id": "@cheeky_monkey:matrix.org",
                "well_known": {
                  "m.homeserver": {
                    "base_url": "https://example.org"
                  },
                  "m.identity_server": {
                    "base_url": "https://id.example.org"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Part of the request was invalid. For example, the login type may not be recognised.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_UNKNOWN",
                "error": "Bad login type."
              }
            }
          },
          "403": {
            "description": "The login attempt failed. This can include one of the following error codes:\n  * `M_FORBIDDEN`: The provided authentication data was incorrect\n    or the requested device ID is the same as a cross-signing key\n    ID.\n  * `M_USER_DEACTIVATED`: The user has been deactivated.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_FORBIDDEN"
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        }
      }
    },
    "/_matrix/client/v3/login/sso/redirect": {
      "get": {
        "tags": [
          "Session management"
        ],
        "summary": "Redirect the user's browser to the SSO interface.",
        "description": "A web-based Matrix client should instruct the user's browser to\nnavigate to this endpoint in order to log in via SSO.\n\nThe server MUST respond with an HTTP redirect to the SSO interface,\nor present a page which lets the user select an IdP to continue\nwith in the event multiple are supported by the server.",
        "operationId": "redirectToSSO",
        "parameters": [
          {
            "type": "string",
            "name": "redirectUrl",
            "in": "query",
            "required": true,
            "description": "URI to which the user will be redirected after the homeserver has\nauthenticated the user with SSO."
          }
        ],
        "responses": {
          "302": {
            "description": "A redirect to the SSO interface.",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          }
        },
        "x-addedInMatrixVersion": "1.1"
      }
    },
    "/_matrix/client/v3/login/sso/redirect/{idpId}": {
      "get": {
        "tags": [
          "Session management"
        ],
        "summary": "Redirect the user's browser to the SSO interface for an IdP.",
        "description": "This endpoint is the same as `/login/sso/redirect`, though with an\nIdP ID from the original `identity_providers` array to inform the\nserver of which IdP the client/user would like to continue with.\n\nThe server MUST respond with an HTTP redirect to the SSO interface\nfor that IdP.",
        "operationId": "redirectToIdP",
        "parameters": [
          {
            "type": "string",
            "name": "idpId",
            "in": "path",
            "required": true,
            "description": "The `id` of the IdP from the `m.login.sso` `identity_providers`\narray denoting the user's selection."
          },
          {
            "type": "string",
            "name": "redirectUrl",
            "in": "query",
            "required": true,
            "description": "URI to which the user will be redirected after the homeserver has\nauthenticated the user with SSO."
          }
        ],
        "responses": {
          "302": {
            "description": "A redirect to the SSO interface.",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "The IdP ID was not recognized by the server. The server is encouraged\nto provide a user-friendly page explaining the error given the user\nwill be navigated to it."
          }
        },
        "x-addedInMatrixVersion": "1.1"
      }
    },
    "/_matrix/client/v3/logout": {
      "post": {
        "tags": [
          "Session management"
        ],
        "summary": "Invalidates a user access token",
        "description": "Invalidates an existing access token, so that it can no longer be used for\nauthorization. The device associated with the access token is also deleted.\n[Device keys](https://spec.matrix.org/v1.5/client-server-api/#device-keys) for the device are deleted alongside the device.",
        "operationId": "logout",
        "responses": {
          "200": {
            "description": "The access token used in the request was successfully invalidated.",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/logout/all": {
      "post": {
        "tags": [
          "Session management"
        ],
        "summary": "Invalidates all access tokens for a user",
        "description": "Invalidates all access tokens for a user, so that they can no longer be used for\nauthorization. This includes the access token that made this request. All devices\nfor the user are also deleted. [Device keys](https://spec.matrix.org/v1.5/client-server-api/#device-keys) for the device are\ndeleted alongside the device.\n\nThis endpoint does not use the [User-Interactive Authentication API](https://spec.matrix.org/v1.5/client-server-api/#user-interactive-authentication-api) because\nUser-Interactive Authentication is designed to protect against attacks where the\nsomeone gets hold of a single access token then takes over the account. This\nendpoint invalidates all access tokens for the user, including the token used in\nthe request, and therefore the attacker is unable to take over the account in\nthis way.",
        "operationId": "logout_all",
        "responses": {
          "200": {
            "description": "The user's access tokens were successfully invalidated.",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/notifications": {
      "get": {
        "tags": [
          "Push notifications"
        ],
        "summary": "Gets a list of events that the user has been notified about",
        "description": "This API is used to paginate through the list of events that the\nuser has been, or would have been notified about.",
        "operationId": "getNotifications",
        "parameters": [
          {
            "type": "string",
            "name": "from",
            "in": "query",
            "description": "Pagination token to continue from. This should be the `next_token`\nreturned from an earlier call to this endpoint.",
            "x-example": "xxxxx"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query",
            "description": "Limit on the number of events to return in this request.",
            "x-example": 20
          },
          {
            "type": "string",
            "name": "only",
            "in": "query",
            "description": "Allows basic filtering of events returned. Supply `highlight`\nto return only events where the notification had the highlight\ntweak set.",
            "x-example": "highlight"
          }
        ],
        "responses": {
          "200": {
            "description": "A batch of events is being returned",
            "schema": {
              "type": "object",
              "required": [
                "notifications"
              ],
              "properties": {
                "next_token": {
                  "type": "string",
                  "description": "The token to supply in the `from` param of the next\n`/notifications` request in order to request more\nevents. If this is absent, there are no more results."
                },
                "notifications": {
                  "type": "array",
                  "description": "The list of events that triggered notifications.",
                  "items": {
                    "title": "Notification",
                    "type": "object",
                    "required": [
                      "actions",
                      "event",
                      "read",
                      "room_id",
                      "ts"
                    ],
                    "properties": {
                      "actions": {
                        "type": "array",
                        "description": "The action(s) to perform when the conditions for this rule are met.\nSee [Push Rules: API](https://spec.matrix.org/v1.5/client-server-api/#push-rules-api).",
                        "items": {
                          "type": [
                            "object",
                            "string"
                          ]
                        }
                      },
                      "event": {
                        "title": "Event",
                        "type": "object",
                        "description": "The Event object for the event that triggered the notification.",
                        "required": [
                          "event_id",
                          "type",
                          "sender",
                          "origin_server_ts",
                          "content"
                        ],
                        "properties": {
                          "content": {
                            "type": "object",
                            "description": "The body of this event, as created by the client which sent it.",
                            "example": {
                              "membership": "join"
                            }
                          },
                          "event_id": {
                            "type": "string",
                            "description": "The globally unique identifier for this event.",
                            "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                          },
                          "origin_server_ts": {
                            "type": "integer",
                            "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                            "format": "int64",
                            "example": 1632489532305
                          },
                          "sender": {
                            "type": "string",
                            "description": "Contains the fully-qualified ID of the user who sent this event.",
                            "example": "@example:example.org"
                          },
                          "state_key": {
                            "type": "string",
                            "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                            "example": "@user:example.org"
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of the event.",
                            "example": "m.room.member"
                          },
                          "unsigned": {
                            "title": "UnsignedData",
                            "type": "object",
                            "description": "Contains optional extra information about the event.",
                            "properties": {
                              "age": {
                                "type": "integer",
                                "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                "format": "int64",
                                "example": 1567437
                              },
                              "prev_content": {
                                "title": "EventContent",
                                "type": "object",
                                "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                "x-changedInMatrixVersion": {
                                  "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                }
                              },
                              "redacted_because": {
                                "title": "ClientEventWithoutRoomID",
                                "type": "object",
                                "description": "The event that redacted this event, if any.",
                                "example": {
                                  "content": {
                                    "reason": "spam"
                                  },
                                  "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                  "origin_server_ts": 1632491098485,
                                  "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                  "sender": "@moderator:example.org",
                                  "type": "m.room.redaction",
                                  "unsigned": {
                                    "age": 1257
                                  }
                                }
                              },
                              "transaction_id": {
                                "type": "string",
                                "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                              }
                            }
                          }
                        }
                      },
                      "profile_tag": {
                        "type": "string",
                        "description": "The profile tag of the rule that matched this event."
                      },
                      "read": {
                        "type": "boolean",
                        "description": "Indicates whether the user has sent a read receipt indicating\nthat they have read this message."
                      },
                      "room_id": {
                        "type": "string",
                        "description": "The ID of the room in which the event was posted."
                      },
                      "ts": {
                        "type": "integer",
                        "description": "The unix timestamp at which the event notification was sent,\nin milliseconds.",
                        "format": "int64"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "next_token": "abcdef",
                "notifications": [
                  {
                    "actions": [
                      "notify"
                    ],
                    "event": {
                      "content": {
                        "body": "This is an example text message",
                        "format": "org.matrix.custom.html",
                        "formatted_body": "<b>This is an example text message</b>",
                        "msgtype": "m.text"
                      },
                      "event_id": "$143273582443PhrSn:example.org",
                      "origin_server_ts": 1432735824653,
                      "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                      "sender": "@example:example.org",
                      "type": "m.room.message",
                      "unsigned": {
                        "age": 1234
                      }
                    },
                    "profile_tag": "hcbvkzxhcvb",
                    "read": true,
                    "room_id": "!abcdefg:example.com",
                    "ts": 1475508881945
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/presence/{userId}/status": {
      "get": {
        "tags": [
          "Presence"
        ],
        "summary": "Get this user's presence state.",
        "description": "Get the given user's presence state.",
        "operationId": "getPresence",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The user whose presence state to get.",
            "x-example": "@alice:example.com"
          }
        ],
        "responses": {
          "200": {
            "description": "The presence state for this user.",
            "schema": {
              "type": "object",
              "required": [
                "presence"
              ],
              "properties": {
                "currently_active": {
                  "type": "boolean",
                  "description": "Whether the user is currently active"
                },
                "last_active_ago": {
                  "type": "integer",
                  "description": "The length of time in milliseconds since an action was performed\nby this user."
                },
                "presence": {
                  "type": "string",
                  "description": "This user's presence.",
                  "enum": [
                    "online",
                    "offline",
                    "unavailable"
                  ]
                },
                "status_msg": {
                  "type": [
                    "null",
                    "string"
                  ],
                  "description": "The state message for this user if one was set."
                }
              }
            },
            "examples": {
              "application/json": {
                "last_active_ago": 420845,
                "presence": "unavailable"
              }
            }
          },
          "403": {
            "description": "You are not allowed to see this user's presence status.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_FORBIDDEN",
                "error": "You are not allowed to see their presence"
              }
            }
          },
          "404": {
            "description": "There is no presence state for this user. This user may not exist or\nisn't exposing presence information to you.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Presence"
        ],
        "summary": "Update this user's presence state.",
        "description": "This API sets the given user's presence state. When setting the status,\nthe activity time is updated to reflect that activity; the client does\nnot need to specify the `last_active_ago` field. You cannot set the\npresence state of another user.",
        "operationId": "setPresence",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The user whose presence state to update.",
            "x-example": "@alice:example.com"
          },
          {
            "name": "presenceState",
            "in": "body",
            "required": true,
            "description": "The updated presence state.",
            "schema": {
              "type": "object",
              "example": {
                "presence": "online",
                "status_msg": "I am here."
              },
              "required": [
                "presence"
              ],
              "properties": {
                "presence": {
                  "type": "string",
                  "description": "The new presence state.",
                  "enum": [
                    "online",
                    "offline",
                    "unavailable"
                  ]
                },
                "status_msg": {
                  "type": "string",
                  "description": "The status message to attach to this state."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The new presence state was set.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/profile/{userId}": {
      "get": {
        "tags": [
          "User data"
        ],
        "summary": "Get this user's profile information.",
        "description": "Get the combined profile information for this user. This API may be used\nto fetch the user's own profile information or other users; either\nlocally or on remote homeservers. This API may return keys which are not\nlimited to `displayname` or `avatar_url`.",
        "operationId": "getUserProfile",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The user whose profile information to get.",
            "x-example": "@alice:example.com"
          }
        ],
        "responses": {
          "200": {
            "description": "The profile information for this user.",
            "schema": {
              "type": "object",
              "properties": {
                "avatar_url": {
                  "type": "string",
                  "description": "The user's avatar URL if they have set one, otherwise not present.",
                  "format": "uri"
                },
                "displayname": {
                  "type": "string",
                  "description": "The user's display name if they have set one, otherwise not present."
                }
              }
            },
            "examples": {
              "application/json": {
                "avatar_url": "mxc://matrix.org/SDGdghriugerRg",
                "displayname": "Alice Margatroid"
              }
            }
          },
          "403": {
            "description": "The server is unwilling to disclose whether the user exists and/or has profile information.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_FORBIDDEN",
                "error": "Profile lookup over federation is disabled on this homeserver"
              }
            },
            "x-addedInMatrixVersion": "1.2"
          },
          "404": {
            "description": "There is no profile information for this user or this user does not exist.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "Profile not found"
              }
            }
          }
        }
      }
    },
    "/_matrix/client/v3/profile/{userId}/avatar_url": {
      "get": {
        "tags": [
          "User data"
        ],
        "summary": "Get the user's avatar URL.",
        "description": "Get the user's avatar URL. This API may be used to fetch the user's\nown avatar URL or to query the URL of other users; either locally or\non remote homeservers.",
        "operationId": "getAvatarUrl",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The user whose avatar URL to get.",
            "x-example": "@alice:example.com"
          }
        ],
        "responses": {
          "200": {
            "description": "The avatar URL for this user.",
            "schema": {
              "type": "object",
              "properties": {
                "avatar_url": {
                  "type": "string",
                  "description": "The user's avatar URL if they have set one, otherwise not present.",
                  "format": "uri"
                }
              }
            },
            "examples": {
              "application/json": {
                "avatar_url": "mxc://matrix.org/SDGdghriugerRg"
              }
            }
          },
          "404": {
            "description": "There is no avatar URL for this user or this user does not exist."
          }
        }
      },
      "put": {
        "tags": [
          "User data"
        ],
        "summary": "Set the user's avatar URL.",
        "description": "This API sets the given user's avatar URL. You must have permission to\nset this user's avatar URL, e.g. you need to have their `access_token`.",
        "operationId": "setAvatarUrl",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The user whose avatar URL to set.",
            "x-example": "@alice:example.com"
          },
          {
            "name": "avatar_url",
            "in": "body",
            "required": true,
            "description": "The new avatar information.",
            "schema": {
              "type": "object",
              "example": {
                "avatar_url": "mxc://matrix.org/wefh34uihSDRGhw34"
              },
              "properties": {
                "avatar_url": {
                  "type": "string",
                  "description": "The new avatar URL for this user.",
                  "format": "uri"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The avatar URL was set.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/profile/{userId}/displayname": {
      "get": {
        "tags": [
          "User data"
        ],
        "summary": "Get the user's display name.",
        "description": "Get the user's display name. This API may be used to fetch the user's\nown displayname or to query the name of other users; either locally or\non remote homeservers.",
        "operationId": "getDisplayName",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The user whose display name to get.",
            "x-example": "@alice:example.com"
          }
        ],
        "responses": {
          "200": {
            "description": "The display name for this user.",
            "schema": {
              "type": "object",
              "properties": {
                "displayname": {
                  "type": "string",
                  "description": "The user's display name if they have set one, otherwise not present."
                }
              }
            },
            "examples": {
              "application/json": {
                "displayname": "Alice Margatroid"
              }
            }
          },
          "404": {
            "description": "There is no display name for this user or this user does not exist."
          }
        }
      },
      "put": {
        "tags": [
          "User data"
        ],
        "summary": "Set the user's display name.",
        "description": "This API sets the given user's display name. You must have permission to\nset this user's display name, e.g. you need to have their `access_token`.",
        "operationId": "setDisplayName",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The user whose display name to set.",
            "x-example": "@alice:example.com"
          },
          {
            "name": "displayName",
            "in": "body",
            "required": true,
            "description": "The new display name information.",
            "schema": {
              "type": "object",
              "example": {
                "displayname": "Alice Margatroid"
              },
              "properties": {
                "displayname": {
                  "type": "string",
                  "description": "The new display name for this user."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The display name was set.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/publicRooms": {
      "get": {
        "tags": [
          "Room discovery"
        ],
        "summary": "Lists the public rooms on the server.",
        "description": "Lists the public rooms on the server.\n\nThis API returns paginated responses. The rooms are ordered by the number\nof joined members, with the largest rooms first.",
        "operationId": "getPublicRooms",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query",
            "description": "Limit the number of results returned."
          },
          {
            "type": "string",
            "name": "since",
            "in": "query",
            "description": "A pagination token from a previous request, allowing clients to\nget the next (or previous) batch of rooms.\nThe direction of pagination is specified solely by which token\nis supplied, rather than via an explicit flag."
          },
          {
            "type": "string",
            "name": "server",
            "in": "query",
            "description": "The server to fetch the public room lists from. Defaults to the\nlocal server."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the rooms on the server.",
            "schema": {
              "type": "object",
              "description": "A list of the rooms on the server.",
              "example": {
                "chunk": [
                  {
                    "avatar_url": "mxc://bleecker.street/CHEDDARandBRIE",
                    "guest_can_join": false,
                    "join_rule": "public",
                    "name": "CHEESE",
                    "num_joined_members": 37,
                    "room_id": "!ol19s:bleecker.street",
                    "room_type": "m.space",
                    "topic": "Tasty tasty cheese",
                    "world_readable": true
                  }
                ],
                "next_batch": "p190q",
                "prev_batch": "p1902",
                "total_room_count_estimate": 115
              },
              "required": [
                "chunk"
              ],
              "properties": {
                "chunk": {
                  "type": "array",
                  "description": "A paginated chunk of public rooms.",
                  "items": {
                    "allOf": [
                      {
                        "title": "PublicRoomsChunk",
                        "type": "object",
                        "required": [
                          "room_id",
                          "num_joined_members",
                          "world_readable",
                          "guest_can_join"
                        ],
                        "properties": {
                          "avatar_url": {
                            "type": "string",
                            "description": "The URL for the room's avatar, if one is set.",
                            "format": "uri",
                            "example": "mxc://example.org/abcdef"
                          },
                          "canonical_alias": {
                            "type": "string",
                            "description": "The canonical alias of the room, if any.",
                            "example": "#general:example.org"
                          },
                          "guest_can_join": {
                            "type": "boolean",
                            "description": "Whether guest users may join the room and participate in it.\nIf they can, they will be subject to ordinary power level\nrules like any other user.",
                            "example": true
                          },
                          "join_rule": {
                            "type": "string",
                            "description": "The room's join rule. When not present, the room is assumed to\nbe `public`.",
                            "example": "public"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the room, if any.",
                            "example": "General Chat"
                          },
                          "num_joined_members": {
                            "type": "integer",
                            "description": "The number of members joined to the room.",
                            "example": 42
                          },
                          "room_id": {
                            "type": "string",
                            "description": "The ID of the room.",
                            "example": "!abcdefg:example.org"
                          },
                          "room_type": {
                            "type": "string",
                            "description": "The `type` of room (from [`m.room.create`](https://spec.matrix.org/v1.5/client-server-api/#mroomcreate)), if any.",
                            "x-addedInMatrixVersion": "1.4"
                          },
                          "topic": {
                            "type": "string",
                            "description": "The topic of the room, if any.",
                            "example": "All things general"
                          },
                          "world_readable": {
                            "type": "boolean",
                            "description": "Whether the room may be viewed by guest users without joining.",
                            "example": false
                          }
                        }
                      },
                      {
                        "title": "PublicRoomsChunk",
                        "type": "object",
                        "properties": {
                          "join_rule": {
                            "type": "string",
                            "description": "The room's join rule. When not present, the room is assumed to\nbe `public`. Note that rooms with `invite` join rules are not\nexpected here, but rooms with `knock` rules are given their\nnear-public nature.",
                            "example": "public"
                          }
                        }
                      }
                    ]
                  }
                },
                "next_batch": {
                  "type": "string",
                  "description": "A pagination token for the response. The absence of this token\nmeans there are no more results to fetch and the client should\nstop paginating."
                },
                "prev_batch": {
                  "type": "string",
                  "description": "A pagination token that allows fetching previous results. The\nabsence of this token means there are no results before this\nbatch, i.e. this is the first batch."
                },
                "total_room_count_estimate": {
                  "type": "integer",
                  "description": "An estimate on the total number of public rooms, if the\nserver has an estimate."
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Room discovery"
        ],
        "summary": "Lists the public rooms on the server with optional filter.",
        "description": "Lists the public rooms on the server, with optional filter.\n\nThis API returns paginated responses. The rooms are ordered by the number\nof joined members, with the largest rooms first.",
        "operationId": "queryPublicRooms",
        "parameters": [
          {
            "type": "string",
            "name": "server",
            "in": "query",
            "description": "The server to fetch the public room lists from. Defaults to the\nlocal server."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Options for which rooms to return.",
            "schema": {
              "type": "object",
              "example": {
                "filter": {
                  "generic_search_term": "foo",
                  "room_types": [
                    null,
                    "m.space"
                  ]
                },
                "include_all_networks": false,
                "limit": 10,
                "third_party_instance_id": "irc"
              },
              "properties": {
                "filter": {
                  "title": "Filter",
                  "type": "object",
                  "description": "Filter to apply to the results.",
                  "properties": {
                    "generic_search_term": {
                      "type": "string",
                      "description": "An optional string to search for in the room metadata, e.g. name,\ntopic, canonical alias, etc."
                    },
                    "room_types": {
                      "type": "array",
                      "description": "An optional list of [room types](https://spec.matrix.org/v1.5/client-server-api/#types) to search\nfor. To include rooms without a room type, specify `null` within this\nlist. When not specified, all applicable rooms (regardless of type)\nare returned.",
                      "items": {
                        "type": "string"
                      },
                      "x-addedInMatrixVersion": "1.4"
                    }
                  }
                },
                "include_all_networks": {
                  "type": "boolean",
                  "description": "Whether or not to include all known networks/protocols from\napplication services on the homeserver. Defaults to false.",
                  "example": false
                },
                "limit": {
                  "type": "integer",
                  "description": "Limit the number of results returned."
                },
                "since": {
                  "type": "string",
                  "description": "A pagination token from a previous request, allowing clients\nto get the next (or previous) batch of rooms.  The direction\nof pagination is specified solely by which token is supplied,\nrather than via an explicit flag."
                },
                "third_party_instance_id": {
                  "type": "string",
                  "description": "The specific third party network/protocol to request from the\nhomeserver. Can only be used if `include_all_networks` is false.",
                  "example": "irc"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the rooms on the server.",
            "schema": {
              "type": "object",
              "description": "A list of the rooms on the server.",
              "example": {
                "chunk": [
                  {
                    "avatar_url": "mxc://bleecker.street/CHEDDARandBRIE",
                    "guest_can_join": false,
                    "join_rule": "public",
                    "name": "CHEESE",
                    "num_joined_members": 37,
                    "room_id": "!ol19s:bleecker.street",
                    "room_type": "m.space",
                    "topic": "Tasty tasty cheese",
                    "world_readable": true
                  }
                ],
                "next_batch": "p190q",
                "prev_batch": "p1902",
                "total_room_count_estimate": 115
              },
              "required": [
                "chunk"
              ],
              "properties": {
                "chunk": {
                  "type": "array",
                  "description": "A paginated chunk of public rooms.",
                  "items": {
                    "allOf": [
                      {
                        "title": "PublicRoomsChunk",
                        "type": "object",
                        "required": [
                          "room_id",
                          "num_joined_members",
                          "world_readable",
                          "guest_can_join"
                        ],
                        "properties": {
                          "avatar_url": {
                            "type": "string",
                            "description": "The URL for the room's avatar, if one is set.",
                            "format": "uri",
                            "example": "mxc://example.org/abcdef"
                          },
                          "canonical_alias": {
                            "type": "string",
                            "description": "The canonical alias of the room, if any.",
                            "example": "#general:example.org"
                          },
                          "guest_can_join": {
                            "type": "boolean",
                            "description": "Whether guest users may join the room and participate in it.\nIf they can, they will be subject to ordinary power level\nrules like any other user.",
                            "example": true
                          },
                          "join_rule": {
                            "type": "string",
                            "description": "The room's join rule. When not present, the room is assumed to\nbe `public`.",
                            "example": "public"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the room, if any.",
                            "example": "General Chat"
                          },
                          "num_joined_members": {
                            "type": "integer",
                            "description": "The number of members joined to the room.",
                            "example": 42
                          },
                          "room_id": {
                            "type": "string",
                            "description": "The ID of the room.",
                            "example": "!abcdefg:example.org"
                          },
                          "room_type": {
                            "type": "string",
                            "description": "The `type` of room (from [`m.room.create`](https://spec.matrix.org/v1.5/client-server-api/#mroomcreate)), if any.",
                            "x-addedInMatrixVersion": "1.4"
                          },
                          "topic": {
                            "type": "string",
                            "description": "The topic of the room, if any.",
                            "example": "All things general"
                          },
                          "world_readable": {
                            "type": "boolean",
                            "description": "Whether the room may be viewed by guest users without joining.",
                            "example": false
                          }
                        }
                      },
                      {
                        "title": "PublicRoomsChunk",
                        "type": "object",
                        "properties": {
                          "join_rule": {
                            "type": "string",
                            "description": "The room's join rule. When not present, the room is assumed to\nbe `public`. Note that rooms with `invite` join rules are not\nexpected here, but rooms with `knock` rules are given their\nnear-public nature.",
                            "example": "public"
                          }
                        }
                      }
                    ]
                  }
                },
                "next_batch": {
                  "type": "string",
                  "description": "A pagination token for the response. The absence of this token\nmeans there are no more results to fetch and the client should\nstop paginating."
                },
                "prev_batch": {
                  "type": "string",
                  "description": "A pagination token that allows fetching previous results. The\nabsence of this token means there are no results before this\nbatch, i.e. this is the first batch."
                },
                "total_room_count_estimate": {
                  "type": "integer",
                  "description": "An estimate on the total number of public rooms, if the\nserver has an estimate."
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/pushers": {
      "get": {
        "tags": [
          "Push notifications"
        ],
        "summary": "Gets the current pushers for the authenticated user",
        "description": "Gets all currently active pushers for the authenticated user.",
        "operationId": "getPushers",
        "responses": {
          "200": {
            "description": "The pushers for this user.",
            "schema": {
              "type": "object",
              "properties": {
                "pushers": {
                  "title": "Pushers",
                  "type": "array",
                  "description": "An array containing the current pushers for the user",
                  "items": {
                    "title": "Pusher",
                    "type": "object",
                    "required": [
                      "pushkey",
                      "app_id",
                      "kind",
                      "app_display_name",
                      "device_display_name",
                      "lang",
                      "data"
                    ],
                    "properties": {
                      "app_display_name": {
                        "type": "string",
                        "description": "A string that will allow the user to identify what application\nowns this pusher."
                      },
                      "app_id": {
                        "type": "string",
                        "description": "This is a reverse-DNS style identifier for the application.\nMax length, 64 chars."
                      },
                      "data": {
                        "title": "PusherData",
                        "type": "object",
                        "description": "A dictionary of information for the pusher implementation\nitself.",
                        "properties": {
                          "format": {
                            "type": "string",
                            "description": "The format to use when sending notifications to the Push\nGateway."
                          },
                          "url": {
                            "type": "string",
                            "description": "Required if `kind` is `http`. The URL to use to send\nnotifications to.",
                            "format": "uri"
                          }
                        }
                      },
                      "device_display_name": {
                        "type": "string",
                        "description": "A string that will allow the user to identify what device owns\nthis pusher."
                      },
                      "kind": {
                        "type": "string",
                        "description": "The kind of pusher. `\"http\"` is a pusher that\nsends HTTP pokes."
                      },
                      "lang": {
                        "type": "string",
                        "description": "The preferred language for receiving notifications (e.g. 'en'\nor 'en-US')"
                      },
                      "profile_tag": {
                        "type": "string",
                        "description": "This string determines which set of device specific rules this\npusher executes."
                      },
                      "pushkey": {
                        "type": "string",
                        "description": "This is a unique identifier for this pusher. See `/set` for\nmore detail.\nMax length, 512 bytes."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "pushers": [
                  {
                    "app_display_name": "Appy McAppface",
                    "app_id": "face.mcapp.appy.prod",
                    "data": {
                      "url": "https://example.com/_matrix/push/v1/notify"
                    },
                    "device_display_name": "Alice's Phone",
                    "kind": "http",
                    "lang": "en-US",
                    "profile_tag": "xyz",
                    "pushkey": "Xp/MzCt8/9DcSNE9cuiaoT5Ac55job3TdLSSmtmYl4A="
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/pushers/set": {
      "post": {
        "tags": [
          "Push notifications"
        ],
        "summary": "Modify a pusher for this user on the homeserver.",
        "description": "This endpoint allows the creation, modification and deletion of [pushers](https://spec.matrix.org/v1.5/client-server-api/#push-notifications)\nfor this user ID. The behaviour of this endpoint varies depending on the\nvalues in the JSON body.",
        "operationId": "postPusher",
        "parameters": [
          {
            "name": "pusher",
            "in": "body",
            "required": true,
            "description": "The pusher information.",
            "schema": {
              "type": "object",
              "example": {
                "app_display_name": "Mat Rix",
                "app_id": "com.example.app.ios",
                "append": false,
                "data": {
                  "format": "event_id_only",
                  "url": "https://push-gateway.location.here/_matrix/push/v1/notify"
                },
                "device_display_name": "iPhone 9",
                "kind": "http",
                "lang": "en",
                "profile_tag": "xxyyzz",
                "pushkey": "APA91bHPRgkF3JUikC4ENAHEeMrd41Zxv3hVZjC9KtT8OvPVGJ-hQMRKRrZuJAEcl7B338qju59zJMjw2DELjzEvxwYv7hH5Ynpc1ODQ0aT4U4OFEeco8ohsN5PjL1iC2dNtk2BAokeMCg2ZXKqpc8FXKmhX94kIxQ"
              },
              "required": [
                "kind",
                "app_id",
                "app_display_name",
                "device_display_name",
                "pushkey",
                "lang",
                "data"
              ],
              "properties": {
                "app_display_name": {
                  "type": "string",
                  "description": "A string that will allow the user to identify what application\nowns this pusher."
                },
                "app_id": {
                  "type": "string",
                  "description": "This is a reverse-DNS style identifier for the application.\nIt is recommended that this end with the platform, such that\ndifferent platform versions get different app identifiers.\nMax length, 64 chars.\n\nIf the `kind` is `\"email\"`, this is `\"m.email\"`."
                },
                "append": {
                  "type": "boolean",
                  "description": "If true, the homeserver should add another pusher with the\ngiven pushkey and App ID in addition to any others with\ndifferent user IDs. Otherwise, the homeserver must remove any\nother pushers with the same App ID and pushkey for different\nusers. The default is `false`."
                },
                "data": {
                  "title": "PusherData",
                  "type": "object",
                  "description": "A dictionary of information for the pusher implementation\nitself. If `kind` is `http`, this should contain `url`\nwhich is the URL to use to send notifications to.",
                  "properties": {
                    "format": {
                      "type": "string",
                      "description": "The format to send notifications in to Push Gateways if the\n`kind` is `http`. The details about what fields the\nhomeserver should send to the push gateway are defined in the\n[Push Gateway Specification](https://spec.matrix.org/v1.5/push-gateway-api/). Currently the only format\navailable is 'event_id_only'."
                    },
                    "url": {
                      "type": "string",
                      "description": "Required if `kind` is `http`. The URL to use to send\nnotifications to. MUST be an HTTPS URL with a path of\n`/_matrix/push/v1/notify`.",
                      "format": "uri",
                      "example": "https://push-gateway.location.here/_matrix/push/v1/notify"
                    }
                  }
                },
                "device_display_name": {
                  "type": "string",
                  "description": "A string that will allow the user to identify what device owns\nthis pusher."
                },
                "kind": {
                  "type": "string",
                  "description": "The kind of pusher to configure. `\"http\"` makes a pusher that\nsends HTTP pokes. `\"email\"` makes a pusher that emails the\nuser with unread notifications. `null` deletes the pusher."
                },
                "lang": {
                  "type": "string",
                  "description": "The preferred language for receiving notifications (e.g. 'en'\nor 'en-US')."
                },
                "profile_tag": {
                  "type": "string",
                  "description": "This string determines which set of device specific rules this\npusher executes."
                },
                "pushkey": {
                  "type": "string",
                  "description": "This is a unique identifier for this pusher. The value you\nshould use for this is the routing or destination address\ninformation for the notification, for example, the APNS token\nfor APNS or the Registration ID for GCM. If your notification\nclient has no such concept, use any unique identifier.\nMax length, 512 bytes.\n\nIf the `kind` is `\"email\"`, this is the email address to\nsend notifications to."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The pusher was set.",
            "schema": {
              "type": "object",
              "description": "An empty object."
            },
            "examples": {
              "application/json": {}
            }
          },
          "400": {
            "description": "One or more of the pusher values were invalid.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_MISSING_PARAM",
                "error": "Missing parameters: lang, data"
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/pushrules/": {
      "get": {
        "tags": [
          "Push notifications"
        ],
        "summary": "Retrieve all push rulesets.",
        "description": "Retrieve all push rulesets for this user. Clients can \"drill-down\" on\nthe rulesets by suffixing a `scope` to this path e.g.\n`/pushrules/global/`. This will return a subset of this data under the\nspecified key e.g. the `global` key.",
        "operationId": "getPushRules",
        "responses": {
          "200": {
            "description": "All the push rulesets for this user.",
            "schema": {
              "type": "object",
              "required": [
                "global"
              ],
              "properties": {
                "global": {
                  "title": "Ruleset",
                  "type": "object",
                  "description": "The global ruleset.",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "content": {
                          "type": "array",
                          "items": {
                            "title": "PushRule",
                            "type": "object",
                            "allOf": [
                              {
                                "title": "PushRule",
                                "type": "object",
                                "required": [
                                  "actions",
                                  "default",
                                  "enabled",
                                  "rule_id"
                                ],
                                "properties": {
                                  "actions": {
                                    "type": "array",
                                    "description": "The actions to perform when this rule is matched.",
                                    "items": {
                                      "type": [
                                        "object",
                                        "string"
                                      ]
                                    }
                                  },
                                  "conditions": {
                                    "type": "array",
                                    "description": "The conditions that must hold true for an event in order for a rule to be\napplied to an event. A rule with no conditions always matches. Only\napplicable to `underride` and `override` rules.",
                                    "items": {
                                      "allOf": [
                                        {
                                          "title": "PushCondition",
                                          "type": "object",
                                          "required": [
                                            "kind"
                                          ],
                                          "properties": {
                                            "is": {
                                              "type": "string",
                                              "description": "Required for `room_member_count` conditions. A decimal integer\noptionally prefixed by one of, ==, <, >, >= or <=. A prefix of < matches\nrooms where the member count is strictly less than the given number and\nso forth. If no prefix is present, this parameter defaults to ==."
                                            },
                                            "key": {
                                              "type": "string",
                                              "description": "Required for `event_match` conditions. The dot-separated field of the\nevent to match.\n\nRequired for `sender_notification_permission` conditions. The field in\nthe power level event the user needs a minimum power level for. Fields\nmust be specified under the `notifications` property in the power level\nevent's `content`.",
                                              "x-example": "content.body"
                                            },
                                            "kind": {
                                              "type": "string",
                                              "description": "The kind of condition to apply. See [conditions](https://spec.matrix.org/v1.5/client-server-api/#conditions) for\nmore information on the allowed kinds and how they work."
                                            },
                                            "pattern": {
                                              "type": "string",
                                              "description": "Required for `event_match` conditions. The glob-style pattern to\nmatch against."
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "default": {
                                    "type": "boolean",
                                    "description": "Whether this is a default rule, or has been set explicitly."
                                  },
                                  "enabled": {
                                    "type": "boolean",
                                    "description": "Whether the push rule is enabled or not."
                                  },
                                  "pattern": {
                                    "type": "string",
                                    "description": "The glob-style pattern to match against.  Only applicable to `content`\nrules."
                                  },
                                  "rule_id": {
                                    "type": "string",
                                    "description": "The ID of this rule."
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "override": {
                          "type": "array",
                          "items": {
                            "title": "PushRule",
                            "type": "object",
                            "allOf": [
                              {
                                "title": "PushRule",
                                "type": "object",
                                "required": [
                                  "actions",
                                  "default",
                                  "enabled",
                                  "rule_id"
                                ],
                                "properties": {
                                  "actions": {
                                    "type": "array",
                                    "description": "The actions to perform when this rule is matched.",
                                    "items": {
                                      "type": [
                                        "object",
                                        "string"
                                      ]
                                    }
                                  },
                                  "conditions": {
                                    "type": "array",
                                    "description": "The conditions that must hold true for an event in order for a rule to be\napplied to an event. A rule with no conditions always matches. Only\napplicable to `underride` and `override` rules.",
                                    "items": {
                                      "allOf": [
                                        {
                                          "title": "PushCondition",
                                          "type": "object",
                                          "required": [
                                            "kind"
                                          ],
                                          "properties": {
                                            "is": {
                                              "type": "string",
                                              "description": "Required for `room_member_count` conditions. A decimal integer\noptionally prefixed by one of, ==, <, >, >= or <=. A prefix of < matches\nrooms where the member count is strictly less than the given number and\nso forth. If no prefix is present, this parameter defaults to ==."
                                            },
                                            "key": {
                                              "type": "string",
                                              "description": "Required for `event_match` conditions. The dot-separated field of the\nevent to match.\n\nRequired for `sender_notification_permission` conditions. The field in\nthe power level event the user needs a minimum power level for. Fields\nmust be specified under the `notifications` property in the power level\nevent's `content`.",
                                              "x-example": "content.body"
                                            },
                                            "kind": {
                                              "type": "string",
                                              "description": "The kind of condition to apply. See [conditions](https://spec.matrix.org/v1.5/client-server-api/#conditions) for\nmore information on the allowed kinds and how they work."
                                            },
                                            "pattern": {
                                              "type": "string",
                                              "description": "Required for `event_match` conditions. The glob-style pattern to\nmatch against."
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "default": {
                                    "type": "boolean",
                                    "description": "Whether this is a default rule, or has been set explicitly."
                                  },
                                  "enabled": {
                                    "type": "boolean",
                                    "description": "Whether the push rule is enabled or not."
                                  },
                                  "pattern": {
                                    "type": "string",
                                    "description": "The glob-style pattern to match against.  Only applicable to `content`\nrules."
                                  },
                                  "rule_id": {
                                    "type": "string",
                                    "description": "The ID of this rule."
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "room": {
                          "type": "array",
                          "items": {
                            "title": "PushRule",
                            "type": "object",
                            "allOf": [
                              {
                                "title": "PushRule",
                                "type": "object",
                                "required": [
                                  "actions",
                                  "default",
                                  "enabled",
                                  "rule_id"
                                ],
                                "properties": {
                                  "actions": {
                                    "type": "array",
                                    "description": "The actions to perform when this rule is matched.",
                                    "items": {
                                      "type": [
                                        "object",
                                        "string"
                                      ]
                                    }
                                  },
                                  "conditions": {
                                    "type": "array",
                                    "description": "The conditions that must hold true for an event in order for a rule to be\napplied to an event. A rule with no conditions always matches. Only\napplicable to `underride` and `override` rules.",
                                    "items": {
                                      "allOf": [
                                        {
                                          "title": "PushCondition",
                                          "type": "object",
                                          "required": [
                                            "kind"
                                          ],
                                          "properties": {
                                            "is": {
                                              "type": "string",
                                              "description": "Required for `room_member_count` conditions. A decimal integer\noptionally prefixed by one of, ==, <, >, >= or <=. A prefix of < matches\nrooms where the member count is strictly less than the given number and\nso forth. If no prefix is present, this parameter defaults to ==."
                                            },
                                            "key": {
                                              "type": "string",
                                              "description": "Required for `event_match` conditions. The dot-separated field of the\nevent to match.\n\nRequired for `sender_notification_permission` conditions. The field in\nthe power level event the user needs a minimum power level for. Fields\nmust be specified under the `notifications` property in the power level\nevent's `content`.",
                                              "x-example": "content.body"
                                            },
                                            "kind": {
                                              "type": "string",
                                              "description": "The kind of condition to apply. See [conditions](https://spec.matrix.org/v1.5/client-server-api/#conditions) for\nmore information on the allowed kinds and how they work."
                                            },
                                            "pattern": {
                                              "type": "string",
                                              "description": "Required for `event_match` conditions. The glob-style pattern to\nmatch against."
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "default": {
                                    "type": "boolean",
                                    "description": "Whether this is a default rule, or has been set explicitly."
                                  },
                                  "enabled": {
                                    "type": "boolean",
                                    "description": "Whether the push rule is enabled or not."
                                  },
                                  "pattern": {
                                    "type": "string",
                                    "description": "The glob-style pattern to match against.  Only applicable to `content`\nrules."
                                  },
                                  "rule_id": {
                                    "type": "string",
                                    "description": "The ID of this rule."
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "sender": {
                          "type": "array",
                          "items": {
                            "title": "PushRule",
                            "type": "object",
                            "allOf": [
                              {
                                "title": "PushRule",
                                "type": "object",
                                "required": [
                                  "actions",
                                  "default",
                                  "enabled",
                                  "rule_id"
                                ],
                                "properties": {
                                  "actions": {
                                    "type": "array",
                                    "description": "The actions to perform when this rule is matched.",
                                    "items": {
                                      "type": [
                                        "object",
                                        "string"
                                      ]
                                    }
                                  },
                                  "conditions": {
                                    "type": "array",
                                    "description": "The conditions that must hold true for an event in order for a rule to be\napplied to an event. A rule with no conditions always matches. Only\napplicable to `underride` and `override` rules.",
                                    "items": {
                                      "allOf": [
                                        {
                                          "title": "PushCondition",
                                          "type": "object",
                                          "required": [
                                            "kind"
                                          ],
                                          "properties": {
                                            "is": {
                                              "type": "string",
                                              "description": "Required for `room_member_count` conditions. A decimal integer\noptionally prefixed by one of, ==, <, >, >= or <=. A prefix of < matches\nrooms where the member count is strictly less than the given number and\nso forth. If no prefix is present, this parameter defaults to ==."
                                            },
                                            "key": {
                                              "type": "string",
                                              "description": "Required for `event_match` conditions. The dot-separated field of the\nevent to match.\n\nRequired for `sender_notification_permission` conditions. The field in\nthe power level event the user needs a minimum power level for. Fields\nmust be specified under the `notifications` property in the power level\nevent's `content`.",
                                              "x-example": "content.body"
                                            },
                                            "kind": {
                                              "type": "string",
                                              "description": "The kind of condition to apply. See [conditions](https://spec.matrix.org/v1.5/client-server-api/#conditions) for\nmore information on the allowed kinds and how they work."
                                            },
                                            "pattern": {
                                              "type": "string",
                                              "description": "Required for `event_match` conditions. The glob-style pattern to\nmatch against."
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "default": {
                                    "type": "boolean",
                                    "description": "Whether this is a default rule, or has been set explicitly."
                                  },
                                  "enabled": {
                                    "type": "boolean",
                                    "description": "Whether the push rule is enabled or not."
                                  },
                                  "pattern": {
                                    "type": "string",
                                    "description": "The glob-style pattern to match against.  Only applicable to `content`\nrules."
                                  },
                                  "rule_id": {
                                    "type": "string",
                                    "description": "The ID of this rule."
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "underride": {
                          "type": "array",
                          "items": {
                            "title": "PushRule",
                            "type": "object",
                            "allOf": [
                              {
                                "title": "PushRule",
                                "type": "object",
                                "required": [
                                  "actions",
                                  "default",
                                  "enabled",
                                  "rule_id"
                                ],
                                "properties": {
                                  "actions": {
                                    "type": "array",
                                    "description": "The actions to perform when this rule is matched.",
                                    "items": {
                                      "type": [
                                        "object",
                                        "string"
                                      ]
                                    }
                                  },
                                  "conditions": {
                                    "type": "array",
                                    "description": "The conditions that must hold true for an event in order for a rule to be\napplied to an event. A rule with no conditions always matches. Only\napplicable to `underride` and `override` rules.",
                                    "items": {
                                      "allOf": [
                                        {
                                          "title": "PushCondition",
                                          "type": "object",
                                          "required": [
                                            "kind"
                                          ],
                                          "properties": {
                                            "is": {
                                              "type": "string",
                                              "description": "Required for `room_member_count` conditions. A decimal integer\noptionally prefixed by one of, ==, <, >, >= or <=. A prefix of < matches\nrooms where the member count is strictly less than the given number and\nso forth. If no prefix is present, this parameter defaults to ==."
                                            },
                                            "key": {
                                              "type": "string",
                                              "description": "Required for `event_match` conditions. The dot-separated field of the\nevent to match.\n\nRequired for `sender_notification_permission` conditions. The field in\nthe power level event the user needs a minimum power level for. Fields\nmust be specified under the `notifications` property in the power level\nevent's `content`.",
                                              "x-example": "content.body"
                                            },
                                            "kind": {
                                              "type": "string",
                                              "description": "The kind of condition to apply. See [conditions](https://spec.matrix.org/v1.5/client-server-api/#conditions) for\nmore information on the allowed kinds and how they work."
                                            },
                                            "pattern": {
                                              "type": "string",
                                              "description": "Required for `event_match` conditions. The glob-style pattern to\nmatch against."
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "default": {
                                    "type": "boolean",
                                    "description": "Whether this is a default rule, or has been set explicitly."
                                  },
                                  "enabled": {
                                    "type": "boolean",
                                    "description": "Whether the push rule is enabled or not."
                                  },
                                  "pattern": {
                                    "type": "string",
                                    "description": "The glob-style pattern to match against.  Only applicable to `content`\nrules."
                                  },
                                  "rule_id": {
                                    "type": "string",
                                    "description": "The ID of this rule."
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "application/json": {
                "global": {
                  "content": [
                    {
                      "actions": [
                        "notify",
                        {
                          "set_tweak": "sound",
                          "value": "default"
                        },
                        {
                          "set_tweak": "highlight"
                        }
                      ],
                      "default": true,
                      "enabled": true,
                      "pattern": "alice",
                      "rule_id": ".m.rule.contains_user_name"
                    }
                  ],
                  "override": [
                    {
                      "actions": [
                        "dont_notify"
                      ],
                      "conditions": [],
                      "default": true,
                      "enabled": false,
                      "rule_id": ".m.rule.master"
                    },
                    {
                      "actions": [
                        "dont_notify"
                      ],
                      "conditions": [
                        {
                          "key": "content.msgtype",
                          "kind": "event_match",
                          "pattern": "m.notice"
                        }
                      ],
                      "default": true,
                      "enabled": true,
                      "rule_id": ".m.rule.suppress_notices"
                    }
                  ],
                  "room": [],
                  "sender": [],
                  "underride": [
                    {
                      "actions": [
                        "notify",
                        {
                          "set_tweak": "sound",
                          "value": "ring"
                        },
                        {
                          "set_tweak": "highlight",
                          "value": false
                        }
                      ],
                      "conditions": [
                        {
                          "key": "type",
                          "kind": "event_match",
                          "pattern": "m.call.invite"
                        }
                      ],
                      "default": true,
                      "enabled": true,
                      "rule_id": ".m.rule.call"
                    },
                    {
                      "actions": [
                        "notify",
                        {
                          "set_tweak": "sound",
                          "value": "default"
                        },
                        {
                          "set_tweak": "highlight"
                        }
                      ],
                      "conditions": [
                        {
                          "kind": "contains_display_name"
                        }
                      ],
                      "default": true,
                      "enabled": true,
                      "rule_id": ".m.rule.contains_display_name"
                    },
                    {
                      "actions": [
                        "notify",
                        {
                          "set_tweak": "sound",
                          "value": "default"
                        },
                        {
                          "set_tweak": "highlight",
                          "value": false
                        }
                      ],
                      "conditions": [
                        {
                          "is": "2",
                          "kind": "room_member_count"
                        },
                        {
                          "key": "type",
                          "kind": "event_match",
                          "pattern": "m.room.message"
                        }
                      ],
                      "default": true,
                      "enabled": true,
                      "rule_id": ".m.rule.room_one_to_one"
                    },
                    {
                      "actions": [
                        "notify",
                        {
                          "set_tweak": "sound",
                          "value": "default"
                        },
                        {
                          "set_tweak": "highlight",
                          "value": false
                        }
                      ],
                      "conditions": [
                        {
                          "key": "type",
                          "kind": "event_match",
                          "pattern": "m.room.member"
                        },
                        {
                          "key": "content.membership",
                          "kind": "event_match",
                          "pattern": "invite"
                        },
                        {
                          "key": "state_key",
                          "kind": "event_match",
                          "pattern": "@alice:example.com"
                        }
                      ],
                      "default": true,
                      "enabled": true,
                      "rule_id": ".m.rule.invite_for_me"
                    },
                    {
                      "actions": [
                        "notify",
                        {
                          "set_tweak": "highlight",
                          "value": false
                        }
                      ],
                      "conditions": [
                        {
                          "key": "type",
                          "kind": "event_match",
                          "pattern": "m.room.member"
                        }
                      ],
                      "default": true,
                      "enabled": true,
                      "rule_id": ".m.rule.member_event"
                    },
                    {
                      "actions": [
                        "notify",
                        {
                          "set_tweak": "highlight",
                          "value": false
                        }
                      ],
                      "conditions": [
                        {
                          "key": "type",
                          "kind": "event_match",
                          "pattern": "m.room.message"
                        }
                      ],
                      "default": true,
                      "enabled": true,
                      "rule_id": ".m.rule.message"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/pushrules/{scope}/{kind}/{ruleId}": {
      "delete": {
        "tags": [
          "Push notifications"
        ],
        "summary": "Delete a push rule.",
        "description": "This endpoint removes the push rule defined in the path.",
        "operationId": "deletePushRule",
        "parameters": [
          {
            "type": "string",
            "name": "scope",
            "in": "path",
            "required": true,
            "description": "`global` to specify global rules.",
            "x-example": "global"
          },
          {
            "type": "string",
            "name": "kind",
            "in": "path",
            "required": true,
            "description": "The kind of rule\n",
            "enum": [
              "override",
              "underride",
              "sender",
              "room",
              "content"
            ],
            "x-example": "content"
          },
          {
            "type": "string",
            "name": "ruleId",
            "in": "path",
            "required": true,
            "description": "The identifier for the rule.\n",
            "x-example": "nocake"
          }
        ],
        "responses": {
          "200": {
            "description": "The push rule was deleted.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "404": {
            "description": "The push rule does not exist.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "The push rule was not found."
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      },
      "get": {
        "tags": [
          "Push notifications"
        ],
        "summary": "Retrieve a push rule.",
        "description": "Retrieve a single specified push rule.",
        "operationId": "getPushRule",
        "parameters": [
          {
            "type": "string",
            "name": "scope",
            "in": "path",
            "required": true,
            "description": "`global` to specify global rules.",
            "x-example": "global"
          },
          {
            "type": "string",
            "name": "kind",
            "in": "path",
            "required": true,
            "description": "The kind of rule\n",
            "enum": [
              "override",
              "underride",
              "sender",
              "room",
              "content"
            ],
            "x-example": "content"
          },
          {
            "type": "string",
            "name": "ruleId",
            "in": "path",
            "required": true,
            "description": "The identifier for the rule.\n",
            "x-example": "nocake"
          }
        ],
        "responses": {
          "200": {
            "description": "The specific push rule. This will also include keys specific to the\nrule itself such as the rule's `actions` and `conditions` if set.",
            "schema": {
              "type": "object",
              "description": "The push rule.",
              "allOf": [
                {
                  "title": "PushRule",
                  "type": "object",
                  "required": [
                    "actions",
                    "default",
                    "enabled",
                    "rule_id"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "description": "The actions to perform when this rule is matched.",
                      "items": {
                        "type": [
                          "object",
                          "string"
                        ]
                      }
                    },
                    "conditions": {
                      "type": "array",
                      "description": "The conditions that must hold true for an event in order for a rule to be\napplied to an event. A rule with no conditions always matches. Only\napplicable to `underride` and `override` rules.",
                      "items": {
                        "allOf": [
                          {
                            "title": "PushCondition",
                            "type": "object",
                            "required": [
                              "kind"
                            ],
                            "properties": {
                              "is": {
                                "type": "string",
                                "description": "Required for `room_member_count` conditions. A decimal integer\noptionally prefixed by one of, ==, <, >, >= or <=. A prefix of < matches\nrooms where the member count is strictly less than the given number and\nso forth. If no prefix is present, this parameter defaults to ==."
                              },
                              "key": {
                                "type": "string",
                                "description": "Required for `event_match` conditions. The dot-separated field of the\nevent to match.\n\nRequired for `sender_notification_permission` conditions. The field in\nthe power level event the user needs a minimum power level for. Fields\nmust be specified under the `notifications` property in the power level\nevent's `content`.",
                                "x-example": "content.body"
                              },
                              "kind": {
                                "type": "string",
                                "description": "The kind of condition to apply. See [conditions](https://spec.matrix.org/v1.5/client-server-api/#conditions) for\nmore information on the allowed kinds and how they work."
                              },
                              "pattern": {
                                "type": "string",
                                "description": "Required for `event_match` conditions. The glob-style pattern to\nmatch against."
                              }
                            }
                          }
                        ]
                      }
                    },
                    "default": {
                      "type": "boolean",
                      "description": "Whether this is a default rule, or has been set explicitly."
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Whether the push rule is enabled or not."
                    },
                    "pattern": {
                      "type": "string",
                      "description": "The glob-style pattern to match against.  Only applicable to `content`\nrules."
                    },
                    "rule_id": {
                      "type": "string",
                      "description": "The ID of this rule."
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": {
                "actions": [
                  "dont_notify"
                ],
                "default": false,
                "enabled": true,
                "pattern": "cake*lie",
                "rule_id": "nocake"
              }
            }
          },
          "404": {
            "description": "The push rule does not exist.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "The push rule was not found."
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Push notifications"
        ],
        "summary": "Add or change a push rule.",
        "description": "This endpoint allows the creation and modification of user defined push\nrules.\n\nIf a rule with the same `rule_id` already exists among rules of the same\nkind, it is updated with the new parameters, otherwise a new rule is\ncreated.\n\nIf both `after` and `before` are provided, the new or updated rule must\nbe the next most important rule with respect to the rule identified by\n`before`.\n\nIf neither `after` nor `before` are provided and the rule is created, it\nshould be added as the most important user defined rule among rules of\nthe same kind.\n\nWhen creating push rules, they MUST be enabled by default.",
        "operationId": "setPushRule",
        "parameters": [
          {
            "type": "string",
            "name": "scope",
            "in": "path",
            "required": true,
            "description": "`global` to specify global rules.",
            "x-example": "global"
          },
          {
            "type": "string",
            "name": "kind",
            "in": "path",
            "required": true,
            "description": "The kind of rule\n",
            "enum": [
              "override",
              "underride",
              "sender",
              "room",
              "content"
            ],
            "x-example": "content"
          },
          {
            "type": "string",
            "name": "ruleId",
            "in": "path",
            "required": true,
            "description": "The identifier for the rule. If the string starts with a dot (\".\"),\nthe request MUST be rejected as this is reserved for server-default\nrules. Slashes (\"/\") and backslashes (\"\\\\\") are also not allowed.\n",
            "x-example": "nocake"
          },
          {
            "type": "string",
            "name": "before",
            "in": "query",
            "description": "Use 'before' with a `rule_id` as its value to make the new rule the\nnext-most important rule with respect to the given user defined rule.\nIt is not possible to add a rule relative to a predefined server rule.",
            "x-example": "someRuleId"
          },
          {
            "type": "string",
            "name": "after",
            "in": "query",
            "description": "This makes the new rule the next-less important rule relative to the\ngiven user defined rule. It is not possible to add a rule relative\nto a predefined server rule.",
            "x-example": "anotherRuleId"
          },
          {
            "name": "pushrule",
            "in": "body",
            "required": true,
            "description": "The push rule data. Additional top-level keys may be present depending\non the parameters for the rule `kind`.",
            "schema": {
              "type": "object",
              "example": {
                "actions": [
                  "notify"
                ],
                "pattern": "cake*lie"
              },
              "required": [
                "actions"
              ],
              "properties": {
                "actions": {
                  "type": "array",
                  "description": "The action(s) to perform when the conditions for this rule are met.",
                  "items": {
                    "type": [
                      "object",
                      "string"
                    ]
                  }
                },
                "conditions": {
                  "type": "array",
                  "description": "The conditions that must hold true for an event in order for a\nrule to be applied to an event. A rule with no conditions\nalways matches. Only applicable to `underride` and `override` rules.",
                  "items": {
                    "type": "object",
                    "allOf": [
                      {
                        "title": "PushCondition",
                        "type": "object",
                        "required": [
                          "kind"
                        ],
                        "properties": {
                          "is": {
                            "type": "string",
                            "description": "Required for `room_member_count` conditions. A decimal integer\noptionally prefixed by one of, ==, <, >, >= or <=. A prefix of < matches\nrooms where the member count is strictly less than the given number and\nso forth. If no prefix is present, this parameter defaults to ==."
                          },
                          "key": {
                            "type": "string",
                            "description": "Required for `event_match` conditions. The dot-separated field of the\nevent to match.\n\nRequired for `sender_notification_permission` conditions. The field in\nthe power level event the user needs a minimum power level for. Fields\nmust be specified under the `notifications` property in the power level\nevent's `content`.",
                            "x-example": "content.body"
                          },
                          "kind": {
                            "type": "string",
                            "description": "The kind of condition to apply. See [conditions](https://spec.matrix.org/v1.5/client-server-api/#conditions) for\nmore information on the allowed kinds and how they work."
                          },
                          "pattern": {
                            "type": "string",
                            "description": "Required for `event_match` conditions. The glob-style pattern to\nmatch against."
                          }
                        }
                      }
                    ]
                  }
                },
                "pattern": {
                  "type": "string",
                  "description": "Only applicable to `content` rules. The glob-style pattern to match against."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The push rule was created/updated.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "400": {
            "description": "There was a problem configuring this push rule.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_UNKNOWN",
                "error": "before/after rule not found: someRuleId"
              }
            }
          },
          "404": {
            "description": "The push rule does not exist (when updating a push rule).",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "The push rule was not found."
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/pushrules/{scope}/{kind}/{ruleId}/actions": {
      "get": {
        "tags": [
          "Push notifications"
        ],
        "summary": "The actions for a push rule",
        "description": "This endpoint get the actions for the specified push rule.",
        "operationId": "getPushRuleActions",
        "parameters": [
          {
            "type": "string",
            "name": "scope",
            "in": "path",
            "required": true,
            "description": "Either `global` or `device/<profile_tag>` to specify global\nrules or device rules for the given `profile_tag`.",
            "x-example": "global"
          },
          {
            "type": "string",
            "name": "kind",
            "in": "path",
            "required": true,
            "description": "The kind of rule\n",
            "enum": [
              "override",
              "underride",
              "sender",
              "room",
              "content"
            ],
            "x-example": "content"
          },
          {
            "type": "string",
            "name": "ruleId",
            "in": "path",
            "required": true,
            "description": "The identifier for the rule.\n",
            "x-example": "nocake"
          }
        ],
        "responses": {
          "200": {
            "description": "The actions for this push rule.",
            "schema": {
              "type": "object",
              "required": [
                "actions"
              ],
              "properties": {
                "actions": {
                  "type": "array",
                  "description": "The action(s) to perform for this rule.",
                  "items": {
                    "type": [
                      "object",
                      "string"
                    ]
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "actions": [
                  "notify",
                  {
                    "set_tweak": "sound",
                    "value": "bing"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "The push rule does not exist.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "The push rule was not found."
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Push notifications"
        ],
        "summary": "Set the actions for a push rule.",
        "description": "This endpoint allows clients to change the actions of a push rule.\nThis can be used to change the actions of builtin rules.",
        "operationId": "setPushRuleActions",
        "parameters": [
          {
            "type": "string",
            "name": "scope",
            "in": "path",
            "required": true,
            "description": "`global` to specify global rules.",
            "x-example": "global"
          },
          {
            "type": "string",
            "name": "kind",
            "in": "path",
            "required": true,
            "description": "The kind of rule\n",
            "enum": [
              "override",
              "underride",
              "sender",
              "room",
              "content"
            ],
            "x-example": "room"
          },
          {
            "type": "string",
            "name": "ruleId",
            "in": "path",
            "required": true,
            "description": "The identifier for the rule.\n",
            "x-example": "#spam:example.com"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The action(s) to perform when the conditions for this rule are met.\n",
            "schema": {
              "type": "object",
              "example": {
                "actions": [
                  "notify",
                  {
                    "set_tweak": "highlight"
                  }
                ]
              },
              "required": [
                "actions"
              ],
              "properties": {
                "actions": {
                  "type": "array",
                  "description": "The action(s) to perform for this rule.",
                  "items": {
                    "type": [
                      "object",
                      "string"
                    ]
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The actions for the push rule were set.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "404": {
            "description": "The push rule does not exist.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "The push rule was not found."
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/pushrules/{scope}/{kind}/{ruleId}/enabled": {
      "get": {
        "tags": [
          "Push notifications"
        ],
        "summary": "Get whether a push rule is enabled",
        "description": "This endpoint gets whether the specified push rule is enabled.",
        "operationId": "isPushRuleEnabled",
        "parameters": [
          {
            "type": "string",
            "name": "scope",
            "in": "path",
            "required": true,
            "description": "Either `global` or `device/<profile_tag>` to specify global\nrules or device rules for the given `profile_tag`.",
            "x-example": "global"
          },
          {
            "type": "string",
            "name": "kind",
            "in": "path",
            "required": true,
            "description": "The kind of rule\n",
            "enum": [
              "override",
              "underride",
              "sender",
              "room",
              "content"
            ],
            "x-example": "cake"
          },
          {
            "type": "string",
            "name": "ruleId",
            "in": "path",
            "required": true,
            "description": "The identifier for the rule.\n",
            "x-example": "nocake"
          }
        ],
        "responses": {
          "200": {
            "description": "Whether the push rule is enabled.",
            "schema": {
              "type": "object",
              "required": [
                "enabled"
              ],
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether the push rule is enabled or not."
                }
              }
            },
            "examples": {
              "application/json": {
                "enabled": true
              }
            }
          },
          "404": {
            "description": "The push rule does not exist.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "The push rule was not found."
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Push notifications"
        ],
        "summary": "Enable or disable a push rule.",
        "description": "This endpoint allows clients to enable or disable the specified push rule.",
        "operationId": "setPushRuleEnabled",
        "parameters": [
          {
            "type": "string",
            "name": "scope",
            "in": "path",
            "required": true,
            "description": "`global` to specify global rules.",
            "x-example": "global"
          },
          {
            "type": "string",
            "name": "kind",
            "in": "path",
            "required": true,
            "description": "The kind of rule\n",
            "enum": [
              "override",
              "underride",
              "sender",
              "room",
              "content"
            ],
            "x-example": "content"
          },
          {
            "type": "string",
            "name": "ruleId",
            "in": "path",
            "required": true,
            "description": "The identifier for the rule.\n",
            "x-example": "nocake"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Whether the push rule is enabled or not.\n",
            "schema": {
              "type": "object",
              "example": {
                "enabled": true
              },
              "required": [
                "enabled"
              ],
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether the push rule is enabled or not."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The push rule was enabled or disabled.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "404": {
            "description": "The push rule does not exist.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "The push rule was not found."
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/refresh": {
      "post": {
        "summary": "Refresh an access token",
        "description": "Refresh an access token. Clients should use the returned access token\nwhen making subsequent API calls, and store the returned refresh token\n(if given) in order to refresh the new access token when necessary.\n\nAfter an access token has been refreshed, a server can choose to\ninvalidate the old access token immediately, or can choose not to, for\nexample if the access token would expire soon anyways. Clients should\nnot make any assumptions about the old access token still being valid,\nand should use the newly provided access token instead.\n\nThe old refresh token remains valid until the new access token or refresh token\nis used, at which point the old refresh token is revoked.\n\nNote that this endpoint does not require authentication via an\naccess token. Authentication is provided via the refresh token.\n\nApplication Service identity assertion is disabled for this endpoint.",
        "operationId": "refresh",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "refresh_token": "some_token"
              },
              "required": [
                "refresh_token"
              ],
              "properties": {
                "refresh_token": {
                  "type": "string",
                  "description": "The refresh token"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A new access token and refresh token were generated.",
            "schema": {
              "type": "object",
              "required": [
                "access_token"
              ],
              "properties": {
                "access_token": {
                  "type": "string",
                  "description": "The new access token to use."
                },
                "expires_in_ms": {
                  "type": "integer",
                  "description": "The lifetime of the access token, in milliseconds. If not\ngiven, the client can assume that the access token will not\nexpire."
                },
                "refresh_token": {
                  "type": "string",
                  "description": "The new refresh token to use when the access token needs to\nbe refreshed again. If not given, the old refresh token can\nbe re-used."
                }
              }
            },
            "examples": {
              "application/json": {
                "access_token": "a_new_token",
                "expires_in_ms": 60000,
                "refresh_token": "another_new_token"
              }
            }
          },
          "401": {
            "description": "The provided token was unknown, or has already been used.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_UNKNOWN_TOKEN",
                "error": "Soft logged out",
                "soft_logout": true
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "x-addedInMatrixVersion": "1.3"
      }
    },
    "/_matrix/client/v3/register": {
      "post": {
        "tags": [
          "Account management"
        ],
        "summary": "Register for an account on this homeserver.",
        "description": "This API endpoint uses the [User-Interactive Authentication API](https://spec.matrix.org/v1.5/client-server-api/#user-interactive-authentication-api), except in\nthe cases where a guest account is being registered.\n\nRegister for an account on this homeserver.\n\nThere are two kinds of user account:\n\n- `user` accounts. These accounts may use the full API described in this specification.\n\n- `guest` accounts. These accounts may have limited permissions and may not be supported by all servers.\n\nIf registration is successful, this endpoint will issue an access token\nthe client can use to authorize itself in subsequent requests.\n\nIf the client does not supply a `device_id`, the server must\nauto-generate one.\n\nThe server SHOULD register an account with a User ID based on the\n`username` provided, if any. Note that the grammar of Matrix User ID\nlocalparts is restricted, so the server MUST either map the provided\n`username` onto a `user_id` in a logical manner, or reject\n`username`\\s which do not comply to the grammar, with\n`M_INVALID_USERNAME`.\n\nMatrix clients MUST NOT assume that localpart of the registered\n`user_id` matches the provided `username`.\n\nThe returned access token must be associated with the `device_id`\nsupplied by the client or generated by the server. The server may\ninvalidate any access token previously associated with that device. See\n[Relationship between access tokens and devices](https://spec.matrix.org/v1.5/client-server-api/#relationship-between-access-tokens-and-devices).\n\nWhen registering a guest account, all parameters in the request body\nwith the exception of `initial_device_display_name` MUST BE ignored\nby the server. The server MUST pick a `device_id` for the account\nregardless of input.\n\nAny user ID returned by this API must conform to the grammar given in the\n[Matrix specification](https://spec.matrix.org/v1.5/appendices/#user-identifiers).",
        "operationId": "register",
        "parameters": [
          {
            "type": "string",
            "name": "kind",
            "in": "query",
            "description": "The kind of account to register. Defaults to `user`.",
            "default": "user",
            "enum": [
              "guest",
              "user"
            ],
            "x-example": "user"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "auth": {
                  "description": "Additional authentication information for the\nuser-interactive authentication API. Note that this\ninformation is *not* used to define how the registered user\nshould be authenticated, but is instead used to\nauthenticate the `register` call itself.",
                  "allOf": [
                    {
                      "title": "Authentication Data",
                      "type": "object",
                      "description": "Used by clients to submit authentication information to the interactive-authentication API",
                      "example": {
                        "example_credential": "verypoorsharedsecret",
                        "session": "xxxxx",
                        "type": "example.type.foo"
                      },
                      "additionalProperties": {
                        "description": "Keys dependent on the login type"
                      },
                      "properties": {
                        "session": {
                          "type": "string",
                          "description": "The value of the session key given by the homeserver."
                        },
                        "type": {
                          "type": "string",
                          "description": "The authentication type that the client is attempting to complete.\nMay be omitted if `session` is given, and the client is reissuing a\nrequest which it believes has been completed out-of-band (for example,\nvia the [fallback mechanism](#fallback))."
                        }
                      }
                    }
                  ]
                },
                "device_id": {
                  "type": "string",
                  "description": "ID of the client device. If this does not correspond to a\nknown client device, a new device will be created. The server\nwill auto-generate a device_id if this is not specified.",
                  "example": "GHTYAJCE"
                },
                "inhibit_login": {
                  "type": "boolean",
                  "description": "If true, an `access_token` and `device_id` should not be\nreturned from this call, therefore preventing an automatic\nlogin. Defaults to false.",
                  "example": false
                },
                "initial_device_display_name": {
                  "type": "string",
                  "description": "A display name to assign to the newly-created device. Ignored\nif `device_id` corresponds to a known device.",
                  "example": "Jungle Phone"
                },
                "password": {
                  "type": "string",
                  "description": "The desired password for the account.",
                  "example": "ilovebananas"
                },
                "refresh_token": {
                  "type": "boolean",
                  "description": "If true, the client supports refresh tokens.",
                  "x-addedInMatrixVersion": "1.3"
                },
                "username": {
                  "type": "string",
                  "description": "The basis for the localpart of the desired Matrix ID. If omitted,\nthe homeserver MUST generate a Matrix ID local part.",
                  "example": "cheeky_monkey"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The account has been registered.",
            "schema": {
              "type": "object",
              "required": [
                "user_id"
              ],
              "properties": {
                "access_token": {
                  "type": "string",
                  "description": "An access token for the account.\nThis access token can then be used to authorize other requests.\nRequired if the `inhibit_login` option is false."
                },
                "device_id": {
                  "type": "string",
                  "description": "ID of the registered device. Will be the same as the\ncorresponding parameter in the request, if one was specified.\nRequired if the `inhibit_login` option is false."
                },
                "expires_in_ms": {
                  "type": "integer",
                  "description": "The lifetime of the access token, in milliseconds. Once\nthe access token has expired a new access token can be\nobtained by using the provided refresh token. If no\nrefresh token is provided, the client will need to re-log in\nto obtain a new access token. If not given, the client can\nassume that the access token will not expire.\n\nOmitted if the `inhibit_login` option is true.",
                  "x-addedInMatrixVersion": "1.3"
                },
                "home_server": {
                  "type": "string",
                  "description": "The server_name of the homeserver on which the account has\nbeen registered.\n\n**Deprecated**. Clients should extract the server_name from\n`user_id` (by splitting at the first colon) if they require\nit. Note also that `homeserver` is not spelt this way."
                },
                "refresh_token": {
                  "type": "string",
                  "description": "A refresh token for the account. This token can be used to\nobtain a new access token when it expires by calling the\n`/refresh` endpoint.\n\nOmitted if the `inhibit_login` option is true.",
                  "x-addedInMatrixVersion": "1.3"
                },
                "user_id": {
                  "type": "string",
                  "description": "The fully-qualified Matrix user ID (MXID) that has been registered.\n\nAny user ID returned by this API must conform to the grammar given in the\n[Matrix specification](https://spec.matrix.org/v1.5/appendices/#user-identifiers)."
                }
              }
            },
            "examples": {
              "application/json": {
                "access_token": "abc123",
                "device_id": "GHTYAJCE",
                "user_id": "@cheeky_monkey:matrix.org"
              }
            }
          },
          "400": {
            "description": "Part of the request was invalid. This may include one of the following error codes:\n\n* `M_USER_IN_USE` : The desired user ID is already taken.\n* `M_INVALID_USERNAME` : The desired user ID is not a valid user name.\n* `M_EXCLUSIVE` : The desired user ID is in the exclusive namespace\n  claimed by an application service.\n\nThese errors may be returned at any stage of the registration process,\nincluding after authentication if the requested user ID was registered\nwhilst the client was performing authentication.\n\nHomeservers MUST perform the relevant checks and return these codes before\nperforming User-Interactive Authentication, although they may also return\nthem after authentication is completed if, for example, the requested user ID\nwas registered whilst the client was performing authentication.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_USER_IN_USE",
                "error": "Desired user ID is already taken."
              }
            }
          },
          "401": {
            "description": "The homeserver requires additional authentication information.",
            "schema": {
              "title": "Authentication response",
              "type": "object",
              "description": "Used by servers to indicate that additional authentication information is required,",
              "required": [
                "flows"
              ],
              "properties": {
                "completed": {
                  "type": "array",
                  "description": "A list of the stages the client has completed successfully",
                  "items": {
                    "type": "string",
                    "example": "example.type.foo"
                  }
                },
                "flows": {
                  "type": "array",
                  "description": "A list of the login flows supported by the server for this API.",
                  "items": {
                    "title": "Flow information",
                    "type": "object",
                    "required": [
                      "stages"
                    ],
                    "properties": {
                      "stages": {
                        "type": "array",
                        "description": "The login type of each of the stages required to complete this\nauthentication flow",
                        "items": {
                          "type": "string",
                          "example": "example.type.foo"
                        }
                      }
                    }
                  }
                },
                "params": {
                  "type": "object",
                  "description": "Contains any information that the client will need to know in order to\nuse a given type of authentication. For each login type presented,\nthat type may be present as a key in this dictionary. For example, the\npublic part of an OAuth client ID could be given here.",
                  "example": {
                    "example.type.baz": {
                      "example_key": "foobar"
                    }
                  },
                  "additionalProperties": {
                    "type": "object"
                  }
                },
                "session": {
                  "type": "string",
                  "description": "This is a session identifier that the client must pass back to the home\nserver, if one is provided, in subsequent attempts to authenticate in the\nsame API call.",
                  "example": "xxxxxxyz"
                }
              }
            }
          },
          "403": {
            "description": "The homeserver does not permit registering the account. This response\ncan be used to identify that a particular `kind` of account is not\nallowed, or that registration is generally not supported by the homeserver.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_FORBIDDEN",
                "error": "Registration is disabled"
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        }
      }
    },
    "/_matrix/client/v3/register/available": {
      "get": {
        "tags": [
          "Account management"
        ],
        "summary": "Checks to see if a username is available on the server.",
        "description": "Checks to see if a username is available, and valid, for the server.\n\nThe server should check to ensure that, at the time of the request, the\nusername requested is available for use. This includes verifying that an\napplication service has not claimed the username and that the username\nfits the server's desired requirements (for example, a server could dictate\nthat it does not permit usernames with underscores).\n\nMatrix clients may wish to use this API prior to attempting registration,\nhowever the clients must also be aware that using this API does not normally\nreserve the username. This can mean that the username becomes unavailable\nbetween checking its availability and attempting to register it.",
        "operationId": "checkUsernameAvailability",
        "parameters": [
          {
            "type": "string",
            "name": "username",
            "in": "query",
            "required": true,
            "description": "The username to check the availability of.",
            "default": "my_cool_localpart",
            "x-example": "my_cool_localpart"
          }
        ],
        "responses": {
          "200": {
            "description": "The username is available",
            "schema": {
              "type": "object",
              "properties": {
                "available": {
                  "type": "boolean",
                  "description": "A flag to indicate that the username is available. This should always\nbe `true` when the server replies with 200 OK."
                }
              }
            },
            "examples": {
              "application/json": {
                "available": true
              }
            }
          },
          "400": {
            "description": "Part of the request was invalid or the username is not available. This may\ninclude one of the following error codes:\n\n* `M_USER_IN_USE` : The desired username is already taken.\n* `M_INVALID_USERNAME` : The desired username is not a valid user name.\n* `M_EXCLUSIVE` : The desired username is in the exclusive namespace\n  claimed by an application service.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_USER_IN_USE",
                "error": "Desired user ID is already taken."
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        }
      }
    },
    "/_matrix/client/v3/register/email/requestToken": {
      "post": {
        "tags": [
          "Account management"
        ],
        "summary": "Begins the validation process for an email to be used during registration.",
        "description": "The homeserver must check that the given email address is **not**\nalready associated with an account on this homeserver. The homeserver\nshould validate the email itself, either by sending a validation email\nitself or by using a service it has control over.",
        "operationId": "requestTokenToRegisterEmail",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "type": "object",
                  "example": {
                    "client_secret": "monkeys_are_GREAT",
                    "email": "foo@example.com",
                    "send_attempt": 1
                  },
                  "required": [
                    "client_secret",
                    "email",
                    "send_attempt"
                  ],
                  "properties": {
                    "client_secret": {
                      "type": "string",
                      "description": "A unique string generated by the client, and used to identify the\nvalidation attempt. It must be a string consisting of the characters\n`[0-9a-zA-Z.=_-]`. Its length must not exceed 255 characters and it\nmust not be empty.\n",
                      "example": "monkeys_are_GREAT"
                    },
                    "email": {
                      "type": "string",
                      "description": "The email address to validate.",
                      "example": "alice@example.org"
                    },
                    "next_link": {
                      "type": "string",
                      "description": "Optional. When the validation is completed, the identity server will\nredirect the user to this URL. This option is ignored when submitting\n3PID validation information through a POST request.",
                      "example": "https://example.org/congratulations.html"
                    },
                    "send_attempt": {
                      "type": "integer",
                      "description": "The server will only send an email if the `send_attempt`\nis a number greater than the most recent one which it has seen,\nscoped to that `email` + `client_secret` pair. This is to\navoid repeatedly sending the same email in the case of request\nretries between the POSTing user and the identity server.\nThe client should increment this value if they desire a new\nemail (e.g. a reminder) to be sent. If they do not, the server\nshould respond with success but not resend the email.",
                      "example": 1
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "id_access_token": {
                      "type": "string",
                      "description": "An access token previously registered with the identity server. Servers\ncan treat this as optional to distinguish between r0.5-compatible clients\nand this specification version.\n\nRequired if an `id_server` is supplied."
                    },
                    "id_server": {
                      "type": "string",
                      "description": "The hostname of the identity server to communicate with. May optionally\ninclude a port. This parameter is ignored when the homeserver handles\n3PID verification.\n\nThis parameter is deprecated with a plan to be removed in a future specification\nversion for `/account/password` and `/register` requests.",
                      "example": "id.example.com"
                    }
                  }
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An email has been sent to the specified address. Note that this\nmay be an email containing the validation token or it may be\ninforming the user of an error.",
            "schema": {
              "title": "RequestTokenResponse",
              "type": "object",
              "required": [
                "sid"
              ],
              "properties": {
                "sid": {
                  "type": "string",
                  "description": "The session ID. Session IDs are opaque strings that must consist entirely\nof the characters `[0-9a-zA-Z.=_-]`. Their length must not exceed 255\ncharacters and they must not be empty.",
                  "example": "123abc"
                },
                "submit_url": {
                  "type": "string",
                  "description": "An optional field containing a URL where the client must submit the\nvalidation token to, with identical parameters to the Identity Service\nAPI's `POST /validate/email/submitToken` endpoint (without the requirement\nfor an access token). The homeserver must send this token to the user (if\napplicable), who should then be prompted to provide it to the client.\n\nIf this field is not present, the client can assume that verification\nwill happen without the client's involvement provided the homeserver\nadvertises this specification version in the `/versions` response\n(ie: r0.5.0).",
                  "format": "uri",
                  "example": "https://example.org/path/to/submitToken"
                }
              }
            }
          },
          "400": {
            "description": "Part of the request was invalid. This may include one of the following error codes:\n\n* `M_THREEPID_IN_USE` : The email address is already registered to an account on this server.\n  However, if the homeserver has the ability to send email, it is recommended that the server\n  instead send an email to the user with instructions on how to reset their password.\n  This prevents malicious parties from being able to determine if a given email address\n  has an account on the homeserver in question.\n* `M_SERVER_NOT_TRUSTED` : The `id_server` parameter refers to an identity server\n  that is not trusted by this homeserver.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_THREEPID_IN_USE",
                "error": "The specified address is already in use"
              }
            }
          },
          "403": {
            "description": "The homeserver does not permit the address to be bound.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_THREEPID_DENIED",
                "error": "Third party identifier is not allowed"
              }
            }
          }
        }
      }
    },
    "/_matrix/client/v3/register/msisdn/requestToken": {
      "post": {
        "tags": [
          "Account management"
        ],
        "summary": "Requests a validation token be sent to the given phone number for the purpose of registering an account",
        "description": "The homeserver must check that the given phone number is **not**\nalready associated with an account on this homeserver. The homeserver\nshould validate the phone number itself, either by sending a validation\nmessage itself or by using a service it has control over.",
        "operationId": "requestTokenToRegisterMSISDN",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "type": "object",
                  "example": {
                    "client_secret": "monkeys_are_GREAT",
                    "country": "GB",
                    "phone_number": "07700900001",
                    "send_attempt": 1
                  },
                  "required": [
                    "client_secret",
                    "country",
                    "phone_number",
                    "send_attempt"
                  ],
                  "properties": {
                    "client_secret": {
                      "type": "string",
                      "description": "A unique string generated by the client, and used to identify the\nvalidation attempt. It must be a string consisting of the characters\n`[0-9a-zA-Z.=_-]`. Its length must not exceed 255 characters and it\nmust not be empty.\n",
                      "example": "monkeys_are_GREAT"
                    },
                    "country": {
                      "type": "string",
                      "description": "The two-letter uppercase ISO-3166-1 alpha-2 country code that the\nnumber in `phone_number` should be parsed as if it were dialled from.",
                      "example": "GB"
                    },
                    "next_link": {
                      "type": "string",
                      "description": "Optional. When the validation is completed, the identity server will\nredirect the user to this URL. This option is ignored when submitting\n3PID validation information through a POST request.",
                      "example": "https://example.org/congratulations.html"
                    },
                    "phone_number": {
                      "type": "string",
                      "description": "The phone number to validate.",
                      "example": "07700900001"
                    },
                    "send_attempt": {
                      "type": "integer",
                      "description": "The server will only send an SMS if the `send_attempt` is a\nnumber greater than the most recent one which it has seen,\nscoped to that `country` + `phone_number` + `client_secret`\ntriple. This is to avoid repeatedly sending the same SMS in\nthe case of request retries between the POSTing user and the\nidentity server. The client should increment this value if\nthey desire a new SMS (e.g. a reminder) to be sent.",
                      "example": 1
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "id_access_token": {
                      "type": "string",
                      "description": "An access token previously registered with the identity server. Servers\ncan treat this as optional to distinguish between r0.5-compatible clients\nand this specification version.\n\nRequired if an `id_server` is supplied."
                    },
                    "id_server": {
                      "type": "string",
                      "description": "The hostname of the identity server to communicate with. May optionally\ninclude a port. This parameter is ignored when the homeserver handles\n3PID verification.\n\nThis parameter is deprecated with a plan to be removed in a future specification\nversion for `/account/password` and `/register` requests.",
                      "example": "id.example.com"
                    }
                  }
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An SMS message has been sent to the specified phone number. Note\nthat this may be an SMS message containing the validation token or\nit may be informing the user of an error.",
            "schema": {
              "title": "RequestTokenResponse",
              "type": "object",
              "required": [
                "sid"
              ],
              "properties": {
                "sid": {
                  "type": "string",
                  "description": "The session ID. Session IDs are opaque strings that must consist entirely\nof the characters `[0-9a-zA-Z.=_-]`. Their length must not exceed 255\ncharacters and they must not be empty.",
                  "example": "123abc"
                },
                "submit_url": {
                  "type": "string",
                  "description": "An optional field containing a URL where the client must submit the\nvalidation token to, with identical parameters to the Identity Service\nAPI's `POST /validate/email/submitToken` endpoint (without the requirement\nfor an access token). The homeserver must send this token to the user (if\napplicable), who should then be prompted to provide it to the client.\n\nIf this field is not present, the client can assume that verification\nwill happen without the client's involvement provided the homeserver\nadvertises this specification version in the `/versions` response\n(ie: r0.5.0).",
                  "format": "uri",
                  "example": "https://example.org/path/to/submitToken"
                }
              }
            }
          },
          "400": {
            "description": "Part of the request was invalid. This may include one of the following error codes:\n\n* `M_THREEPID_IN_USE` : The phone number is already registered to an account on this server.\n  However, if the homeserver has the ability to send SMS message, it is recommended that the server\n  instead send an SMS message to the user with instructions on how to reset their password.\n  This prevents malicious parties from being able to determine if a given phone number\n  has an account on the homeserver in question.\n* `M_SERVER_NOT_TRUSTED` : The `id_server` parameter refers to an identity server\n  that is not trusted by this homeserver.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_THREEPID_IN_USE",
                "error": "The specified address is already in use"
              }
            }
          },
          "403": {
            "description": "The homeserver does not permit the address to be bound.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_THREEPID_DENIED",
                "error": "Third party identifier is not allowed"
              }
            }
          }
        }
      }
    },
    "/_matrix/client/v3/room_keys/keys": {
      "delete": {
        "tags": [
          "End-to-end encryption"
        ],
        "summary": "Delete the keys from the backup.",
        "description": "Delete the keys from the backup.",
        "operationId": "deleteRoomKeys",
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "query",
            "required": true,
            "description": "The backup from which to delete the key",
            "x-example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "The update succeeded",
            "schema": {
              "title": "RoomKeysUpdateResponse",
              "type": "object",
              "required": [
                "etag",
                "count"
              ],
              "properties": {
                "count": {
                  "type": "integer",
                  "description": "The number of keys stored in the backup",
                  "example": 10
                },
                "etag": {
                  "type": "string",
                  "description": "The new etag value representing stored keys in the backup.\nSee `GET /room_keys/version/{version}` for more details.",
                  "example": "abcdefg"
                }
              }
            }
          },
          "404": {
            "description": "The backup was not found.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "Unknown backup version"
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ],
        "x-addedInMatrixVersion": "1.1"
      },
      "get": {
        "tags": [
          "End-to-end encryption"
        ],
        "summary": "Retrieve the keys from the backup.",
        "description": "Retrieve the keys from the backup.",
        "operationId": "getRoomKeys",
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "query",
            "required": true,
            "description": "The backup from which to retrieve the keys.",
            "x-example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "The key data.  If no keys are found, then an object with an empty\n`rooms` property will be returned (`{\"rooms\": {}}`).",
            "schema": {
              "type": "object",
              "required": [
                "rooms"
              ],
              "properties": {
                "rooms": {
                  "type": "object",
                  "description": "A map of room IDs to room key backup data.",
                  "example": {
                    "!room:example.org": {
                      "sessions": {
                        "sessionid1": {
                          "first_message_index": 1,
                          "forwarded_count": 0,
                          "is_verified": true,
                          "session_data": {
                            "ciphertext": "base64+ciphertext+of+JSON+data",
                            "ephemeral": "base64+ephemeral+key",
                            "mac": "base64+mac+of+ciphertext"
                          }
                        }
                      }
                    }
                  },
                  "additionalProperties": {
                    "allOf": [
                      {
                        "title": "RoomKeyBackup",
                        "type": "object",
                        "description": "The backed up keys for a room.",
                        "required": [
                          "sessions"
                        ],
                        "properties": {
                          "sessions": {
                            "type": "object",
                            "description": "A map of session IDs to key data.",
                            "example": {
                              "sessionid1": {
                                "first_message_index": 1,
                                "forwarded_count": 0,
                                "is_verified": true,
                                "session_data": {
                                  "ciphertext": "base64+ciphertext+of+JSON+data",
                                  "ephemeral": "base64+ephemeral+key",
                                  "mac": "base64+mac+of+ciphertext"
                                }
                              }
                            },
                            "additionalProperties": {
                              "allOf": [
                                {
                                  "title": "KeyBackupData",
                                  "type": "object",
                                  "description": "The key data",
                                  "required": [
                                    "first_message_index",
                                    "forwarded_count",
                                    "is_verified",
                                    "session_data"
                                  ],
                                  "properties": {
                                    "first_message_index": {
                                      "type": "integer",
                                      "description": "The index of the first message in the session that the key can decrypt.",
                                      "example": 1
                                    },
                                    "forwarded_count": {
                                      "type": "integer",
                                      "description": "The number of times this key has been forwarded via key-sharing between devices.",
                                      "example": 0
                                    },
                                    "is_verified": {
                                      "type": "boolean",
                                      "description": "Whether the device backing up the key verified the device that the key\nis from.",
                                      "example": false
                                    },
                                    "session_data": {
                                      "type": "object",
                                      "description": "Algorithm-dependent data.  See the documentation for the backup\nalgorithms in [Server-side key backups](https://spec.matrix.org/v1.5/client-server-api/#server-side-key-backups) for more information on the\nexpected format of the data.",
                                      "example": {
                                        "ciphertext": "base64+ciphertext+of+JSON+data",
                                        "ephemeral": "base64+ephemeral+key",
                                        "mac": "base64+mac+of+ciphertext"
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "The backup was not found.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "Unknown backup version."
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ],
        "x-addedInMatrixVersion": "1.1"
      },
      "put": {
        "tags": [
          "End-to-end encryption"
        ],
        "summary": "Store several keys in the backup.",
        "description": "Store several keys in the backup.",
        "operationId": "putRoomKeys",
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "query",
            "required": true,
            "description": "The backup in which to store the keys. Must be the current backup.",
            "x-example": "1"
          },
          {
            "name": "backupData",
            "in": "body",
            "required": true,
            "description": "The backup data.",
            "schema": {
              "type": "object",
              "required": [
                "rooms"
              ],
              "properties": {
                "rooms": {
                  "type": "object",
                  "description": "A map of room IDs to room key backup data.",
                  "example": {
                    "!room:example.org": {
                      "sessions": {
                        "sessionid1": {
                          "first_message_index": 1,
                          "forwarded_count": 0,
                          "is_verified": true,
                          "session_data": {
                            "ciphertext": "base64+ciphertext+of+JSON+data",
                            "ephemeral": "base64+ephemeral+key",
                            "mac": "base64+mac+of+ciphertext"
                          }
                        }
                      }
                    }
                  },
                  "additionalProperties": {
                    "allOf": [
                      {
                        "title": "RoomKeyBackup",
                        "type": "object",
                        "description": "The backed up keys for a room.",
                        "required": [
                          "sessions"
                        ],
                        "properties": {
                          "sessions": {
                            "type": "object",
                            "description": "A map of session IDs to key data.",
                            "example": {
                              "sessionid1": {
                                "first_message_index": 1,
                                "forwarded_count": 0,
                                "is_verified": true,
                                "session_data": {
                                  "ciphertext": "base64+ciphertext+of+JSON+data",
                                  "ephemeral": "base64+ephemeral+key",
                                  "mac": "base64+mac+of+ciphertext"
                                }
                              }
                            },
                            "additionalProperties": {
                              "allOf": [
                                {
                                  "title": "KeyBackupData",
                                  "type": "object",
                                  "description": "The key data",
                                  "required": [
                                    "first_message_index",
                                    "forwarded_count",
                                    "is_verified",
                                    "session_data"
                                  ],
                                  "properties": {
                                    "first_message_index": {
                                      "type": "integer",
                                      "description": "The index of the first message in the session that the key can decrypt.",
                                      "example": 1
                                    },
                                    "forwarded_count": {
                                      "type": "integer",
                                      "description": "The number of times this key has been forwarded via key-sharing between devices.",
                                      "example": 0
                                    },
                                    "is_verified": {
                                      "type": "boolean",
                                      "description": "Whether the device backing up the key verified the device that the key\nis from.",
                                      "example": false
                                    },
                                    "session_data": {
                                      "type": "object",
                                      "description": "Algorithm-dependent data.  See the documentation for the backup\nalgorithms in [Server-side key backups](https://spec.matrix.org/v1.5/client-server-api/#server-side-key-backups) for more information on the\nexpected format of the data.",
                                      "example": {
                                        "ciphertext": "base64+ciphertext+of+JSON+data",
                                        "ephemeral": "base64+ephemeral+key",
                                        "mac": "base64+mac+of+ciphertext"
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The update succeeded",
            "schema": {
              "title": "RoomKeysUpdateResponse",
              "type": "object",
              "required": [
                "etag",
                "count"
              ],
              "properties": {
                "count": {
                  "type": "integer",
                  "description": "The number of keys stored in the backup",
                  "example": 10
                },
                "etag": {
                  "type": "string",
                  "description": "The new etag value representing stored keys in the backup.\nSee `GET /room_keys/version/{version}` for more details.",
                  "example": "abcdefg"
                }
              }
            }
          },
          "403": {
            "description": "The version specified does not match the current backup version.\nThe current version will be included in the `current_version`\nfield.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "current_version": "42",
                "errcode": "M_WRONG_ROOM_KEYS_VERSION",
                "error": "Wrong backup version."
              }
            }
          },
          "404": {
            "description": "The backup was not found.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "Unknown backup version"
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ],
        "x-addedInMatrixVersion": "1.1"
      }
    },
    "/_matrix/client/v3/room_keys/keys/{roomId}": {
      "delete": {
        "tags": [
          "End-to-end encryption"
        ],
        "summary": "Delete the keys from the backup for a given room.",
        "description": "Delete the keys from the backup for a given room.",
        "operationId": "deleteRoomKeysByRoomId",
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "query",
            "required": true,
            "description": "The backup from which to delete the key.",
            "x-example": "1"
          },
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The ID of the room that the specified key is for.",
            "x-example": "!roomid:example.org"
          }
        ],
        "responses": {
          "200": {
            "description": "The update succeeded",
            "schema": {
              "title": "RoomKeysUpdateResponse",
              "type": "object",
              "required": [
                "etag",
                "count"
              ],
              "properties": {
                "count": {
                  "type": "integer",
                  "description": "The number of keys stored in the backup",
                  "example": 10
                },
                "etag": {
                  "type": "string",
                  "description": "The new etag value representing stored keys in the backup.\nSee `GET /room_keys/version/{version}` for more details.",
                  "example": "abcdefg"
                }
              }
            }
          },
          "404": {
            "description": "The backup was not found.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "Unknown backup version"
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ],
        "x-addedInMatrixVersion": "1.1"
      },
      "get": {
        "tags": [
          "End-to-end encryption"
        ],
        "summary": "Retrieve the keys from the backup for a given room.",
        "description": "Retrieve the keys from the backup for a given room.",
        "operationId": "getRoomKeysByRoomId",
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "query",
            "required": true,
            "description": "The backup from which to retrieve the key.",
            "x-example": "1"
          },
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The ID of the room that the requested key is for.",
            "x-example": "!roomid:example.org"
          }
        ],
        "responses": {
          "200": {
            "description": "The key data.  If no keys are found, then an object with an empty\n`sessions` property will be returned (`{\"sessions\": {}}`).",
            "schema": {
              "title": "RoomKeyBackup",
              "type": "object",
              "description": "The backed up keys for a room.",
              "required": [
                "sessions"
              ],
              "properties": {
                "sessions": {
                  "type": "object",
                  "description": "A map of session IDs to key data.",
                  "example": {
                    "sessionid1": {
                      "first_message_index": 1,
                      "forwarded_count": 0,
                      "is_verified": true,
                      "session_data": {
                        "ciphertext": "base64+ciphertext+of+JSON+data",
                        "ephemeral": "base64+ephemeral+key",
                        "mac": "base64+mac+of+ciphertext"
                      }
                    }
                  },
                  "additionalProperties": {
                    "allOf": [
                      {
                        "title": "KeyBackupData",
                        "type": "object",
                        "description": "The key data",
                        "required": [
                          "first_message_index",
                          "forwarded_count",
                          "is_verified",
                          "session_data"
                        ],
                        "properties": {
                          "first_message_index": {
                            "type": "integer",
                            "description": "The index of the first message in the session that the key can decrypt.",
                            "example": 1
                          },
                          "forwarded_count": {
                            "type": "integer",
                            "description": "The number of times this key has been forwarded via key-sharing between devices.",
                            "example": 0
                          },
                          "is_verified": {
                            "type": "boolean",
                            "description": "Whether the device backing up the key verified the device that the key\nis from.",
                            "example": false
                          },
                          "session_data": {
                            "type": "object",
                            "description": "Algorithm-dependent data.  See the documentation for the backup\nalgorithms in [Server-side key backups](https://spec.matrix.org/v1.5/client-server-api/#server-side-key-backups) for more information on the\nexpected format of the data.",
                            "example": {
                              "ciphertext": "base64+ciphertext+of+JSON+data",
                              "ephemeral": "base64+ephemeral+key",
                              "mac": "base64+mac+of+ciphertext"
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "The backup was not found.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "Unknown backup version"
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ],
        "x-addedInMatrixVersion": "1.1"
      },
      "put": {
        "tags": [
          "End-to-end encryption"
        ],
        "summary": "Store several keys in the backup for a given room.",
        "description": "Store several keys in the backup for a given room.",
        "operationId": "putRoomKeysByRoomId",
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "query",
            "required": true,
            "description": "The backup in which to store the keys. Must be the current backup.",
            "x-example": "1"
          },
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The ID of the room that the keys are for.",
            "x-example": "!roomid:example.org"
          },
          {
            "name": "backupData",
            "in": "body",
            "required": true,
            "description": "The backup data",
            "schema": {
              "title": "RoomKeyBackup",
              "type": "object",
              "description": "The backed up keys for a room.",
              "required": [
                "sessions"
              ],
              "properties": {
                "sessions": {
                  "type": "object",
                  "description": "A map of session IDs to key data.",
                  "example": {
                    "sessionid1": {
                      "first_message_index": 1,
                      "forwarded_count": 0,
                      "is_verified": true,
                      "session_data": {
                        "ciphertext": "base64+ciphertext+of+JSON+data",
                        "ephemeral": "base64+ephemeral+key",
                        "mac": "base64+mac+of+ciphertext"
                      }
                    }
                  },
                  "additionalProperties": {
                    "allOf": [
                      {
                        "title": "KeyBackupData",
                        "type": "object",
                        "description": "The key data",
                        "required": [
                          "first_message_index",
                          "forwarded_count",
                          "is_verified",
                          "session_data"
                        ],
                        "properties": {
                          "first_message_index": {
                            "type": "integer",
                            "description": "The index of the first message in the session that the key can decrypt.",
                            "example": 1
                          },
                          "forwarded_count": {
                            "type": "integer",
                            "description": "The number of times this key has been forwarded via key-sharing between devices.",
                            "example": 0
                          },
                          "is_verified": {
                            "type": "boolean",
                            "description": "Whether the device backing up the key verified the device that the key\nis from.",
                            "example": false
                          },
                          "session_data": {
                            "type": "object",
                            "description": "Algorithm-dependent data.  See the documentation for the backup\nalgorithms in [Server-side key backups](https://spec.matrix.org/v1.5/client-server-api/#server-side-key-backups) for more information on the\nexpected format of the data.",
                            "example": {
                              "ciphertext": "base64+ciphertext+of+JSON+data",
                              "ephemeral": "base64+ephemeral+key",
                              "mac": "base64+mac+of+ciphertext"
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The update succeeded",
            "schema": {
              "title": "RoomKeysUpdateResponse",
              "type": "object",
              "required": [
                "etag",
                "count"
              ],
              "properties": {
                "count": {
                  "type": "integer",
                  "description": "The number of keys stored in the backup",
                  "example": 10
                },
                "etag": {
                  "type": "string",
                  "description": "The new etag value representing stored keys in the backup.\nSee `GET /room_keys/version/{version}` for more details.",
                  "example": "abcdefg"
                }
              }
            }
          },
          "403": {
            "description": "The version specified does not match the current backup version.\nThe current version will be included in the `current_version`\nfield.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "current_version": "42",
                "errcode": "M_WRONG_ROOM_KEYS_VERSION",
                "error": "Wrong backup version."
              }
            }
          },
          "404": {
            "description": "The backup was not found.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "Unknown backup version"
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ],
        "x-addedInMatrixVersion": "1.1"
      }
    },
    "/_matrix/client/v3/room_keys/keys/{roomId}/{sessionId}": {
      "delete": {
        "tags": [
          "End-to-end encryption"
        ],
        "summary": "Delete a key from the backup.",
        "description": "Delete a key from the backup.",
        "operationId": "deleteRoomKeyBySessionId",
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "query",
            "required": true,
            "description": "The backup from which to delete the key",
            "x-example": "1"
          },
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The ID of the room that the specified key is for.",
            "x-example": "!roomid:example.org"
          },
          {
            "type": "string",
            "name": "sessionId",
            "in": "path",
            "required": true,
            "description": "The ID of the megolm session whose key is to be deleted.",
            "x-example": "sessionid"
          }
        ],
        "responses": {
          "200": {
            "description": "The update succeeded",
            "schema": {
              "title": "RoomKeysUpdateResponse",
              "type": "object",
              "required": [
                "etag",
                "count"
              ],
              "properties": {
                "count": {
                  "type": "integer",
                  "description": "The number of keys stored in the backup",
                  "example": 10
                },
                "etag": {
                  "type": "string",
                  "description": "The new etag value representing stored keys in the backup.\nSee `GET /room_keys/version/{version}` for more details.",
                  "example": "abcdefg"
                }
              }
            }
          },
          "404": {
            "description": "The backup was not found.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "Unknown backup version"
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ],
        "x-addedInMatrixVersion": "1.1"
      },
      "get": {
        "tags": [
          "End-to-end encryption"
        ],
        "summary": "Retrieve a key from the backup.",
        "description": "Retrieve a key from the backup.",
        "operationId": "getRoomKeyBySessionId",
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "query",
            "required": true,
            "description": "The backup from which to retrieve the key.",
            "x-example": "1"
          },
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The ID of the room that the requested key is for.",
            "x-example": "!roomid:example.org"
          },
          {
            "type": "string",
            "name": "sessionId",
            "in": "path",
            "required": true,
            "description": "The ID of the megolm session whose key is requested.",
            "x-example": "sessionid"
          }
        ],
        "responses": {
          "200": {
            "description": "The key data",
            "schema": {
              "title": "KeyBackupData",
              "type": "object",
              "description": "The key data",
              "required": [
                "first_message_index",
                "forwarded_count",
                "is_verified",
                "session_data"
              ],
              "properties": {
                "first_message_index": {
                  "type": "integer",
                  "description": "The index of the first message in the session that the key can decrypt.",
                  "example": 1
                },
                "forwarded_count": {
                  "type": "integer",
                  "description": "The number of times this key has been forwarded via key-sharing between devices.",
                  "example": 0
                },
                "is_verified": {
                  "type": "boolean",
                  "description": "Whether the device backing up the key verified the device that the key\nis from.",
                  "example": false
                },
                "session_data": {
                  "type": "object",
                  "description": "Algorithm-dependent data.  See the documentation for the backup\nalgorithms in [Server-side key backups](https://spec.matrix.org/v1.5/client-server-api/#server-side-key-backups) for more information on the\nexpected format of the data.",
                  "example": {
                    "ciphertext": "base64+ciphertext+of+JSON+data",
                    "ephemeral": "base64+ephemeral+key",
                    "mac": "base64+mac+of+ciphertext"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The key or backup was not found.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "Key not found."
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ],
        "x-addedInMatrixVersion": "1.1"
      },
      "put": {
        "tags": [
          "End-to-end encryption"
        ],
        "summary": "Store a key in the backup.",
        "description": "Store a key in the backup.",
        "operationId": "putRoomKeyBySessionId",
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "query",
            "required": true,
            "description": "The backup in which to store the key. Must be the current backup.",
            "x-example": "1"
          },
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The ID of the room that the key is for.",
            "x-example": "!roomid:example.org"
          },
          {
            "type": "string",
            "name": "sessionId",
            "in": "path",
            "required": true,
            "description": "The ID of the megolm session that the key is for.",
            "x-example": "sessionid"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "description": "The key data.",
            "schema": {
              "title": "KeyBackupData",
              "type": "object",
              "description": "The key data",
              "required": [
                "first_message_index",
                "forwarded_count",
                "is_verified",
                "session_data"
              ],
              "properties": {
                "first_message_index": {
                  "type": "integer",
                  "description": "The index of the first message in the session that the key can decrypt.",
                  "example": 1
                },
                "forwarded_count": {
                  "type": "integer",
                  "description": "The number of times this key has been forwarded via key-sharing between devices.",
                  "example": 0
                },
                "is_verified": {
                  "type": "boolean",
                  "description": "Whether the device backing up the key verified the device that the key\nis from.",
                  "example": false
                },
                "session_data": {
                  "type": "object",
                  "description": "Algorithm-dependent data.  See the documentation for the backup\nalgorithms in [Server-side key backups](https://spec.matrix.org/v1.5/client-server-api/#server-side-key-backups) for more information on the\nexpected format of the data.",
                  "example": {
                    "ciphertext": "base64+ciphertext+of+JSON+data",
                    "ephemeral": "base64+ephemeral+key",
                    "mac": "base64+mac+of+ciphertext"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The update succeeded.",
            "schema": {
              "title": "RoomKeysUpdateResponse",
              "type": "object",
              "required": [
                "etag",
                "count"
              ],
              "properties": {
                "count": {
                  "type": "integer",
                  "description": "The number of keys stored in the backup",
                  "example": 10
                },
                "etag": {
                  "type": "string",
                  "description": "The new etag value representing stored keys in the backup.\nSee `GET /room_keys/version/{version}` for more details.",
                  "example": "abcdefg"
                }
              }
            }
          },
          "403": {
            "description": "The version specified does not match the current backup version.\nThe current version will be included in the `current_version`\nfield.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "current_version": "42",
                "errcode": "M_WRONG_ROOM_KEYS_VERSION",
                "error": "Wrong backup version."
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ],
        "x-addedInMatrixVersion": "1.1"
      }
    },
    "/_matrix/client/v3/room_keys/version": {
      "get": {
        "tags": [
          "End-to-end encryption"
        ],
        "summary": "Get information about the latest backup version.",
        "description": "Get information about the latest backup version.",
        "operationId": "getRoomKeysVersionCurrent",
        "responses": {
          "200": {
            "description": "The information about the backup.",
            "schema": {
              "type": "object",
              "required": [
                "algorithm",
                "auth_data",
                "count",
                "etag",
                "version"
              ],
              "properties": {
                "algorithm": {
                  "type": "string",
                  "description": "The algorithm used for storing backups.",
                  "example": "m.megolm_backup.v1.curve25519-aes-sha2",
                  "enum": [
                    "m.megolm_backup.v1.curve25519-aes-sha2"
                  ]
                },
                "auth_data": {
                  "type": "object",
                  "description": "Algorithm-dependent data. See the documentation for the backup\nalgorithms in [Server-side key backups](https://spec.matrix.org/v1.5/client-server-api/#server-side-key-backups) for more information on the\nexpected format of the data.",
                  "example": {
                    "public_key": "abcdefg",
                    "signatures": {
                      "@alice:example.org": {
                        "ed25519:deviceid": "signature"
                      }
                    }
                  }
                },
                "count": {
                  "type": "integer",
                  "description": "The number of keys stored in the backup.",
                  "example": 42
                },
                "etag": {
                  "type": "string",
                  "description": "An opaque string representing stored keys in the backup.\nClients can compare it with the `etag` value they received\nin the request of their last key storage request.  If not\nequal, another client has modified the backup.",
                  "example": "anopaquestring"
                },
                "version": {
                  "type": "string",
                  "description": "The backup version.",
                  "example": "1"
                }
              }
            }
          },
          "404": {
            "description": "No backup exists.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "No current backup version"
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ],
        "x-addedInMatrixVersion": "1.1"
      },
      "post": {
        "tags": [
          "End-to-end encryption"
        ],
        "summary": "Create a new backup.",
        "description": "Creates a new backup.",
        "operationId": "postRoomKeysVersion",
        "parameters": [
          {
            "name": "version",
            "in": "body",
            "required": true,
            "description": "The backup configuration.",
            "schema": {
              "type": "object",
              "required": [
                "algorithm",
                "auth_data"
              ],
              "properties": {
                "algorithm": {
                  "type": "string",
                  "description": "The algorithm used for storing backups.",
                  "example": "m.megolm_backup.v1.curve25519-aes-sha2",
                  "enum": [
                    "m.megolm_backup.v1.curve25519-aes-sha2"
                  ]
                },
                "auth_data": {
                  "type": "object",
                  "description": "Algorithm-dependent data. See the documentation for the backup\nalgorithms in [Server-side key backups](https://spec.matrix.org/v1.5/client-server-api/#server-side-key-backups) for more information on the\nexpected format of the data.",
                  "example": {
                    "public_key": "abcdefg",
                    "signatures": {
                      "@alice:example.org": {
                        "ed25519:deviceid": "signature"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The version id of the new backup.",
            "schema": {
              "type": "object",
              "required": [
                "version"
              ],
              "properties": {
                "version": {
                  "type": "string",
                  "description": "The backup version. This is an opaque string.",
                  "example": "1"
                }
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ],
        "x-addedInMatrixVersion": "1.1"
      }
    },
    "/_matrix/client/v3/room_keys/version/{version}": {
      "delete": {
        "tags": [
          "End-to-end encryption"
        ],
        "summary": "Delete an existing key backup.",
        "description": "Delete an existing key backup. Both the information about the backup,\nas well as all key data related to the backup will be deleted.",
        "operationId": "deleteRoomKeysVersion",
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "description": "The backup version to delete, as returned in the `version`\nparameter in the response of\n[`POST /_matrix/client/v3/room_keys/version`](https://spec.matrix.org/v1.5/client-server-api/#post_matrixclientv3room_keysversion)\nor [`GET /_matrix/client/v3/room_keys/version/{version}`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3room_keysversionversion).",
            "x-example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "The delete succeeded, or the specified backup was previously\ndeleted.",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "The backup specified does not exist. If the backup was previously\ndeleted, the call should succeed rather than returning an error.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "Unknown backup version"
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ],
        "x-addedInMatrixVersion": "1.1"
      },
      "get": {
        "tags": [
          "End-to-end encryption"
        ],
        "summary": "Get information about an existing backup.",
        "description": "Get information about an existing backup.",
        "operationId": "getRoomKeysVersion",
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "description": "The backup version to get, as returned in the `version` parameter\nof the response in\n[`POST /_matrix/client/v3/room_keys/version`](https://spec.matrix.org/v1.5/client-server-api/#post_matrixclientv3room_keysversion)\nor this endpoint.",
            "x-example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "The information about the requested backup.",
            "schema": {
              "type": "object",
              "required": [
                "algorithm",
                "auth_data",
                "count",
                "etag",
                "version"
              ],
              "properties": {
                "algorithm": {
                  "type": "string",
                  "description": "The algorithm used for storing backups.",
                  "example": "m.megolm_backup.v1.curve25519-aes-sha2",
                  "enum": [
                    "m.megolm_backup.v1.curve25519-aes-sha2"
                  ]
                },
                "auth_data": {
                  "type": "object",
                  "description": "Algorithm-dependent data. See the documentation for the backup\nalgorithms in [Server-side key backups](https://spec.matrix.org/v1.5/client-server-api/#server-side-key-backups) for more information on the\nexpected format of the data.",
                  "example": {
                    "public_key": "abcdefg",
                    "signatures": {
                      "@alice:example.org": {
                        "ed25519:deviceid": "signature"
                      }
                    }
                  }
                },
                "count": {
                  "type": "integer",
                  "description": "The number of keys stored in the backup.",
                  "example": 42
                },
                "etag": {
                  "type": "string",
                  "description": "An opaque string representing stored keys in the backup.\nClients can compare it with the `etag` value they received\nin the request of their last key storage request.  If not\nequal, another client has modified the backup.",
                  "example": "anopaquestring"
                },
                "version": {
                  "type": "string",
                  "description": "The backup version.",
                  "example": "1"
                }
              }
            }
          },
          "404": {
            "description": "The backup specified does not exist.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "Unknown backup version"
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ],
        "x-addedInMatrixVersion": "1.1"
      },
      "put": {
        "tags": [
          "End-to-end encryption"
        ],
        "summary": "Update information about an existing backup.",
        "description": "Update information about an existing backup.  Only `auth_data` can be modified.",
        "operationId": "putRoomKeysVersion",
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "description": "The backup version to update, as returned in the `version`\nparameter in the response of\n[`POST /_matrix/client/v3/room_keys/version`](https://spec.matrix.org/v1.5/client-server-api/#post_matrixclientv3room_keysversion)\nor [`GET /_matrix/client/v3/room_keys/version/{version}`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3room_keysversionversion).",
            "x-example": "1"
          },
          {
            "name": "version",
            "in": "body",
            "required": true,
            "description": "The backup configuration",
            "schema": {
              "type": "object",
              "required": [
                "algorithm",
                "auth_data"
              ],
              "properties": {
                "algorithm": {
                  "type": "string",
                  "description": "The algorithm used for storing backups.  Must be the same as\nthe algorithm currently used by the backup.",
                  "example": "m.megolm_backup.v1.curve25519-aes-sha2",
                  "enum": [
                    "m.megolm_backup.v1.curve25519-aes-sha2"
                  ]
                },
                "auth_data": {
                  "type": "object",
                  "description": "Algorithm-dependent data. See the documentation for the backup\nalgorithms in [Server-side key backups](https://spec.matrix.org/v1.5/client-server-api/#server-side-key-backups) for more information on the\nexpected format of the data.",
                  "example": {
                    "public_key": "abcdefg",
                    "signatures": {
                      "@alice:example.org": {
                        "ed25519:deviceid": "signature"
                      }
                    }
                  }
                },
                "version": {
                  "type": "string",
                  "description": "The backup version.  If present, must be the same as the\nversion in the path parameter.",
                  "example": "1"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The update succeeded.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "400": {
            "description": "A parameter was incorrect.  For example, the `algorithm` does not\nmatch the current backup algorithm, or the `version` in the body\ndoes not match the `version` in the path.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_INVALID_PARAM",
                "error": "Algorithm does not match"
              }
            }
          },
          "404": {
            "description": "The backup specified does not exist.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "Unknown backup version"
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ],
        "x-addedInMatrixVersion": "1.1"
      }
    },
    "/_matrix/client/v3/rooms/{roomId}/aliases": {
      "get": {
        "tags": [
          "Room directory"
        ],
        "summary": "Get a list of local aliases on a given room.",
        "description": "Get a list of aliases maintained by the local server for the\ngiven room.\n\nThis endpoint can be called by users who are in the room (external\nusers receive an `M_FORBIDDEN` error response). If the room's\n`m.room.history_visibility` maps to `world_readable`, any\nuser can call this endpoint.\n\nServers may choose to implement additional access control checks here,\nsuch as allowing server administrators to view aliases regardless of\nmembership.\n\n**Note:**\nClients are recommended not to display this list of aliases prominently\nas they are not curated, unlike those listed in the `m.room.canonical_alias`\nstate event.",
        "operationId": "getLocalAliases",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room ID to find local aliases of.",
            "x-example": "!abc123:example.org"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of local aliases for the room.",
            "schema": {
              "type": "object",
              "required": [
                "aliases"
              ],
              "properties": {
                "aliases": {
                  "type": "array",
                  "description": "The server's local aliases on the room. Can be empty.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "aliases": [
                  "#somewhere:example.com",
                  "#another:example.com",
                  "#hat_trick:example.com"
                ]
              }
            }
          },
          "400": {
            "description": "The given `roomAlias` is not a valid room alias.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_INVALID_PARAM",
                "error": "Room alias invalid"
              }
            }
          },
          "403": {
            "description": "The user is not permitted to retrieve the list of local aliases for the room.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_FORBIDDEN",
                "error": "You are not a member of the room."
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/rooms/{roomId}/ban": {
      "post": {
        "tags": [
          "Room membership"
        ],
        "summary": "Ban a user in the room.",
        "description": "Ban a user in the room. If the user is currently in the room, also kick them.\n\nWhen a user is banned from a room, they may not join it or be invited to it until they are unbanned.\n\nThe caller must have the required power level in order to perform this operation.",
        "operationId": "ban",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room identifier (not alias) from which the user should be banned.",
            "x-example": "!e42d8c:matrix.org"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "reason": "Telling unfunny jokes",
                "user_id": "@cheeky_monkey:matrix.org"
              },
              "required": [
                "user_id"
              ],
              "properties": {
                "reason": {
                  "type": "string",
                  "description": "The reason the user has been banned. This will be supplied as the `reason` on the target's updated [`m.room.member`](https://spec.matrix.org/v1.5/client-server-api/#mroommember) event.",
                  "x-addedInMatrixVersion": "1.1"
                },
                "user_id": {
                  "type": "string",
                  "description": "The fully qualified user ID of the user being banned."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user has been kicked and banned from the room.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "403": {
            "description": "You do not have permission to ban the user from the room. A meaningful `errcode` and description error text will be returned. Example reasons for rejections are:\n\n- The banner is not currently in the room.\n- The banner's power level is insufficient to ban users from the room.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_FORBIDDEN",
                "error": "You do not have a high enough power level to ban from this room."
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/rooms/{roomId}/context/{eventId}": {
      "get": {
        "tags": [
          "Room participation"
        ],
        "summary": "Get events and state around the specified event.",
        "description": "This API returns a number of events that happened just before and\nafter the specified event. This allows clients to get the context\nsurrounding an event.\n\n*Note*: This endpoint supports lazy-loading of room member events. See\n[Lazy-loading room members](https://spec.matrix.org/v1.5/client-server-api/#lazy-loading-room-members) for more information.",
        "operationId": "getEventContext",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room to get events from.",
            "x-example": "!636q39766251:example.com"
          },
          {
            "type": "string",
            "name": "eventId",
            "in": "path",
            "required": true,
            "description": "The event to get context around.",
            "x-example": "$f3h4d129462ha:example.com"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query",
            "description": "The maximum number of events to return. Default: 10.",
            "x-example": 3
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query",
            "description": "A JSON `RoomEventFilter` to filter the returned events with. The\nfilter is only applied to `events_before`, `events_after`, and\n`state`. It is not applied to the `event` itself. The filter may\nbe applied before or/and after the `limit` parameter - whichever the\nhomeserver prefers.\n\nSee [Filtering](https://spec.matrix.org/v1.5/client-server-api/#filtering) for more information.",
            "x-example": "66696p746572"
          }
        ],
        "responses": {
          "200": {
            "description": "The events and state surrounding the requested event.",
            "schema": {
              "type": "object",
              "description": "The events and state surrounding the requested event.",
              "properties": {
                "end": {
                  "type": "string",
                  "description": "A token that can be used to paginate forwards with."
                },
                "event": {
                  "description": "Details of the requested event.",
                  "allOf": [
                    {
                      "title": "ClientEvent",
                      "type": "object",
                      "description": "The format used for events when they are returned from a homeserver to a client\nvia the Client-Server API, or sent to an Application Service via the Application Services API.",
                      "allOf": [
                        {
                          "title": "ClientEventWithoutRoomID",
                          "type": "object",
                          "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                          "required": [
                            "event_id",
                            "type",
                            "sender",
                            "origin_server_ts",
                            "content"
                          ],
                          "properties": {
                            "content": {
                              "type": "object",
                              "description": "The body of this event, as created by the client which sent it.",
                              "example": {
                                "membership": "join"
                              }
                            },
                            "event_id": {
                              "type": "string",
                              "description": "The globally unique identifier for this event.",
                              "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                            },
                            "origin_server_ts": {
                              "type": "integer",
                              "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                              "format": "int64",
                              "example": 1632489532305
                            },
                            "sender": {
                              "type": "string",
                              "description": "Contains the fully-qualified ID of the user who sent this event.",
                              "example": "@example:example.org"
                            },
                            "state_key": {
                              "type": "string",
                              "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                              "example": "@user:example.org"
                            },
                            "type": {
                              "type": "string",
                              "description": "The type of the event.",
                              "example": "m.room.member"
                            },
                            "unsigned": {
                              "title": "UnsignedData",
                              "type": "object",
                              "description": "Contains optional extra information about the event.",
                              "properties": {
                                "age": {
                                  "type": "integer",
                                  "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                  "format": "int64",
                                  "example": 1567437
                                },
                                "prev_content": {
                                  "title": "EventContent",
                                  "type": "object",
                                  "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                  "x-changedInMatrixVersion": {
                                    "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                  }
                                },
                                "redacted_because": {
                                  "title": "ClientEventWithoutRoomID",
                                  "type": "object",
                                  "description": "The event that redacted this event, if any.",
                                  "example": {
                                    "content": {
                                      "reason": "spam"
                                    },
                                    "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                    "origin_server_ts": 1632491098485,
                                    "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                    "sender": "@moderator:example.org",
                                    "type": "m.room.redaction",
                                    "unsigned": {
                                      "age": 1257
                                    }
                                  }
                                },
                                "transaction_id": {
                                  "type": "string",
                                  "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "room_id"
                          ],
                          "properties": {
                            "room_id": {
                              "type": "string",
                              "description": "The ID of the room associated with this event.",
                              "example": "!jEsUZKDJdhlrceRyVU:example.org"
                            },
                            "unsigned": {
                              "properties": {
                                "redacted_because": {
                                  "title": "ClientEvent",
                                  "example": {
                                    "content": {
                                      "reason": "spam"
                                    },
                                    "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                    "origin_server_ts": 1632491098485,
                                    "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                    "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                                    "sender": "@moderator:example.org",
                                    "type": "m.room.redaction",
                                    "unsigned": {
                                      "age": 1257
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  ]
                },
                "events_after": {
                  "type": "array",
                  "description": "A list of room events that happened just after the\nrequested event, in chronological order.",
                  "items": {
                    "title": "ClientEvent",
                    "type": "object",
                    "description": "The format used for events when they are returned from a homeserver to a client\nvia the Client-Server API, or sent to an Application Service via the Application Services API.",
                    "allOf": [
                      {
                        "title": "ClientEventWithoutRoomID",
                        "type": "object",
                        "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                        "required": [
                          "event_id",
                          "type",
                          "sender",
                          "origin_server_ts",
                          "content"
                        ],
                        "properties": {
                          "content": {
                            "type": "object",
                            "description": "The body of this event, as created by the client which sent it.",
                            "example": {
                              "membership": "join"
                            }
                          },
                          "event_id": {
                            "type": "string",
                            "description": "The globally unique identifier for this event.",
                            "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                          },
                          "origin_server_ts": {
                            "type": "integer",
                            "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                            "format": "int64",
                            "example": 1632489532305
                          },
                          "sender": {
                            "type": "string",
                            "description": "Contains the fully-qualified ID of the user who sent this event.",
                            "example": "@example:example.org"
                          },
                          "state_key": {
                            "type": "string",
                            "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                            "example": "@user:example.org"
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of the event.",
                            "example": "m.room.member"
                          },
                          "unsigned": {
                            "title": "UnsignedData",
                            "type": "object",
                            "description": "Contains optional extra information about the event.",
                            "properties": {
                              "age": {
                                "type": "integer",
                                "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                "format": "int64",
                                "example": 1567437
                              },
                              "prev_content": {
                                "title": "EventContent",
                                "type": "object",
                                "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                "x-changedInMatrixVersion": {
                                  "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                }
                              },
                              "redacted_because": {
                                "title": "ClientEventWithoutRoomID",
                                "type": "object",
                                "description": "The event that redacted this event, if any.",
                                "example": {
                                  "content": {
                                    "reason": "spam"
                                  },
                                  "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                  "origin_server_ts": 1632491098485,
                                  "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                  "sender": "@moderator:example.org",
                                  "type": "m.room.redaction",
                                  "unsigned": {
                                    "age": 1257
                                  }
                                }
                              },
                              "transaction_id": {
                                "type": "string",
                                "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                              }
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "room_id"
                        ],
                        "properties": {
                          "room_id": {
                            "type": "string",
                            "description": "The ID of the room associated with this event.",
                            "example": "!jEsUZKDJdhlrceRyVU:example.org"
                          },
                          "unsigned": {
                            "properties": {
                              "redacted_because": {
                                "title": "ClientEvent",
                                "example": {
                                  "content": {
                                    "reason": "spam"
                                  },
                                  "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                  "origin_server_ts": 1632491098485,
                                  "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                  "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                                  "sender": "@moderator:example.org",
                                  "type": "m.room.redaction",
                                  "unsigned": {
                                    "age": 1257
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "events_before": {
                  "type": "array",
                  "description": "A list of room events that happened just before the\nrequested event, in reverse-chronological order.",
                  "items": {
                    "title": "ClientEvent",
                    "type": "object",
                    "description": "The format used for events when they are returned from a homeserver to a client\nvia the Client-Server API, or sent to an Application Service via the Application Services API.",
                    "allOf": [
                      {
                        "title": "ClientEventWithoutRoomID",
                        "type": "object",
                        "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                        "required": [
                          "event_id",
                          "type",
                          "sender",
                          "origin_server_ts",
                          "content"
                        ],
                        "properties": {
                          "content": {
                            "type": "object",
                            "description": "The body of this event, as created by the client which sent it.",
                            "example": {
                              "membership": "join"
                            }
                          },
                          "event_id": {
                            "type": "string",
                            "description": "The globally unique identifier for this event.",
                            "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                          },
                          "origin_server_ts": {
                            "type": "integer",
                            "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                            "format": "int64",
                            "example": 1632489532305
                          },
                          "sender": {
                            "type": "string",
                            "description": "Contains the fully-qualified ID of the user who sent this event.",
                            "example": "@example:example.org"
                          },
                          "state_key": {
                            "type": "string",
                            "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                            "example": "@user:example.org"
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of the event.",
                            "example": "m.room.member"
                          },
                          "unsigned": {
                            "title": "UnsignedData",
                            "type": "object",
                            "description": "Contains optional extra information about the event.",
                            "properties": {
                              "age": {
                                "type": "integer",
                                "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                "format": "int64",
                                "example": 1567437
                              },
                              "prev_content": {
                                "title": "EventContent",
                                "type": "object",
                                "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                "x-changedInMatrixVersion": {
                                  "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                }
                              },
                              "redacted_because": {
                                "title": "ClientEventWithoutRoomID",
                                "type": "object",
                                "description": "The event that redacted this event, if any.",
                                "example": {
                                  "content": {
                                    "reason": "spam"
                                  },
                                  "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                  "origin_server_ts": 1632491098485,
                                  "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                  "sender": "@moderator:example.org",
                                  "type": "m.room.redaction",
                                  "unsigned": {
                                    "age": 1257
                                  }
                                }
                              },
                              "transaction_id": {
                                "type": "string",
                                "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                              }
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "room_id"
                        ],
                        "properties": {
                          "room_id": {
                            "type": "string",
                            "description": "The ID of the room associated with this event.",
                            "example": "!jEsUZKDJdhlrceRyVU:example.org"
                          },
                          "unsigned": {
                            "properties": {
                              "redacted_because": {
                                "title": "ClientEvent",
                                "example": {
                                  "content": {
                                    "reason": "spam"
                                  },
                                  "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                  "origin_server_ts": 1632491098485,
                                  "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                  "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                                  "sender": "@moderator:example.org",
                                  "type": "m.room.redaction",
                                  "unsigned": {
                                    "age": 1257
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "start": {
                  "type": "string",
                  "description": "A token that can be used to paginate backwards with."
                },
                "state": {
                  "type": "array",
                  "description": "The state of the room at the last event returned.",
                  "items": {
                    "title": "ClientEvent",
                    "type": "object",
                    "description": "The format used for events when they are returned from a homeserver to a client\nvia the Client-Server API, or sent to an Application Service via the Application Services API.",
                    "allOf": [
                      {
                        "title": "ClientEventWithoutRoomID",
                        "type": "object",
                        "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                        "required": [
                          "event_id",
                          "type",
                          "sender",
                          "origin_server_ts",
                          "content"
                        ],
                        "properties": {
                          "content": {
                            "type": "object",
                            "description": "The body of this event, as created by the client which sent it.",
                            "example": {
                              "membership": "join"
                            }
                          },
                          "event_id": {
                            "type": "string",
                            "description": "The globally unique identifier for this event.",
                            "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                          },
                          "origin_server_ts": {
                            "type": "integer",
                            "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                            "format": "int64",
                            "example": 1632489532305
                          },
                          "sender": {
                            "type": "string",
                            "description": "Contains the fully-qualified ID of the user who sent this event.",
                            "example": "@example:example.org"
                          },
                          "state_key": {
                            "type": "string",
                            "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                            "example": "@user:example.org"
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of the event.",
                            "example": "m.room.member"
                          },
                          "unsigned": {
                            "title": "UnsignedData",
                            "type": "object",
                            "description": "Contains optional extra information about the event.",
                            "properties": {
                              "age": {
                                "type": "integer",
                                "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                "format": "int64",
                                "example": 1567437
                              },
                              "prev_content": {
                                "title": "EventContent",
                                "type": "object",
                                "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                "x-changedInMatrixVersion": {
                                  "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                }
                              },
                              "redacted_because": {
                                "title": "ClientEventWithoutRoomID",
                                "type": "object",
                                "description": "The event that redacted this event, if any.",
                                "example": {
                                  "content": {
                                    "reason": "spam"
                                  },
                                  "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                  "origin_server_ts": 1632491098485,
                                  "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                  "sender": "@moderator:example.org",
                                  "type": "m.room.redaction",
                                  "unsigned": {
                                    "age": 1257
                                  }
                                }
                              },
                              "transaction_id": {
                                "type": "string",
                                "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                              }
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "room_id"
                        ],
                        "properties": {
                          "room_id": {
                            "type": "string",
                            "description": "The ID of the room associated with this event.",
                            "example": "!jEsUZKDJdhlrceRyVU:example.org"
                          },
                          "unsigned": {
                            "properties": {
                              "redacted_because": {
                                "title": "ClientEvent",
                                "example": {
                                  "content": {
                                    "reason": "spam"
                                  },
                                  "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                  "origin_server_ts": 1632491098485,
                                  "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                  "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                                  "sender": "@moderator:example.org",
                                  "type": "m.room.redaction",
                                  "unsigned": {
                                    "age": 1257
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "end": "t29-57_2_0_2",
                "event": {
                  "content": {
                    "body": "filename.jpg",
                    "info": {
                      "h": 398,
                      "mimetype": "image/jpeg",
                      "size": 31037,
                      "w": 394
                    },
                    "msgtype": "m.image",
                    "url": "mxc://example.org/JWEIFJgwEIhweiWJE"
                  },
                  "event_id": "$f3h4d129462ha:example.com",
                  "origin_server_ts": 1432735824653,
                  "room_id": "!636q39766251:example.com",
                  "sender": "@example:example.org",
                  "type": "m.room.message",
                  "unsigned": {
                    "age": 1234
                  }
                },
                "events_after": [
                  {
                    "content": {
                      "body": "This is an example text message",
                      "format": "org.matrix.custom.html",
                      "formatted_body": "<b>This is an example text message</b>",
                      "msgtype": "m.text"
                    },
                    "event_id": "$143273582443PhrSn:example.org",
                    "origin_server_ts": 1432735824653,
                    "room_id": "!636q39766251:example.com",
                    "sender": "@example:example.org",
                    "type": "m.room.message",
                    "unsigned": {
                      "age": 1234
                    }
                  }
                ],
                "events_before": [
                  {
                    "content": {
                      "body": "something-important.doc",
                      "filename": "something-important.doc",
                      "info": {
                        "mimetype": "application/msword",
                        "size": 46144
                      },
                      "msgtype": "m.file",
                      "url": "mxc://example.org/FHyPlCeYUSFFxlgbQYZmoEoe"
                    },
                    "event_id": "$143273582443PhrSn:example.org",
                    "origin_server_ts": 1432735824653,
                    "room_id": "!636q39766251:example.com",
                    "sender": "@example:example.org",
                    "type": "m.room.message",
                    "unsigned": {
                      "age": 1234
                    }
                  }
                ],
                "start": "t27-54_2_0_2",
                "state": [
                  {
                    "content": {
                      "creator": "@example:example.org",
                      "m.federate": true,
                      "predecessor": {
                        "event_id": "$something:example.org",
                        "room_id": "!oldroom:example.org"
                      },
                      "room_version": "1"
                    },
                    "event_id": "$143273582443PhrSn:example.org",
                    "origin_server_ts": 1432735824653,
                    "room_id": "!636q39766251:example.com",
                    "sender": "@example:example.org",
                    "state_key": "",
                    "type": "m.room.create",
                    "unsigned": {
                      "age": 1234
                    }
                  },
                  {
                    "content": {
                      "avatar_url": "mxc://example.org/SEsfnsuifSDFSSEF",
                      "displayname": "Alice Margatroid",
                      "membership": "join",
                      "reason": "Looking for support"
                    },
                    "event_id": "$143273582443PhrSn:example.org",
                    "origin_server_ts": 1432735824653,
                    "room_id": "!636q39766251:example.com",
                    "sender": "@example:example.org",
                    "state_key": "@alice:example.org",
                    "type": "m.room.member",
                    "unsigned": {
                      "age": 1234
                    }
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/rooms/{roomId}/event/{eventId}": {
      "get": {
        "tags": [
          "Room participation"
        ],
        "summary": "Get a single event by event ID.",
        "description": "Get a single event based on `roomId/eventId`. You must have permission to\nretrieve this event e.g. by being a member in the room for this event.",
        "operationId": "getOneRoomEvent",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The ID of the room the event is in.",
            "x-example": "!636q39766251:matrix.org"
          },
          {
            "type": "string",
            "name": "eventId",
            "in": "path",
            "required": true,
            "description": "The event ID to get.",
            "x-example": "$asfDuShaf7Gafaw:matrix.org"
          }
        ],
        "responses": {
          "200": {
            "description": "The full event.",
            "schema": {
              "title": "ClientEvent",
              "type": "object",
              "description": "The format used for events when they are returned from a homeserver to a client\nvia the Client-Server API, or sent to an Application Service via the Application Services API.",
              "allOf": [
                {
                  "title": "ClientEventWithoutRoomID",
                  "type": "object",
                  "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                  "required": [
                    "event_id",
                    "type",
                    "sender",
                    "origin_server_ts",
                    "content"
                  ],
                  "properties": {
                    "content": {
                      "type": "object",
                      "description": "The body of this event, as created by the client which sent it.",
                      "example": {
                        "membership": "join"
                      }
                    },
                    "event_id": {
                      "type": "string",
                      "description": "The globally unique identifier for this event.",
                      "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                    },
                    "origin_server_ts": {
                      "type": "integer",
                      "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                      "format": "int64",
                      "example": 1632489532305
                    },
                    "sender": {
                      "type": "string",
                      "description": "Contains the fully-qualified ID of the user who sent this event.",
                      "example": "@example:example.org"
                    },
                    "state_key": {
                      "type": "string",
                      "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                      "example": "@user:example.org"
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of the event.",
                      "example": "m.room.member"
                    },
                    "unsigned": {
                      "title": "UnsignedData",
                      "type": "object",
                      "description": "Contains optional extra information about the event.",
                      "properties": {
                        "age": {
                          "type": "integer",
                          "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                          "format": "int64",
                          "example": 1567437
                        },
                        "prev_content": {
                          "title": "EventContent",
                          "type": "object",
                          "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                          "x-changedInMatrixVersion": {
                            "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                          }
                        },
                        "redacted_because": {
                          "title": "ClientEventWithoutRoomID",
                          "type": "object",
                          "description": "The event that redacted this event, if any.",
                          "example": {
                            "content": {
                              "reason": "spam"
                            },
                            "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                            "origin_server_ts": 1632491098485,
                            "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                            "sender": "@moderator:example.org",
                            "type": "m.room.redaction",
                            "unsigned": {
                              "age": 1257
                            }
                          }
                        },
                        "transaction_id": {
                          "type": "string",
                          "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                        }
                      }
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "room_id"
                  ],
                  "properties": {
                    "room_id": {
                      "type": "string",
                      "description": "The ID of the room associated with this event.",
                      "example": "!jEsUZKDJdhlrceRyVU:example.org"
                    },
                    "unsigned": {
                      "properties": {
                        "redacted_because": {
                          "title": "ClientEvent",
                          "example": {
                            "content": {
                              "reason": "spam"
                            },
                            "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                            "origin_server_ts": 1632491098485,
                            "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                            "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                            "sender": "@moderator:example.org",
                            "type": "m.room.redaction",
                            "unsigned": {
                              "age": 1257
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": {
                "content": {
                  "body": "This is an example text message",
                  "format": "org.matrix.custom.html",
                  "formatted_body": "<b>This is an example text message</b>",
                  "msgtype": "m.text"
                },
                "event_id": "$143273582443PhrSn:example.org",
                "origin_server_ts": 1432735824653,
                "room_id": "!636q39766251:matrix.org",
                "sender": "@example:example.org",
                "type": "m.room.message",
                "unsigned": {
                  "age": 1234
                }
              }
            }
          },
          "404": {
            "description": "The event was not found or you do not have permission to read this event.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "Event not found."
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/rooms/{roomId}/forget": {
      "post": {
        "tags": [
          "Room membership"
        ],
        "summary": "Stop the requesting user remembering about a particular room.",
        "description": "This API stops a user remembering about a particular room.\n\nIn general, history is a first class citizen in Matrix. After this API\nis called, however, a user will no longer be able to retrieve history\nfor this room. If all users on a homeserver forget a room, the room is\neligible for deletion from that homeserver.\n\nIf the user is currently joined to the room, they must leave the room\nbefore calling this API.",
        "operationId": "forgetRoom",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room identifier to forget.",
            "x-example": "!au1ba7o:matrix.org"
          }
        ],
        "responses": {
          "200": {
            "description": "The room has been forgotten.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "400": {
            "description": "The user has not left the room",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_UNKNOWN",
                "error": "User @example:matrix.org is in room !au1ba7o:matrix.org"
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/rooms/{roomId}/initialSync": {
      "get": {
        "tags": [
          "Room participation"
        ],
        "summary": "Snapshot the current state of a room and its most recent messages.",
        "description": "Get a copy of the current state and the most recent messages in a room.\n\nThis endpoint was deprecated in r0 of this specification. There is no\ndirect replacement; the relevant information is returned by the\n[`/sync`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3sync) API. See the\n[migration guide](https://matrix.org/docs/guides/migrating-from-client-server-api-v-1#deprecated-endpoints).",
        "operationId": "roomInitialSync",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room to get the data.",
            "x-example": "!636q39766251:example.com"
          }
        ],
        "responses": {
          "200": {
            "description": "The current state of the room",
            "schema": {
              "title": "RoomInfo",
              "type": "object",
              "required": [
                "room_id"
              ],
              "properties": {
                "account_data": {
                  "type": "array",
                  "description": "The private data that this user has attached to this room.",
                  "items": {
                    "title": "Event",
                    "type": "object",
                    "allOf": [
                      {
                        "title": "Event",
                        "type": "object",
                        "description": "The basic set of fields all events must have.",
                        "required": [
                          "type",
                          "content"
                        ],
                        "properties": {
                          "content": {
                            "type": "object",
                            "description": "The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body."
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'"
                          }
                        }
                      }
                    ]
                  }
                },
                "membership": {
                  "type": "string",
                  "description": "The user's membership state in this room.",
                  "enum": [
                    "invite",
                    "join",
                    "leave",
                    "ban"
                  ]
                },
                "messages": {
                  "title": "PaginationChunk",
                  "type": "object",
                  "description": "The pagination chunk for this room.",
                  "required": [
                    "end",
                    "chunk"
                  ],
                  "properties": {
                    "chunk": {
                      "type": "array",
                      "description": "If the user is a member of the room this will be a\nlist of the most recent messages for this room. If\nthe user has left the room this will be the\nmessages that preceded them leaving. This array\nwill consist of at most `limit` elements.",
                      "items": {
                        "title": "ClientEvent",
                        "type": "object",
                        "description": "The format used for events when they are returned from a homeserver to a client\nvia the Client-Server API, or sent to an Application Service via the Application Services API.",
                        "allOf": [
                          {
                            "title": "ClientEventWithoutRoomID",
                            "type": "object",
                            "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                            "required": [
                              "event_id",
                              "type",
                              "sender",
                              "origin_server_ts",
                              "content"
                            ],
                            "properties": {
                              "content": {
                                "type": "object",
                                "description": "The body of this event, as created by the client which sent it.",
                                "example": {
                                  "membership": "join"
                                }
                              },
                              "event_id": {
                                "type": "string",
                                "description": "The globally unique identifier for this event.",
                                "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                              },
                              "origin_server_ts": {
                                "type": "integer",
                                "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                                "format": "int64",
                                "example": 1632489532305
                              },
                              "sender": {
                                "type": "string",
                                "description": "Contains the fully-qualified ID of the user who sent this event.",
                                "example": "@example:example.org"
                              },
                              "state_key": {
                                "type": "string",
                                "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                                "example": "@user:example.org"
                              },
                              "type": {
                                "type": "string",
                                "description": "The type of the event.",
                                "example": "m.room.member"
                              },
                              "unsigned": {
                                "title": "UnsignedData",
                                "type": "object",
                                "description": "Contains optional extra information about the event.",
                                "properties": {
                                  "age": {
                                    "type": "integer",
                                    "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                    "format": "int64",
                                    "example": 1567437
                                  },
                                  "prev_content": {
                                    "title": "EventContent",
                                    "type": "object",
                                    "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                    "x-changedInMatrixVersion": {
                                      "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                    }
                                  },
                                  "redacted_because": {
                                    "title": "ClientEventWithoutRoomID",
                                    "type": "object",
                                    "description": "The event that redacted this event, if any.",
                                    "example": {
                                      "content": {
                                        "reason": "spam"
                                      },
                                      "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                      "origin_server_ts": 1632491098485,
                                      "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                      "sender": "@moderator:example.org",
                                      "type": "m.room.redaction",
                                      "unsigned": {
                                        "age": 1257
                                      }
                                    }
                                  },
                                  "transaction_id": {
                                    "type": "string",
                                    "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "room_id"
                            ],
                            "properties": {
                              "room_id": {
                                "type": "string",
                                "description": "The ID of the room associated with this event.",
                                "example": "!jEsUZKDJdhlrceRyVU:example.org"
                              },
                              "unsigned": {
                                "properties": {
                                  "redacted_because": {
                                    "title": "ClientEvent",
                                    "example": {
                                      "content": {
                                        "reason": "spam"
                                      },
                                      "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                      "origin_server_ts": 1632491098485,
                                      "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                      "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                                      "sender": "@moderator:example.org",
                                      "type": "m.room.redaction",
                                      "unsigned": {
                                        "age": 1257
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "end": {
                      "type": "string",
                      "description": "A token which correlates to the end of `chunk`. Can be passed to\n[`/rooms/<room_id>/messages`](#get_matrixclientv3roomsroomidmessages)\nto retrieve later events."
                    },
                    "start": {
                      "type": "string",
                      "description": "A token which correlates to the start of `chunk`. Can be passed to\n[`/rooms/<room_id>/messages`](#get_matrixclientv3roomsroomidmessages)\nto retrieve earlier events.\n\nIf no earlier events are available, this property may be omitted from\nthe response."
                    }
                  }
                },
                "room_id": {
                  "type": "string",
                  "description": "The ID of this room."
                },
                "state": {
                  "type": "array",
                  "description": "If the user is a member of the room this will be the\ncurrent state of the room as a list of events. If the\nuser has left the room this will be the state of the\nroom when they left it.",
                  "items": {
                    "title": "ClientEvent",
                    "type": "object",
                    "description": "The format used for events when they are returned from a homeserver to a client\nvia the Client-Server API, or sent to an Application Service via the Application Services API.",
                    "allOf": [
                      {
                        "title": "ClientEventWithoutRoomID",
                        "type": "object",
                        "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                        "required": [
                          "event_id",
                          "type",
                          "sender",
                          "origin_server_ts",
                          "content"
                        ],
                        "properties": {
                          "content": {
                            "type": "object",
                            "description": "The body of this event, as created by the client which sent it.",
                            "example": {
                              "membership": "join"
                            }
                          },
                          "event_id": {
                            "type": "string",
                            "description": "The globally unique identifier for this event.",
                            "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                          },
                          "origin_server_ts": {
                            "type": "integer",
                            "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                            "format": "int64",
                            "example": 1632489532305
                          },
                          "sender": {
                            "type": "string",
                            "description": "Contains the fully-qualified ID of the user who sent this event.",
                            "example": "@example:example.org"
                          },
                          "state_key": {
                            "type": "string",
                            "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                            "example": "@user:example.org"
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of the event.",
                            "example": "m.room.member"
                          },
                          "unsigned": {
                            "title": "UnsignedData",
                            "type": "object",
                            "description": "Contains optional extra information about the event.",
                            "properties": {
                              "age": {
                                "type": "integer",
                                "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                "format": "int64",
                                "example": 1567437
                              },
                              "prev_content": {
                                "title": "EventContent",
                                "type": "object",
                                "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                "x-changedInMatrixVersion": {
                                  "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                }
                              },
                              "redacted_because": {
                                "title": "ClientEventWithoutRoomID",
                                "type": "object",
                                "description": "The event that redacted this event, if any.",
                                "example": {
                                  "content": {
                                    "reason": "spam"
                                  },
                                  "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                  "origin_server_ts": 1632491098485,
                                  "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                  "sender": "@moderator:example.org",
                                  "type": "m.room.redaction",
                                  "unsigned": {
                                    "age": 1257
                                  }
                                }
                              },
                              "transaction_id": {
                                "type": "string",
                                "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                              }
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "room_id"
                        ],
                        "properties": {
                          "room_id": {
                            "type": "string",
                            "description": "The ID of the room associated with this event.",
                            "example": "!jEsUZKDJdhlrceRyVU:example.org"
                          },
                          "unsigned": {
                            "properties": {
                              "redacted_because": {
                                "title": "ClientEvent",
                                "example": {
                                  "content": {
                                    "reason": "spam"
                                  },
                                  "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                  "origin_server_ts": 1632491098485,
                                  "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                  "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                                  "sender": "@moderator:example.org",
                                  "type": "m.room.redaction",
                                  "unsigned": {
                                    "age": 1257
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "visibility": {
                  "type": "string",
                  "description": "Whether this room is visible to the `/publicRooms` API\nor not.\"",
                  "enum": [
                    "private",
                    "public"
                  ]
                }
              }
            },
            "examples": {
              "application/json": {
                "account_data": [
                  {
                    "content": {
                      "tags": {
                        "work": {
                          "order": "1"
                        }
                      }
                    },
                    "type": "m.tag"
                  }
                ],
                "membership": "join",
                "messages": {
                  "chunk": [
                    {
                      "content": {
                        "body": "This is an example text message",
                        "format": "org.matrix.custom.html",
                        "formatted_body": "<b>This is an example text message</b>",
                        "msgtype": "m.text"
                      },
                      "event_id": "$143273582443PhrSn:example.org",
                      "origin_server_ts": 1432735824653,
                      "room_id": "!636q39766251:example.com",
                      "sender": "@example:example.org",
                      "type": "m.room.message",
                      "unsigned": {
                        "age": 1234
                      }
                    },
                    {
                      "content": {
                        "body": "something-important.doc",
                        "filename": "something-important.doc",
                        "info": {
                          "mimetype": "application/msword",
                          "size": 46144
                        },
                        "msgtype": "m.file",
                        "url": "mxc://example.org/FHyPlCeYUSFFxlgbQYZmoEoe"
                      },
                      "event_id": "$143273582443PhrSn:example.org",
                      "origin_server_ts": 1432735824653,
                      "room_id": "!636q39766251:example.com",
                      "sender": "@example:example.org",
                      "type": "m.room.message",
                      "unsigned": {
                        "age": 1234
                      }
                    }
                  ],
                  "end": "s3456_9_0",
                  "start": "t44-3453_9_0"
                },
                "room_id": "!636q39766251:example.com",
                "state": [
                  {
                    "content": {
                      "join_rule": "public"
                    },
                    "event_id": "$143273582443PhrSn:example.org",
                    "origin_server_ts": 1432735824653,
                    "room_id": "!636q39766251:example.com",
                    "sender": "@example:example.org",
                    "state_key": "",
                    "type": "m.room.join_rules",
                    "unsigned": {
                      "age": 1234
                    }
                  },
                  {
                    "content": {
                      "avatar_url": "mxc://example.org/SEsfnsuifSDFSSEF",
                      "displayname": "Alice Margatroid",
                      "membership": "join",
                      "reason": "Looking for support"
                    },
                    "event_id": "$143273582443PhrSn:example.org",
                    "origin_server_ts": 1432735824653,
                    "room_id": "!636q39766251:example.com",
                    "sender": "@example:example.org",
                    "state_key": "@alice:example.org",
                    "type": "m.room.member",
                    "unsigned": {
                      "age": 1234
                    }
                  },
                  {
                    "content": {
                      "creator": "@example:example.org",
                      "m.federate": true,
                      "predecessor": {
                        "event_id": "$something:example.org",
                        "room_id": "!oldroom:example.org"
                      },
                      "room_version": "1"
                    },
                    "event_id": "$143273582443PhrSn:example.org",
                    "origin_server_ts": 1432735824653,
                    "room_id": "!636q39766251:example.com",
                    "sender": "@example:example.org",
                    "state_key": "",
                    "type": "m.room.create",
                    "unsigned": {
                      "age": 1234
                    }
                  },
                  {
                    "content": {
                      "ban": 50,
                      "events": {
                        "m.room.name": 100,
                        "m.room.power_levels": 100
                      },
                      "events_default": 0,
                      "invite": 50,
                      "kick": 50,
                      "notifications": {
                        "room": 20
                      },
                      "redact": 50,
                      "state_default": 50,
                      "users": {
                        "@example:localhost": 100
                      },
                      "users_default": 0
                    },
                    "event_id": "$143273582443PhrSn:example.org",
                    "origin_server_ts": 1432735824653,
                    "room_id": "!636q39766251:example.com",
                    "sender": "@example:example.org",
                    "state_key": "",
                    "type": "m.room.power_levels",
                    "unsigned": {
                      "age": 1234
                    }
                  }
                ],
                "visibility": "private"
              }
            }
          },
          "403": {
            "description": "You aren't a member of the room and weren't previously a member of the room.\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/rooms/{roomId}/invite": {
      "post": {
        "tags": [
          "Room membership"
        ],
        "summary": "Invite a user to participate in a particular room.",
        "description": "*Note that there are two forms of this API, which are documented separately.\nThis version of the API does not require that the inviter know the Matrix\nidentifier of the invitee, and instead relies on third party identifiers.\nThe homeserver uses an identity server to perform the mapping from\nthird party identifier to a Matrix identifier. The other is documented in the*\n[joining rooms section](https://spec.matrix.org/v1.5/client-server-api/#post_matrixclientv3roomsroomidinvite).\n\nThis API invites a user to participate in a particular room.\nThey do not start participating in the room until they actually join the\nroom.\n\nOnly users currently in a particular room can invite other users to\njoin that room.\n\nIf the identity server did know the Matrix user identifier for the\nthird party identifier, the homeserver will append a `m.room.member`\nevent to the room.\n\nIf the identity server does not know a Matrix user identifier for the\npassed third party identifier, the homeserver will issue an invitation\nwhich can be accepted upon providing proof of ownership of the third\nparty identifier. This is achieved by the identity server generating a\ntoken, which it gives to the inviting homeserver. The homeserver will\nadd an `m.room.third_party_invite` event into the graph for the room,\ncontaining that token.\n\nWhen the invitee binds the invited third party identifier to a Matrix\nuser ID, the identity server will give the user a list of pending\ninvitations, each containing:\n\n- The room ID to which they were invited\n\n- The token given to the homeserver\n\n- A signature of the token, signed with the identity server's private key\n\n- The matrix user ID who invited them to the room\n\nIf a token is requested from the identity server, the homeserver will\nappend a `m.room.third_party_invite` event to the room.",
        "operationId": "inviteBy3PID",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room identifier (not alias) to which to invite the user.",
            "x-example": "!d41d8cd:matrix.org"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "address": "cheeky@monkey.com",
                "id_access_token": "abc123_OpaqueString",
                "id_server": "matrix.org",
                "medium": "email"
              },
              "required": [
                "id_server",
                "id_access_token",
                "medium",
                "address"
              ],
              "properties": {
                "address": {
                  "type": "string",
                  "description": "The invitee's third party identifier."
                },
                "id_access_token": {
                  "type": "string",
                  "description": "An access token previously registered with the identity server. Servers\ncan treat this as optional to distinguish between r0.5-compatible clients\nand this specification version."
                },
                "id_server": {
                  "type": "string",
                  "description": "The hostname+port of the identity server which should be used for third party identifier lookups."
                },
                "medium": {
                  "type": "string",
                  "description": "The kind of address being passed in the address field, for example `email`."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user has been invited to join the room.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "403": {
            "description": "You do not have permission to invite the user to the room. A meaningful `errcode` and description error text will be returned. Example reasons for rejections are:\n\n- The invitee has been banned from the room.\n- The invitee is already a member of the room.\n- The inviter is not currently in the room.\n- The inviter's power level is insufficient to invite users to the room.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_FORBIDDEN",
                "error": "@cheeky_monkey:matrix.org is banned from the room"
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/rooms/{roomId}/invite ": {
      "post": {
        "tags": [
          "Room membership"
        ],
        "summary": "Invite a user to participate in a particular room.",
        "description": "*Note that there are two forms of this API, which are documented separately.\nThis version of the API requires that the inviter knows the Matrix\nidentifier of the invitee. The other is documented in the\n[third party invites](https://spec.matrix.org/v1.5/client-server-api/#third-party-invites) section.*\n\nThis API invites a user to participate in a particular room.\nThey do not start participating in the room until they actually join the\nroom.\n\nOnly users currently in a particular room can invite other users to\njoin that room.\n\nIf the user was invited to the room, the homeserver will append a\n`m.room.member` event to the room.",
        "operationId": "inviteUser",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room identifier (not alias) to which to invite the user.",
            "x-example": "!d41d8cd:matrix.org"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "reason": "Welcome to the team!",
                "user_id": "@cheeky_monkey:matrix.org"
              },
              "required": [
                "user_id"
              ],
              "properties": {
                "reason": {
                  "type": "string",
                  "description": "Optional reason to be included as the `reason` on the subsequent\nmembership event.",
                  "x-addedInMatrixVersion": "1.1"
                },
                "user_id": {
                  "type": "string",
                  "description": "The fully qualified user ID of the invitee."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user has been invited to join the room, or was already invited to the room.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "400": {
            "description": "\nThe request is invalid. A meaningful `errcode` and description\nerror text will be returned. Example reasons for rejection include:\n\n- The request body is malformed (`errcode` set to `M_BAD_JSON`\n  or `M_NOT_JSON`).\n\n- One or more users being invited to the room are residents of a\n  homeserver which does not support the requested room version. The\n  `errcode` will be `M_UNSUPPORTED_ROOM_VERSION` in these cases.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to invite the user to the room. A meaningful `errcode` and description error text will be returned. Example reasons for rejections are:\n\n- The invitee has been banned from the room.\n- The invitee is already a member of the room.\n- The inviter is not currently in the room.\n- The inviter's power level is insufficient to invite users to the room.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_FORBIDDEN",
                "error": "@cheeky_monkey:matrix.org is banned from the room"
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/rooms/{roomId}/join": {
      "post": {
        "tags": [
          "Room membership"
        ],
        "summary": "Start the requesting user participating in a particular room.",
        "description": "*Note that this API requires a room ID, not alias.*\n`/join/{roomIdOrAlias}` *exists if you have a room alias.*\n\nThis API starts a user participating in a particular room, if that user\nis allowed to participate in that room. After this call, the client is\nallowed to see all current state events in the room, and all subsequent\nevents associated with the room until the user leaves the room.\n\nAfter a user has joined a room, the room will appear as an entry in the\nresponse of the [`/initialSync`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3initialsync)\nand [`/sync`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3sync) APIs.",
        "operationId": "joinRoomById",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room identifier (not alias) to join.",
            "x-example": "!d41d8cd:matrix.org"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "reason": {
                  "type": "string",
                  "description": "Optional reason to be included as the `reason` on the subsequent\nmembership event.",
                  "example": "Looking for support",
                  "x-addedInMatrixVersion": "1.1"
                },
                "third_party_signed": {
                  "description": "If supplied, the homeserver must verify that it matches a pending\n`m.room.third_party_invite` event in the room, and perform\nkey validity checking if required by the event.",
                  "allOf": [
                    {
                      "title": "Third Party Signed",
                      "type": "object",
                      "description": "A signature of an `m.third_party_invite` token to prove that this user\nowns a third party identity which has been invited to the room.",
                      "required": [
                        "sender",
                        "mxid",
                        "token",
                        "signatures"
                      ],
                      "properties": {
                        "mxid": {
                          "type": "string",
                          "description": "The Matrix ID of the invitee.",
                          "example": "@bob:example.org"
                        },
                        "sender": {
                          "type": "string",
                          "description": "The Matrix ID of the user who issued the invite.",
                          "example": "@alice:example.org"
                        },
                        "signatures": {
                          "title": "Signatures",
                          "type": "object",
                          "description": "A signatures object containing a signature of the entire signed object.",
                          "example": {
                            "example.org": {
                              "ed25519:0": "some9signature"
                            }
                          },
                          "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        },
                        "token": {
                          "type": "string",
                          "description": "The state key of the m.third_party_invite event.",
                          "example": "random8nonce"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The room has been joined.\n\nThe joined room ID must be returned in the `room_id` field.",
            "schema": {
              "type": "object",
              "required": [
                "room_id"
              ],
              "properties": {
                "room_id": {
                  "type": "string",
                  "description": "The joined room ID."
                }
              }
            },
            "examples": {
              "application/json": {
                "room_id": "!d41d8cd:matrix.org"
              }
            }
          },
          "403": {
            "description": "You do not have permission to join the room. A meaningful `errcode`\nand description error text will be returned. Example reasons for rejection are:\n\n- The room is invite-only and the user was not invited.\n- The user has been banned from the room.\n- The room is restricted and the user failed to satisfy any of the conditions.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_FORBIDDEN",
                "error": "You are not invited to this room."
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/rooms/{roomId}/joined_members": {
      "get": {
        "tags": [
          "Room participation"
        ],
        "summary": "Gets the list of currently joined users and their profile data.",
        "description": "This API returns a map of MXIDs to member info objects for members of the room. The current user must be in the room for it to work, unless it is an Application Service in which case any of the AS's users must be in the room. This API is primarily for Application Services and should be faster to respond than `/members` as it can be implemented more efficiently on the server.",
        "operationId": "getJoinedMembersByRoom",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room to get the members of.",
            "x-example": "!636q39766251:example.com"
          }
        ],
        "responses": {
          "200": {
            "description": "A map of MXID to room member objects.",
            "schema": {
              "type": "object",
              "properties": {
                "joined": {
                  "type": "object",
                  "description": "A map from user ID to a RoomMember object.",
                  "additionalProperties": {
                    "title": "RoomMember",
                    "type": "object",
                    "properties": {
                      "avatar_url": {
                        "type": "string",
                        "description": "The mxc avatar url of the user this object is representing.",
                        "format": "uri"
                      },
                      "display_name": {
                        "type": "string",
                        "description": "The display name of the user this object is representing."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "joined": {
                  "@bar:example.com": {
                    "avatar_url": "mxc://riot.ovh/printErCATzZijQsSDWorRaK",
                    "display_name": "Bar"
                  }
                }
              }
            }
          },
          "403": {
            "description": "You aren't a member of the room.\n"
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/rooms/{roomId}/kick": {
      "post": {
        "tags": [
          "Room membership"
        ],
        "summary": "Kick a user from the room.",
        "description": "Kick a user from the room.\n\nThe caller must have the required power level in order to perform this operation.\n\nKicking a user adjusts the target member's membership state to be `leave` with an\noptional `reason`. Like with other membership changes, a user can directly adjust\nthe target member's state by making a request to `/rooms/<room id>/state/m.room.member/<user id>`.",
        "operationId": "kick",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room identifier (not alias) from which the user should be kicked.",
            "x-example": "!e42d8c:matrix.org"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "reason": "Telling unfunny jokes",
                "user_id": "@cheeky_monkey:matrix.org"
              },
              "required": [
                "user_id"
              ],
              "properties": {
                "reason": {
                  "type": "string",
                  "description": "The reason the user has been kicked. This will be supplied as the\n`reason` on the target's updated [`m.room.member`](https://spec.matrix.org/v1.5/client-server-api/#mroommember) event."
                },
                "user_id": {
                  "type": "string",
                  "description": "The fully qualified user ID of the user being kicked."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user has been kicked from the room.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "403": {
            "description": "You do not have permission to kick the user from the room. A meaningful `errcode` and\ndescription error text will be returned. Example reasons for rejections are:\n\n- The kicker is not currently in the room.\n- The kickee is not currently in the room.\n- The kicker's power level is insufficient to kick users from the room.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_FORBIDDEN",
                "error": "You do not have a high enough power level to kick from this room."
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/rooms/{roomId}/leave": {
      "post": {
        "tags": [
          "Room membership"
        ],
        "summary": "Stop the requesting user participating in a particular room.",
        "description": "This API stops a user participating in a particular room.\n\nIf the user was already in the room, they will no longer be able to see\nnew events in the room. If the room requires an invite to join, they\nwill need to be re-invited before they can re-join.\n\nIf the user was invited to the room, but had not joined, this call\nserves to reject the invite.\n\nThe user will still be allowed to retrieve history from the room which\nthey were previously allowed to see.",
        "operationId": "leaveRoom",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room identifier to leave.",
            "x-example": "!nkl290a:matrix.org"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "reason": "Saying farewell - thanks for the support!"
              },
              "properties": {
                "reason": {
                  "type": "string",
                  "description": "Optional reason to be included as the `reason` on the subsequent\nmembership event.",
                  "x-addedInMatrixVersion": "1.1"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The room has been left.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/rooms/{roomId}/members": {
      "get": {
        "tags": [
          "Room participation"
        ],
        "summary": "Get the m.room.member events for the room.",
        "description": "Get the list of members for this room.",
        "operationId": "getMembersByRoom",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room to get the member events for.",
            "x-example": "!636q39766251:example.com"
          },
          {
            "type": "string",
            "name": "at",
            "in": "query",
            "description": "The point in time (pagination token) to return members for in the room.\nThis token can be obtained from a `prev_batch` token returned for\neach room by the sync API. Defaults to the current state of the room,\nas determined by the server.",
            "x-example": "YWxsCgpOb25lLDM1ODcwOA"
          },
          {
            "type": "string",
            "name": "membership",
            "in": "query",
            "description": "The kind of membership to filter for. Defaults to no filtering if\nunspecified. When specified alongside `not_membership`, the two\nparameters create an 'or' condition: either the membership *is*\nthe same as `membership` **or** *is not* the same as `not_membership`.",
            "enum": [
              "join",
              "invite",
              "knock",
              "leave",
              "ban"
            ],
            "x-example": "join"
          },
          {
            "type": "string",
            "name": "not_membership",
            "in": "query",
            "description": "The kind of membership to exclude from the results. Defaults to no\nfiltering if unspecified.",
            "enum": [
              "join",
              "invite",
              "knock",
              "leave",
              "ban"
            ],
            "x-example": "leave"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of members of the room. If you are joined to the room then\nthis will be the current members of the room. If you have left the\nroom then this will be the members of the room when you left.",
            "schema": {
              "type": "object",
              "properties": {
                "chunk": {
                  "type": "array",
                  "items": {
                    "title": "ClientEvent",
                    "type": "object",
                    "description": "The format used for events when they are returned from a homeserver to a client\nvia the Client-Server API, or sent to an Application Service via the Application Services API.",
                    "allOf": [
                      {
                        "title": "ClientEventWithoutRoomID",
                        "type": "object",
                        "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                        "required": [
                          "event_id",
                          "type",
                          "sender",
                          "origin_server_ts",
                          "content"
                        ],
                        "properties": {
                          "content": {
                            "type": "object",
                            "description": "The body of this event, as created by the client which sent it.",
                            "example": {
                              "membership": "join"
                            }
                          },
                          "event_id": {
                            "type": "string",
                            "description": "The globally unique identifier for this event.",
                            "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                          },
                          "origin_server_ts": {
                            "type": "integer",
                            "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                            "format": "int64",
                            "example": 1632489532305
                          },
                          "sender": {
                            "type": "string",
                            "description": "Contains the fully-qualified ID of the user who sent this event.",
                            "example": "@example:example.org"
                          },
                          "state_key": {
                            "type": "string",
                            "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                            "example": "@user:example.org"
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of the event.",
                            "example": "m.room.member"
                          },
                          "unsigned": {
                            "title": "UnsignedData",
                            "type": "object",
                            "description": "Contains optional extra information about the event.",
                            "properties": {
                              "age": {
                                "type": "integer",
                                "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                "format": "int64",
                                "example": 1567437
                              },
                              "prev_content": {
                                "title": "EventContent",
                                "type": "object",
                                "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                "x-changedInMatrixVersion": {
                                  "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                }
                              },
                              "redacted_because": {
                                "title": "ClientEventWithoutRoomID",
                                "type": "object",
                                "description": "The event that redacted this event, if any.",
                                "example": {
                                  "content": {
                                    "reason": "spam"
                                  },
                                  "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                  "origin_server_ts": 1632491098485,
                                  "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                  "sender": "@moderator:example.org",
                                  "type": "m.room.redaction",
                                  "unsigned": {
                                    "age": 1257
                                  }
                                }
                              },
                              "transaction_id": {
                                "type": "string",
                                "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                              }
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "room_id"
                        ],
                        "properties": {
                          "room_id": {
                            "type": "string",
                            "description": "The ID of the room associated with this event.",
                            "example": "!jEsUZKDJdhlrceRyVU:example.org"
                          },
                          "unsigned": {
                            "properties": {
                              "redacted_because": {
                                "title": "ClientEvent",
                                "example": {
                                  "content": {
                                    "reason": "spam"
                                  },
                                  "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                  "origin_server_ts": 1632491098485,
                                  "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                  "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                                  "sender": "@moderator:example.org",
                                  "type": "m.room.redaction",
                                  "unsigned": {
                                    "age": 1257
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "chunk": [
                  {
                    "content": {
                      "avatar_url": "mxc://example.org/SEsfnsuifSDFSSEF",
                      "displayname": "Alice Margatroid",
                      "membership": "join",
                      "reason": "Looking for support"
                    },
                    "event_id": "$143273582443PhrSn:example.org",
                    "origin_server_ts": 1432735824653,
                    "room_id": "!636q39766251:example.com",
                    "sender": "@example:example.org",
                    "state_key": "@alice:example.org",
                    "type": "m.room.member",
                    "unsigned": {
                      "age": 1234
                    }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You aren't a member of the room and weren't previously a member of the room.\n"
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/rooms/{roomId}/messages": {
      "get": {
        "tags": [
          "Room participation"
        ],
        "summary": "Get a list of events for this room",
        "description": "This API returns a list of message and state events for a room. It uses\npagination query parameters to paginate history in the room.\n\n*Note*: This endpoint supports lazy-loading of room member events. See\n[Lazy-loading room members](https://spec.matrix.org/v1.5/client-server-api/#lazy-loading-room-members) for more information.",
        "operationId": "getRoomEvents",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room to get events from.",
            "x-example": "!636q39766251:example.com"
          },
          {
            "type": "string",
            "name": "from",
            "in": "query",
            "description": "The token to start returning events from. This token can be obtained\nfrom a `prev_batch` or `next_batch` token returned by the `/sync` endpoint,\nor from an `end` token returned by a previous request to this endpoint.\n\nThis endpoint can also accept a value returned as a `start` token\nby a previous request to this endpoint, though servers are not\nrequired to support this. Clients should not rely on the behaviour.\n\nIf it is not provided, the homeserver shall return a list of messages\nfrom the first or last (per the value of the `dir` parameter) visible\nevent in the room history for the requesting user.",
            "x-changedInMatrixVersion": {
              "1.3": "Previously, this field was required and paginating from the first or\nlast visible event in the room history wasn't supported.\n"
            },
            "x-example": "s345_678_333"
          },
          {
            "type": "string",
            "name": "to",
            "in": "query",
            "description": "The token to stop returning events at. This token can be obtained from\na `prev_batch` or `next_batch` token returned by the `/sync` endpoint,\nor from an `end` token returned by a previous request to this endpoint."
          },
          {
            "type": "string",
            "name": "dir",
            "in": "query",
            "required": true,
            "description": "The direction to return events from. If this is set to `f`, events\nwill be returned in chronological order starting at `from`. If it\nis set to `b`, events will be returned in *reverse* chronological\norder, again starting at `from`.",
            "enum": [
              "b",
              "f"
            ],
            "x-example": "b"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query",
            "description": "The maximum number of events to return. Default: 10.",
            "x-example": "3"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query",
            "description": "A JSON RoomEventFilter to filter returned events with.",
            "x-example": "{\"contains_url\":true}"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of messages with a new token to request more.",
            "schema": {
              "type": "object",
              "description": "A list of messages with a new token to request more.",
              "required": [
                "start",
                "chunk"
              ],
              "properties": {
                "chunk": {
                  "type": "array",
                  "description": "A list of room events. The order depends on the `dir` parameter.\nFor `dir=b` events will be in reverse-chronological order,\nfor `dir=f` in chronological order. (The exact definition of `chronological`\nis dependent on the server implementation.)\n\nNote that an empty `chunk` does not *necessarily* imply that no more events\nare available. Clients should continue to paginate until no `end` property\nis returned.",
                  "items": {
                    "title": "ClientEvent",
                    "type": "object",
                    "description": "The format used for events when they are returned from a homeserver to a client\nvia the Client-Server API, or sent to an Application Service via the Application Services API.",
                    "allOf": [
                      {
                        "title": "ClientEventWithoutRoomID",
                        "type": "object",
                        "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                        "required": [
                          "event_id",
                          "type",
                          "sender",
                          "origin_server_ts",
                          "content"
                        ],
                        "properties": {
                          "content": {
                            "type": "object",
                            "description": "The body of this event, as created by the client which sent it.",
                            "example": {
                              "membership": "join"
                            }
                          },
                          "event_id": {
                            "type": "string",
                            "description": "The globally unique identifier for this event.",
                            "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                          },
                          "origin_server_ts": {
                            "type": "integer",
                            "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                            "format": "int64",
                            "example": 1632489532305
                          },
                          "sender": {
                            "type": "string",
                            "description": "Contains the fully-qualified ID of the user who sent this event.",
                            "example": "@example:example.org"
                          },
                          "state_key": {
                            "type": "string",
                            "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                            "example": "@user:example.org"
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of the event.",
                            "example": "m.room.member"
                          },
                          "unsigned": {
                            "title": "UnsignedData",
                            "type": "object",
                            "description": "Contains optional extra information about the event.",
                            "properties": {
                              "age": {
                                "type": "integer",
                                "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                "format": "int64",
                                "example": 1567437
                              },
                              "prev_content": {
                                "title": "EventContent",
                                "type": "object",
                                "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                "x-changedInMatrixVersion": {
                                  "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                }
                              },
                              "redacted_because": {
                                "title": "ClientEventWithoutRoomID",
                                "type": "object",
                                "description": "The event that redacted this event, if any.",
                                "example": {
                                  "content": {
                                    "reason": "spam"
                                  },
                                  "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                  "origin_server_ts": 1632491098485,
                                  "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                  "sender": "@moderator:example.org",
                                  "type": "m.room.redaction",
                                  "unsigned": {
                                    "age": 1257
                                  }
                                }
                              },
                              "transaction_id": {
                                "type": "string",
                                "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                              }
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "room_id"
                        ],
                        "properties": {
                          "room_id": {
                            "type": "string",
                            "description": "The ID of the room associated with this event.",
                            "example": "!jEsUZKDJdhlrceRyVU:example.org"
                          },
                          "unsigned": {
                            "properties": {
                              "redacted_because": {
                                "title": "ClientEvent",
                                "example": {
                                  "content": {
                                    "reason": "spam"
                                  },
                                  "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                  "origin_server_ts": 1632491098485,
                                  "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                  "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                                  "sender": "@moderator:example.org",
                                  "type": "m.room.redaction",
                                  "unsigned": {
                                    "age": 1257
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "end": {
                  "type": "string",
                  "description": "A token corresponding to the end of `chunk`. This token can be passed\nback to this endpoint to request further events.\n\nIf no further events are available (either because we have\nreached the start of the timeline, or because the user does\nnot have permission to see any more events), this property\nis omitted from the response."
                },
                "start": {
                  "type": "string",
                  "description": "A token corresponding to the start of `chunk`. This will be the same as\nthe value given in `from`."
                },
                "state": {
                  "type": "array",
                  "description": "A list of state events relevant to showing the `chunk`. For example, if\n`lazy_load_members` is enabled in the filter then this may contain\nthe membership events for the senders of events in the `chunk`.\n\nUnless `include_redundant_members` is `true`, the server\nmay remove membership events which would have already been\nsent to the client in prior calls to this endpoint, assuming\nthe membership of those members has not changed.",
                  "items": {
                    "title": "ClientEvent",
                    "type": "object",
                    "description": "The format used for events when they are returned from a homeserver to a client\nvia the Client-Server API, or sent to an Application Service via the Application Services API.",
                    "allOf": [
                      {
                        "title": "ClientEventWithoutRoomID",
                        "type": "object",
                        "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                        "required": [
                          "event_id",
                          "type",
                          "sender",
                          "origin_server_ts",
                          "content"
                        ],
                        "properties": {
                          "content": {
                            "type": "object",
                            "description": "The body of this event, as created by the client which sent it.",
                            "example": {
                              "membership": "join"
                            }
                          },
                          "event_id": {
                            "type": "string",
                            "description": "The globally unique identifier for this event.",
                            "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                          },
                          "origin_server_ts": {
                            "type": "integer",
                            "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                            "format": "int64",
                            "example": 1632489532305
                          },
                          "sender": {
                            "type": "string",
                            "description": "Contains the fully-qualified ID of the user who sent this event.",
                            "example": "@example:example.org"
                          },
                          "state_key": {
                            "type": "string",
                            "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                            "example": "@user:example.org"
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of the event.",
                            "example": "m.room.member"
                          },
                          "unsigned": {
                            "title": "UnsignedData",
                            "type": "object",
                            "description": "Contains optional extra information about the event.",
                            "properties": {
                              "age": {
                                "type": "integer",
                                "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                "format": "int64",
                                "example": 1567437
                              },
                              "prev_content": {
                                "title": "EventContent",
                                "type": "object",
                                "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                "x-changedInMatrixVersion": {
                                  "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                }
                              },
                              "redacted_because": {
                                "title": "ClientEventWithoutRoomID",
                                "type": "object",
                                "description": "The event that redacted this event, if any.",
                                "example": {
                                  "content": {
                                    "reason": "spam"
                                  },
                                  "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                  "origin_server_ts": 1632491098485,
                                  "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                  "sender": "@moderator:example.org",
                                  "type": "m.room.redaction",
                                  "unsigned": {
                                    "age": 1257
                                  }
                                }
                              },
                              "transaction_id": {
                                "type": "string",
                                "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                              }
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "room_id"
                        ],
                        "properties": {
                          "room_id": {
                            "type": "string",
                            "description": "The ID of the room associated with this event.",
                            "example": "!jEsUZKDJdhlrceRyVU:example.org"
                          },
                          "unsigned": {
                            "properties": {
                              "redacted_because": {
                                "title": "ClientEvent",
                                "example": {
                                  "content": {
                                    "reason": "spam"
                                  },
                                  "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                  "origin_server_ts": 1632491098485,
                                  "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                  "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                                  "sender": "@moderator:example.org",
                                  "type": "m.room.redaction",
                                  "unsigned": {
                                    "age": 1257
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "chunk": [
                  {
                    "content": {
                      "body": "This is an example text message",
                      "format": "org.matrix.custom.html",
                      "formatted_body": "<b>This is an example text message</b>",
                      "msgtype": "m.text"
                    },
                    "event_id": "$143273582443PhrSn:example.org",
                    "origin_server_ts": 1432735824653,
                    "room_id": "!636q39766251:example.com",
                    "sender": "@example:example.org",
                    "type": "m.room.message",
                    "unsigned": {
                      "age": 1234
                    }
                  },
                  {
                    "content": {
                      "name": "The room name"
                    },
                    "event_id": "$143273582443PhrSn:example.org",
                    "origin_server_ts": 1432735824653,
                    "room_id": "!636q39766251:example.com",
                    "sender": "@example:example.org",
                    "state_key": "",
                    "type": "m.room.name",
                    "unsigned": {
                      "age": 1234
                    }
                  },
                  {
                    "content": {
                      "body": "Gangnam Style",
                      "info": {
                        "duration": 2140786,
                        "h": 320,
                        "mimetype": "video/mp4",
                        "size": 1563685,
                        "thumbnail_info": {
                          "h": 300,
                          "mimetype": "image/jpeg",
                          "size": 46144,
                          "w": 300
                        },
                        "thumbnail_url": "mxc://example.org/FHyPlCeYUSFFxlgbQYZmoEoe",
                        "w": 480
                      },
                      "msgtype": "m.video",
                      "url": "mxc://example.org/a526eYUSFFxlgbQYZmo442"
                    },
                    "event_id": "$143273582443PhrSn:example.org",
                    "origin_server_ts": 1432735824653,
                    "room_id": "!636q39766251:example.com",
                    "sender": "@example:example.org",
                    "type": "m.room.message",
                    "unsigned": {
                      "age": 1234
                    }
                  }
                ],
                "end": "t47409-4357353_219380_26003_2265",
                "start": "t47429-4392820_219380_26003_2265"
              }
            }
          },
          "403": {
            "description": "You aren't a member of the room.\n"
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/rooms/{roomId}/read_markers": {
      "post": {
        "tags": [
          "Read Markers"
        ],
        "summary": "Set the position of the read marker for a room.",
        "description": "Sets the position of the read marker for a given room, and optionally\nthe read receipt's location.",
        "operationId": "setReadMarker",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room ID to set the read marker in for the user.",
            "x-example": "!somewhere:example.org"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The read marker and optional read receipt locations.",
            "schema": {
              "type": "object",
              "properties": {
                "m.fully_read": {
                  "type": "string",
                  "description": "The event ID the read marker should be located at. The\nevent MUST belong to the room.",
                  "example": "$somewhere:example.org",
                  "x-changedInMatrixVersion": {
                    "1.4": "This property is no longer required.\n"
                  }
                },
                "m.read": {
                  "type": "string",
                  "description": "The event ID to set the read receipt location at. This is\nequivalent to calling `/receipt/m.read/$elsewhere:example.org`\nand is provided here to save that extra call.",
                  "example": "$elsewhere:example.org"
                },
                "m.read.private": {
                  "type": "string",
                  "description": "The event ID to set the *private* read receipt location at. This\nequivalent to calling `/receipt/m.read.private/$elsewhere:example.org`\nand is provided here to save that extra call.",
                  "example": "$elsewhere:example.org",
                  "x-addedInMatrixVersion": "1.4"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The read marker, and read receipt(s) if provided, have been updated.",
            "schema": {
              "type": "object"
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/rooms/{roomId}/receipt/{receiptType}/{eventId}": {
      "post": {
        "tags": [
          "Room participation"
        ],
        "summary": "Send a receipt for the given event ID.",
        "description": "This API updates the marker for the given receipt type to the event ID\nspecified.",
        "operationId": "postReceipt",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room in which to send the event.",
            "x-example": "!wefuh21ffskfuh345:example.com"
          },
          {
            "type": "string",
            "name": "receiptType",
            "in": "path",
            "required": true,
            "description": "The type of receipt to send. This can also be `m.fully_read` as an\nalternative to [`/read_makers`](https://spec.matrix.org/v1.5/client-server-api/#post_matrixclientv3roomsroomidread_markers).\n\nNote that `m.fully_read` does not appear under `m.receipt`: this endpoint\neffectively calls `/read_markers` internally when presented with a receipt\ntype of `m.fully_read`.",
            "enum": [
              "m.read",
              "m.read.private",
              "m.fully_read"
            ],
            "x-changedInMatrixVersion": {
              "1.4": "Allow `m.read.private` receipts and `m.fully_read` markers to be set.\n"
            },
            "x-example": "m.read"
          },
          {
            "type": "string",
            "name": "eventId",
            "in": "path",
            "required": true,
            "description": "The event ID to acknowledge up to.",
            "x-example": "$1924376522eioj:example.com"
          },
          {
            "name": "receipt",
            "in": "body",
            "required": true,
            "description": "Extra receipt information to attach to `content` if any. The\nserver will automatically set the `ts` field.",
            "schema": {
              "type": "object",
              "example": {
                "thread_id": "main"
              },
              "properties": {
                "thread_id": {
                  "type": "string",
                  "description": "The root thread event's ID (or `main`) for which\nthread this receipt is intended to be under. If\nnot specified, the read receipt is *unthreaded*\n(default).",
                  "x-addedInMatrixVersion": "1.4"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The receipt was sent.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "400": {
            "description": "The `thread_id` is invalid in some way. For example:\n* It is not a string.\n* It is empty.\n* It is provided for an incompatible receipt type.\n* The `event_id` is not related to the `thread_id`.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_INVALID_PARAM",
                "error": "thread_id field must be a non-empty string"
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/rooms/{roomId}/redact/{eventId}/{txnId}": {
      "put": {
        "tags": [
          "Room participation"
        ],
        "summary": "Strips all non-integrity-critical information out of an event.",
        "description": "Strips all information out of an event which isn't critical to the\nintegrity of the server-side representation of the room.\n\nThis cannot be undone.\n\nAny user with a power level greater than or equal to the `m.room.redaction`\nevent power level may send redaction events in the room. If the user's power\nlevel greater is also greater than or equal to the `redact` power level\nof the room, the user may redact events sent by other users.\n\nServer administrators may redact events sent by users on their server.",
        "operationId": "redactEvent",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room from which to redact the event.",
            "x-example": "!637q39766251:example.com"
          },
          {
            "type": "string",
            "name": "eventId",
            "in": "path",
            "required": true,
            "description": "The ID of the event to redact",
            "x-example": "bai2b1i9:matrix.org"
          },
          {
            "type": "string",
            "name": "txnId",
            "in": "path",
            "required": true,
            "description": "The [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers) for this event. Clients should generate a\nunique ID; it will be used by the server to ensure idempotency of requests.",
            "x-example": "37"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "reason": "Indecent material"
              },
              "properties": {
                "reason": {
                  "type": "string",
                  "description": "The reason for the event being redacted."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An ID for the redaction event.",
            "schema": {
              "type": "object",
              "properties": {
                "event_id": {
                  "type": "string",
                  "description": "A unique identifier for the event."
                }
              }
            },
            "examples": {
              "application/json": {
                "event_id": "$YUwQidLecu:example.com"
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/rooms/{roomId}/report/{eventId}": {
      "post": {
        "tags": [
          "Reporting content"
        ],
        "summary": "Reports an event as inappropriate.",
        "description": "Reports an event as inappropriate to the server, which may then notify\nthe appropriate people.",
        "operationId": "reportContent",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room in which the event being reported is located.",
            "x-example": "!637q39766251:example.com"
          },
          {
            "type": "string",
            "name": "eventId",
            "in": "path",
            "required": true,
            "description": "The event to report.",
            "x-example": "$something:example.org"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "reason": "this makes me sad",
                "score": -100
              },
              "properties": {
                "reason": {
                  "type": "string",
                  "description": "The reason the content is being reported. May be blank."
                },
                "score": {
                  "type": "integer",
                  "description": "The score to rate this content as where -100 is most offensive\nand 0 is inoffensive."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The event has been reported successfully.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}": {
      "put": {
        "tags": [
          "Room participation"
        ],
        "summary": "Send a message event to the given room.",
        "description": "This endpoint is used to send a message event to a room. Message events\nallow access to historical events and pagination, making them suited\nfor \"once-off\" activity in a room.\n\nThe body of the request should be the content object of the event; the\nfields in this object will vary depending on the type of event. See\n[Room Events](https://spec.matrix.org/v1.5/client-server-api/#room-events) for the m. event specification.",
        "operationId": "sendMessage",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room to send the event to.",
            "x-example": "!636q39766251:example.com"
          },
          {
            "type": "string",
            "name": "eventType",
            "in": "path",
            "required": true,
            "description": "The type of event to send.",
            "x-example": "m.room.message"
          },
          {
            "type": "string",
            "name": "txnId",
            "in": "path",
            "required": true,
            "description": "The [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers) for this event. Clients should generate an\nID unique across requests with the same access token; it will be\nused by the server to ensure idempotency of requests.",
            "x-example": "35"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "body": "hello",
                "msgtype": "m.text"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An ID for the sent event.",
            "schema": {
              "type": "object",
              "required": [
                "event_id"
              ],
              "properties": {
                "event_id": {
                  "type": "string",
                  "description": "A unique identifier for the event."
                }
              }
            },
            "examples": {
              "application/json": {
                "event_id": "$YUwRidLecu:example.com"
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/rooms/{roomId}/state": {
      "get": {
        "tags": [
          "Room participation"
        ],
        "summary": "Get all state events in the current state of a room.",
        "description": "Get the state events for the current state of a room.",
        "operationId": "getRoomState",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room to look up the state for.",
            "x-example": "!636q39766251:example.com"
          }
        ],
        "responses": {
          "200": {
            "description": "The current state of the room",
            "schema": {
              "title": "RoomState",
              "type": "array",
              "description": "If the user is a member of the room this will be the\ncurrent state of the room as a list of events. If the user\nhas left the room then this will be the state of the room\nwhen they left as a list of events.",
              "items": {
                "title": "ClientEvent",
                "type": "object",
                "description": "The format used for events when they are returned from a homeserver to a client\nvia the Client-Server API, or sent to an Application Service via the Application Services API.",
                "allOf": [
                  {
                    "title": "ClientEventWithoutRoomID",
                    "type": "object",
                    "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                    "required": [
                      "event_id",
                      "type",
                      "sender",
                      "origin_server_ts",
                      "content"
                    ],
                    "properties": {
                      "content": {
                        "type": "object",
                        "description": "The body of this event, as created by the client which sent it.",
                        "example": {
                          "membership": "join"
                        }
                      },
                      "event_id": {
                        "type": "string",
                        "description": "The globally unique identifier for this event.",
                        "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                      },
                      "origin_server_ts": {
                        "type": "integer",
                        "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                        "format": "int64",
                        "example": 1632489532305
                      },
                      "sender": {
                        "type": "string",
                        "description": "Contains the fully-qualified ID of the user who sent this event.",
                        "example": "@example:example.org"
                      },
                      "state_key": {
                        "type": "string",
                        "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                        "example": "@user:example.org"
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the event.",
                        "example": "m.room.member"
                      },
                      "unsigned": {
                        "title": "UnsignedData",
                        "type": "object",
                        "description": "Contains optional extra information about the event.",
                        "properties": {
                          "age": {
                            "type": "integer",
                            "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                            "format": "int64",
                            "example": 1567437
                          },
                          "prev_content": {
                            "title": "EventContent",
                            "type": "object",
                            "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                            "x-changedInMatrixVersion": {
                              "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                            }
                          },
                          "redacted_because": {
                            "title": "ClientEventWithoutRoomID",
                            "type": "object",
                            "description": "The event that redacted this event, if any.",
                            "example": {
                              "content": {
                                "reason": "spam"
                              },
                              "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                              "origin_server_ts": 1632491098485,
                              "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                              "sender": "@moderator:example.org",
                              "type": "m.room.redaction",
                              "unsigned": {
                                "age": 1257
                              }
                            }
                          },
                          "transaction_id": {
                            "type": "string",
                            "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "room_id"
                    ],
                    "properties": {
                      "room_id": {
                        "type": "string",
                        "description": "The ID of the room associated with this event.",
                        "example": "!jEsUZKDJdhlrceRyVU:example.org"
                      },
                      "unsigned": {
                        "properties": {
                          "redacted_because": {
                            "title": "ClientEvent",
                            "example": {
                              "content": {
                                "reason": "spam"
                              },
                              "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                              "origin_server_ts": 1632491098485,
                              "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                              "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                              "sender": "@moderator:example.org",
                              "type": "m.room.redaction",
                              "unsigned": {
                                "age": 1257
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "examples": {
              "application/json": [
                {
                  "content": {
                    "join_rule": "public"
                  },
                  "event_id": "$143273582443PhrSn:example.org",
                  "origin_server_ts": 1432735824653,
                  "room_id": "!636q39766251:example.com",
                  "sender": "@example:example.org",
                  "state_key": "",
                  "type": "m.room.join_rules",
                  "unsigned": {
                    "age": 1234
                  }
                },
                {
                  "content": {
                    "avatar_url": "mxc://example.org/SEsfnsuifSDFSSEF",
                    "displayname": "Alice Margatroid",
                    "membership": "join",
                    "reason": "Looking for support"
                  },
                  "event_id": "$143273582443PhrSn:example.org",
                  "origin_server_ts": 1432735824653,
                  "room_id": "!636q39766251:example.com",
                  "sender": "@example:example.org",
                  "state_key": "@alice:example.org",
                  "type": "m.room.member",
                  "unsigned": {
                    "age": 1234
                  }
                },
                {
                  "content": {
                    "creator": "@example:example.org",
                    "m.federate": true,
                    "predecessor": {
                      "event_id": "$something:example.org",
                      "room_id": "!oldroom:example.org"
                    },
                    "room_version": "1"
                  },
                  "event_id": "$143273582443PhrSn:example.org",
                  "origin_server_ts": 1432735824653,
                  "room_id": "!636q39766251:example.com",
                  "sender": "@example:example.org",
                  "state_key": "",
                  "type": "m.room.create",
                  "unsigned": {
                    "age": 1234
                  }
                },
                {
                  "content": {
                    "ban": 50,
                    "events": {
                      "m.room.name": 100,
                      "m.room.power_levels": 100
                    },
                    "events_default": 0,
                    "invite": 50,
                    "kick": 50,
                    "notifications": {
                      "room": 20
                    },
                    "redact": 50,
                    "state_default": 50,
                    "users": {
                      "@example:localhost": 100
                    },
                    "users_default": 0
                  },
                  "event_id": "$143273582443PhrSn:example.org",
                  "origin_server_ts": 1432735824653,
                  "room_id": "!636q39766251:example.com",
                  "sender": "@example:example.org",
                  "state_key": "",
                  "type": "m.room.power_levels",
                  "unsigned": {
                    "age": 1234
                  }
                }
              ]
            }
          },
          "403": {
            "description": "You aren't a member of the room and weren't previously a member of the room.\n"
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/rooms/{roomId}/state/{eventType}/{stateKey}": {
      "get": {
        "tags": [
          "Room participation"
        ],
        "summary": "Get the state identified by the type and key.",
        "description": "Looks up the contents of a state event in a room. If the user is\njoined to the room then the state is taken from the current\nstate of the room. If the user has left the room then the state is\ntaken from the state of the room when they left.",
        "operationId": "getRoomStateWithKey",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room to look up the state in.",
            "x-example": "!636q39766251:example.com"
          },
          {
            "type": "string",
            "name": "eventType",
            "in": "path",
            "required": true,
            "description": "The type of state to look up.",
            "x-example": "m.room.name"
          },
          {
            "type": "string",
            "name": "stateKey",
            "in": "path",
            "required": true,
            "description": "The key of the state to look up. Defaults to an empty string. When\nan empty string, the trailing slash on this endpoint is optional.",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "The content of the state event.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {
                "name": "Example room name"
              }
            }
          },
          "403": {
            "description": "You aren't a member of the room and weren't previously a member of the room.\n"
          },
          "404": {
            "description": "The room has no state with the given type or key."
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Room participation"
        ],
        "summary": "Send a state event to the given room.",
        "description": "State events can be sent using this endpoint.  These events will be\noverwritten if `<room id>`, `<event type>` and `<state key>` all\nmatch.\n\nRequests to this endpoint **cannot use transaction IDs**\nlike other `PUT` paths because they cannot be differentiated from the\n`state_key`. Furthermore, `POST` is unsupported on state paths.\n\nThe body of the request should be the content object of the event; the\nfields in this object will vary depending on the type of event. See\n[Room Events](https://spec.matrix.org/v1.5/client-server-api/#room-events) for the `m.` event specification.\n\nIf the event type being sent is `m.room.canonical_alias` servers\nSHOULD ensure that any new aliases being listed in the event are valid\nper their grammar/syntax and that they point to the room ID where the\nstate event is to be sent. Servers do not validate aliases which are\nbeing removed or are already present in the state event.\n",
        "operationId": "setRoomStateWithKey",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room to set the state in",
            "x-example": "!636q39766251:example.com"
          },
          {
            "type": "string",
            "name": "eventType",
            "in": "path",
            "required": true,
            "description": "The type of event to send.",
            "x-example": "m.room.member"
          },
          {
            "type": "string",
            "name": "stateKey",
            "in": "path",
            "required": true,
            "description": "The state_key for the state to send. Defaults to the empty string. When\nan empty string, the trailing slash on this endpoint is optional.",
            "x-example": "@alice:example.com"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "avatar_url": "mxc://localhost/SEsfnsuifSDFSSEF",
                "displayname": "Alice Margatroid",
                "membership": "join"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An ID for the sent event.",
            "schema": {
              "type": "object",
              "required": [
                "event_id"
              ],
              "properties": {
                "event_id": {
                  "type": "string",
                  "description": "A unique identifier for the event."
                }
              }
            },
            "examples": {
              "application/json": {
                "event_id": "$YUwRidLecu:example.com"
              }
            }
          },
          "400": {
            "description": "The sender's request is malformed.\n\nSome example error codes include:\n\n* `M_INVALID_PARAM`: One or more aliases within the `m.room.canonical_alias`\n  event have invalid syntax.\n\n* `M_BAD_ALIAS`: One or more aliases within the `m.room.canonical_alias` event\n  do not point to the room ID for which the state event is to be sent to.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_BAD_ALIAS",
                "error": "The alias '#hello:example.org' does not point to this room."
              }
            }
          },
          "403": {
            "description": "The sender doesn't have permission to send the event into the room.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_FORBIDDEN",
                "error": "You do not have permission to send the event."
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/rooms/{roomId}/typing/{userId}": {
      "put": {
        "tags": [
          "Room participation"
        ],
        "summary": "Informs the server that the user has started or stopped typing.",
        "description": "This tells the server that the user is typing for the next N\nmilliseconds where N is the value specified in the `timeout` key.\nAlternatively, if `typing` is `false`, it tells the server that the\nuser has stopped typing.",
        "operationId": "setTyping",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The user who has started to type.",
            "x-example": "@alice:example.com"
          },
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room in which the user is typing.",
            "x-example": "!wefh3sfukhs:example.com"
          },
          {
            "name": "typingState",
            "in": "body",
            "required": true,
            "description": "The current typing state.",
            "schema": {
              "type": "object",
              "example": {
                "timeout": 30000,
                "typing": true
              },
              "required": [
                "typing"
              ],
              "properties": {
                "timeout": {
                  "type": "integer",
                  "description": "The length of time in milliseconds to mark this user as typing."
                },
                "typing": {
                  "type": "boolean",
                  "description": "Whether the user is typing or not. If `false`, the `timeout`\nkey can be omitted."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The new typing state was set.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/rooms/{roomId}/unban": {
      "post": {
        "tags": [
          "Room membership"
        ],
        "summary": "Unban a user from the room.",
        "description": "Unban a user from the room. This allows them to be invited to the room,\nand join if they would otherwise be allowed to join according to its join rules.\n\nThe caller must have the required power level in order to perform this operation.",
        "operationId": "unban",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The room identifier (not alias) from which the user should be unbanned.",
            "x-example": "!e42d8c:matrix.org"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "reason": "They've been banned long enough",
                "user_id": "@cheeky_monkey:matrix.org"
              },
              "required": [
                "user_id"
              ],
              "properties": {
                "reason": {
                  "type": "string",
                  "description": "Optional reason to be included as the `reason` on the subsequent\nmembership event.",
                  "x-addedInMatrixVersion": "1.1"
                },
                "user_id": {
                  "type": "string",
                  "description": "The fully qualified user ID of the user being unbanned."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user has been unbanned from the room.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "403": {
            "description": "You do not have permission to unban the user from the room. A meaningful `errcode` and description error text will be returned. Example reasons for rejections are:\n\n- The unbanner's power level is insufficient to unban users from the room.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_FORBIDDEN",
                "error": "You do not have a high enough power level to unban from this room."
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/rooms/{roomId}/upgrade": {
      "post": {
        "tags": [
          "Room upgrades"
        ],
        "summary": "Upgrades a room to a new room version.",
        "description": "Upgrades the given room to a particular room version.",
        "operationId": "upgradeRoom",
        "parameters": [
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The ID of the room to upgrade.",
            "x-example": "!oldroom:example.org"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "new_version": "2"
              },
              "required": [
                "new_version"
              ],
              "properties": {
                "new_version": {
                  "type": "string",
                  "description": "The new version for the room."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The room was successfully upgraded.",
            "schema": {
              "type": "object",
              "required": [
                "replacement_room"
              ],
              "properties": {
                "replacement_room": {
                  "type": "string",
                  "description": "The ID of the new room."
                }
              }
            },
            "examples": {
              "application/json": {
                "replacement_room": "!newroom:example.org"
              }
            }
          },
          "400": {
            "description": "The request was invalid. One way this can happen is if the room version\nrequested is not supported by the homeserver.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_UNSUPPORTED_ROOM_VERSION",
                "error": "This server does not support that room version"
              }
            }
          },
          "403": {
            "description": "The user is not permitted to upgrade the room.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_FORBIDDEN",
                "error": "You cannot upgrade this room"
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/search": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Perform a server-side search.",
        "description": "Performs a full text search across different categories.",
        "operationId": "search",
        "parameters": [
          {
            "type": "string",
            "name": "next_batch",
            "in": "query",
            "description": "The point to return events from. If given, this should be a\n`next_batch` result from a previous call to this endpoint.",
            "x-example": "YWxsCgpOb25lLDM1ODcwOA"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "search_categories": {
                  "room_events": {
                    "groupings": {
                      "group_by": [
                        {
                          "key": "room_id"
                        }
                      ]
                    },
                    "keys": [
                      "content.body"
                    ],
                    "order_by": "recent",
                    "search_term": "martians and men"
                  }
                }
              },
              "required": [
                "search_categories"
              ],
              "properties": {
                "search_categories": {
                  "title": "Categories",
                  "type": "object",
                  "description": "Describes which categories to search in and their criteria.",
                  "properties": {
                    "room_events": {
                      "title": "Room Events Criteria",
                      "type": "object",
                      "description": "Mapping of category name to search criteria.",
                      "required": [
                        "search_term"
                      ],
                      "properties": {
                        "event_context": {
                          "title": "Include Event Context",
                          "type": "object",
                          "description": "Configures whether any context for the events\nreturned are included in the response.",
                          "properties": {
                            "after_limit": {
                              "title": "After limit",
                              "type": "integer",
                              "description": "How many events after the result are\nreturned. By default, this is `5`."
                            },
                            "before_limit": {
                              "title": "Before limit",
                              "type": "integer",
                              "description": "How many events before the result are\nreturned. By default, this is `5`."
                            },
                            "include_profile": {
                              "title": "Return profile information",
                              "type": "boolean",
                              "description": "Requests that the server returns the\nhistoric profile information for the users\nthat sent the events that were returned.\nBy default, this is `false`."
                            }
                          }
                        },
                        "filter": {
                          "title": "Filter",
                          "type": "object",
                          "description": "This takes a [filter](https://spec.matrix.org/v1.5/client-server-api/#filtering).",
                          "allOf": [
                            {
                              "allOf": [
                                {
                                  "title": "EventFilter",
                                  "type": "object",
                                  "properties": {
                                    "limit": {
                                      "type": "integer",
                                      "description": "The maximum number of events to return."
                                    },
                                    "not_senders": {
                                      "type": "array",
                                      "description": "A list of sender IDs to exclude. If this list is absent then no senders are excluded. A matching sender will be excluded even if it is listed in the `'senders'` filter.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "not_types": {
                                      "type": "array",
                                      "description": "A list of event types to exclude. If this list is absent then no event types are excluded. A matching type will be excluded even if it is listed in the `'types'` filter. A '*' can be used as a wildcard to match any sequence of characters.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "senders": {
                                      "type": "array",
                                      "description": "A list of senders IDs to include. If this list is absent then all senders are included.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "types": {
                                      "type": "array",
                                      "description": "A list of event types to include. If this list is absent then all event types are included. A `'*'` can be used as a wildcard to match any sequence of characters.",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                {
                                  "title": "RoomEventFilter",
                                  "type": "object",
                                  "properties": {
                                    "contains_url": {
                                      "type": "boolean",
                                      "description": "If `true`, includes only events with a `url` key in their content. If `false`, excludes those events. If omitted, `url` key is not considered for filtering."
                                    },
                                    "include_redundant_members": {
                                      "type": "boolean",
                                      "description": "If `true`, sends all membership events for all events, even if they have already\nbeen sent to the client. Does not\napply unless `lazy_load_members` is `true`. See\n[Lazy-loading room members](https://spec.matrix.org/v1.5/client-server-api/#lazy-loading-room-members)\nfor more information. Defaults to `false`."
                                    },
                                    "lazy_load_members": {
                                      "type": "boolean",
                                      "description": "If `true`, enables lazy-loading of membership events. See\n[Lazy-loading room members](https://spec.matrix.org/v1.5/client-server-api/#lazy-loading-room-members)\nfor more information. Defaults to `false`."
                                    },
                                    "not_rooms": {
                                      "type": "array",
                                      "description": "A list of room IDs to exclude. If this list is absent then no rooms are excluded. A matching room will be excluded even if it is listed in the `'rooms'` filter.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "rooms": {
                                      "type": "array",
                                      "description": "A list of room IDs to include. If this list is absent then all rooms are included.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "unread_thread_notifications": {
                                      "type": "boolean",
                                      "description": "If `true`, enables per-[thread](https://spec.matrix.org/v1.5/client-server-api/#threading) notification\ncounts. Only applies to the `/sync` endpoint. Defaults to `false`.",
                                      "x-addedInMatrixVersion": "1.4"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        "groupings": {
                          "title": "Groupings",
                          "type": "object",
                          "description": "Requests that the server partitions the result set\nbased on the provided list of keys.",
                          "properties": {
                            "group_by": {
                              "title": "Groups",
                              "type": "array",
                              "description": "List of groups to request.",
                              "items": {
                                "title": "Group",
                                "type": "object",
                                "description": "Configuration for group.",
                                "properties": {
                                  "key": {
                                    "title": "Group Key",
                                    "type": "string",
                                    "description": "Key that defines the group.",
                                    "enum": [
                                      "room_id",
                                      "sender"
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        },
                        "include_state": {
                          "title": "Include current state",
                          "type": "boolean",
                          "description": "Requests the server return the current state for\neach room returned."
                        },
                        "keys": {
                          "type": "array",
                          "description": "The keys to search. Defaults to all.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "content.body",
                              "content.name",
                              "content.topic"
                            ]
                          }
                        },
                        "order_by": {
                          "title": "Ordering",
                          "type": "string",
                          "description": "The order in which to search for results.\nBy default, this is `\"rank\"`.",
                          "enum": [
                            "recent",
                            "rank"
                          ]
                        },
                        "search_term": {
                          "type": "string",
                          "description": "The string to search events for"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Results of the search.",
            "schema": {
              "title": "Results",
              "type": "object",
              "required": [
                "search_categories"
              ],
              "properties": {
                "search_categories": {
                  "title": "Result Categories",
                  "type": "object",
                  "description": "Describes which categories to search in and their criteria.",
                  "properties": {
                    "room_events": {
                      "title": "Result Room Events",
                      "type": "object",
                      "description": "Mapping of category name to search criteria.",
                      "properties": {
                        "count": {
                          "type": "integer",
                          "description": "An approximate count of the total number of results found."
                        },
                        "groups": {
                          "title": "Groups",
                          "type": "object",
                          "description": "Any groups that were requested.\n\nThe outer `string` key is the group key requested (eg: `room_id`\nor `sender`). The inner `string` key is the grouped value (eg:\na room's ID or a user's ID).",
                          "additionalProperties": {
                            "title": "Group Key",
                            "type": "object",
                            "description": "The results for a given group.",
                            "additionalProperties": {
                              "title": "Group Value",
                              "type": "object",
                              "description": "The results for a particular group value.",
                              "properties": {
                                "next_batch": {
                                  "title": "Next Batch in Group",
                                  "type": "string",
                                  "description": "Token that can be used to get the next batch\nof results in the group, by passing as the\n`next_batch` parameter to the next call. If\nthis field is absent, there are no more\nresults in this group."
                                },
                                "order": {
                                  "title": "Group Order",
                                  "type": "integer",
                                  "description": "Key that can be used to order different\ngroups."
                                },
                                "results": {
                                  "type": "array",
                                  "description": "Which results are in this group.",
                                  "items": {
                                    "title": "Result Event ID",
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "highlights": {
                          "title": "Highlights",
                          "type": "array",
                          "description": "List of words which should be highlighted, useful for stemming which may change the query terms.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "next_batch": {
                          "title": "Next Batch",
                          "type": "string",
                          "description": "Token that can be used to get the next batch of\nresults, by passing as the `next_batch` parameter to\nthe next call. If this field is absent, there are no\nmore results."
                        },
                        "results": {
                          "title": "Results",
                          "type": "array",
                          "description": "List of results in the requested order.",
                          "items": {
                            "title": "Result",
                            "type": "object",
                            "description": "The result object.",
                            "properties": {
                              "context": {
                                "title": "Event Context",
                                "type": "object",
                                "description": "Context for result, if requested.",
                                "properties": {
                                  "end": {
                                    "title": "End Token",
                                    "type": "string",
                                    "description": "Pagination token for the end of the chunk"
                                  },
                                  "events_after": {
                                    "title": "Events After",
                                    "type": "array",
                                    "description": "Events just after the result.",
                                    "items": {
                                      "title": "Event",
                                      "type": "object",
                                      "description": "The format used for events when they are returned from a homeserver to a client\nvia the Client-Server API, or sent to an Application Service via the Application Services API.",
                                      "allOf": [
                                        {
                                          "title": "ClientEventWithoutRoomID",
                                          "type": "object",
                                          "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                                          "required": [
                                            "event_id",
                                            "type",
                                            "sender",
                                            "origin_server_ts",
                                            "content"
                                          ],
                                          "properties": {
                                            "content": {
                                              "type": "object",
                                              "description": "The body of this event, as created by the client which sent it.",
                                              "example": {
                                                "membership": "join"
                                              }
                                            },
                                            "event_id": {
                                              "type": "string",
                                              "description": "The globally unique identifier for this event.",
                                              "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                                            },
                                            "origin_server_ts": {
                                              "type": "integer",
                                              "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                                              "format": "int64",
                                              "example": 1632489532305
                                            },
                                            "sender": {
                                              "type": "string",
                                              "description": "Contains the fully-qualified ID of the user who sent this event.",
                                              "example": "@example:example.org"
                                            },
                                            "state_key": {
                                              "type": "string",
                                              "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                                              "example": "@user:example.org"
                                            },
                                            "type": {
                                              "type": "string",
                                              "description": "The type of the event.",
                                              "example": "m.room.member"
                                            },
                                            "unsigned": {
                                              "title": "UnsignedData",
                                              "type": "object",
                                              "description": "Contains optional extra information about the event.",
                                              "properties": {
                                                "age": {
                                                  "type": "integer",
                                                  "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                                  "format": "int64",
                                                  "example": 1567437
                                                },
                                                "prev_content": {
                                                  "title": "EventContent",
                                                  "type": "object",
                                                  "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                                  "x-changedInMatrixVersion": {
                                                    "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                                  }
                                                },
                                                "redacted_because": {
                                                  "title": "ClientEventWithoutRoomID",
                                                  "type": "object",
                                                  "description": "The event that redacted this event, if any.",
                                                  "example": {
                                                    "content": {
                                                      "reason": "spam"
                                                    },
                                                    "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                                    "origin_server_ts": 1632491098485,
                                                    "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                                    "sender": "@moderator:example.org",
                                                    "type": "m.room.redaction",
                                                    "unsigned": {
                                                      "age": 1257
                                                    }
                                                  }
                                                },
                                                "transaction_id": {
                                                  "type": "string",
                                                  "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "room_id"
                                          ],
                                          "properties": {
                                            "room_id": {
                                              "type": "string",
                                              "description": "The ID of the room associated with this event.",
                                              "example": "!jEsUZKDJdhlrceRyVU:example.org"
                                            },
                                            "unsigned": {
                                              "properties": {
                                                "redacted_because": {
                                                  "title": "ClientEvent",
                                                  "example": {
                                                    "content": {
                                                      "reason": "spam"
                                                    },
                                                    "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                                    "origin_server_ts": 1632491098485,
                                                    "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                                    "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                                                    "sender": "@moderator:example.org",
                                                    "type": "m.room.redaction",
                                                    "unsigned": {
                                                      "age": 1257
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "events_before": {
                                    "title": "Events Before",
                                    "type": "array",
                                    "description": "Events just before the result.",
                                    "items": {
                                      "title": "Event",
                                      "type": "object",
                                      "description": "The format used for events when they are returned from a homeserver to a client\nvia the Client-Server API, or sent to an Application Service via the Application Services API.",
                                      "allOf": [
                                        {
                                          "title": "ClientEventWithoutRoomID",
                                          "type": "object",
                                          "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                                          "required": [
                                            "event_id",
                                            "type",
                                            "sender",
                                            "origin_server_ts",
                                            "content"
                                          ],
                                          "properties": {
                                            "content": {
                                              "type": "object",
                                              "description": "The body of this event, as created by the client which sent it.",
                                              "example": {
                                                "membership": "join"
                                              }
                                            },
                                            "event_id": {
                                              "type": "string",
                                              "description": "The globally unique identifier for this event.",
                                              "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                                            },
                                            "origin_server_ts": {
                                              "type": "integer",
                                              "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                                              "format": "int64",
                                              "example": 1632489532305
                                            },
                                            "sender": {
                                              "type": "string",
                                              "description": "Contains the fully-qualified ID of the user who sent this event.",
                                              "example": "@example:example.org"
                                            },
                                            "state_key": {
                                              "type": "string",
                                              "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                                              "example": "@user:example.org"
                                            },
                                            "type": {
                                              "type": "string",
                                              "description": "The type of the event.",
                                              "example": "m.room.member"
                                            },
                                            "unsigned": {
                                              "title": "UnsignedData",
                                              "type": "object",
                                              "description": "Contains optional extra information about the event.",
                                              "properties": {
                                                "age": {
                                                  "type": "integer",
                                                  "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                                  "format": "int64",
                                                  "example": 1567437
                                                },
                                                "prev_content": {
                                                  "title": "EventContent",
                                                  "type": "object",
                                                  "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                                  "x-changedInMatrixVersion": {
                                                    "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                                  }
                                                },
                                                "redacted_because": {
                                                  "title": "ClientEventWithoutRoomID",
                                                  "type": "object",
                                                  "description": "The event that redacted this event, if any.",
                                                  "example": {
                                                    "content": {
                                                      "reason": "spam"
                                                    },
                                                    "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                                    "origin_server_ts": 1632491098485,
                                                    "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                                    "sender": "@moderator:example.org",
                                                    "type": "m.room.redaction",
                                                    "unsigned": {
                                                      "age": 1257
                                                    }
                                                  }
                                                },
                                                "transaction_id": {
                                                  "type": "string",
                                                  "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "room_id"
                                          ],
                                          "properties": {
                                            "room_id": {
                                              "type": "string",
                                              "description": "The ID of the room associated with this event.",
                                              "example": "!jEsUZKDJdhlrceRyVU:example.org"
                                            },
                                            "unsigned": {
                                              "properties": {
                                                "redacted_because": {
                                                  "title": "ClientEvent",
                                                  "example": {
                                                    "content": {
                                                      "reason": "spam"
                                                    },
                                                    "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                                    "origin_server_ts": 1632491098485,
                                                    "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                                    "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                                                    "sender": "@moderator:example.org",
                                                    "type": "m.room.redaction",
                                                    "unsigned": {
                                                      "age": 1257
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "profile_info": {
                                    "title": "Profile Information",
                                    "type": "object",
                                    "description": "The historic profile information of the\nusers that sent the events returned.\n\nThe `string` key is the user ID for which\nthe profile belongs to.",
                                    "additionalProperties": {
                                      "title": "User Profile",
                                      "type": "object",
                                      "properties": {
                                        "avatar_url": {
                                          "title": "Avatar Url",
                                          "type": "string",
                                          "format": "uri"
                                        },
                                        "displayname": {
                                          "title": "Display name",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "start": {
                                    "title": "Start Token",
                                    "type": "string",
                                    "description": "Pagination token for the start of the chunk"
                                  }
                                }
                              },
                              "rank": {
                                "type": "number",
                                "description": "A number that describes how closely this result matches the search. Higher is closer."
                              },
                              "result": {
                                "title": "Event",
                                "type": "object",
                                "description": "The event that matched.",
                                "allOf": [
                                  {
                                    "title": "ClientEventWithoutRoomID",
                                    "type": "object",
                                    "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                                    "required": [
                                      "event_id",
                                      "type",
                                      "sender",
                                      "origin_server_ts",
                                      "content"
                                    ],
                                    "properties": {
                                      "content": {
                                        "type": "object",
                                        "description": "The body of this event, as created by the client which sent it.",
                                        "example": {
                                          "membership": "join"
                                        }
                                      },
                                      "event_id": {
                                        "type": "string",
                                        "description": "The globally unique identifier for this event.",
                                        "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                                      },
                                      "origin_server_ts": {
                                        "type": "integer",
                                        "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                                        "format": "int64",
                                        "example": 1632489532305
                                      },
                                      "sender": {
                                        "type": "string",
                                        "description": "Contains the fully-qualified ID of the user who sent this event.",
                                        "example": "@example:example.org"
                                      },
                                      "state_key": {
                                        "type": "string",
                                        "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                                        "example": "@user:example.org"
                                      },
                                      "type": {
                                        "type": "string",
                                        "description": "The type of the event.",
                                        "example": "m.room.member"
                                      },
                                      "unsigned": {
                                        "title": "UnsignedData",
                                        "type": "object",
                                        "description": "Contains optional extra information about the event.",
                                        "properties": {
                                          "age": {
                                            "type": "integer",
                                            "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                            "format": "int64",
                                            "example": 1567437
                                          },
                                          "prev_content": {
                                            "title": "EventContent",
                                            "type": "object",
                                            "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                            "x-changedInMatrixVersion": {
                                              "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                            }
                                          },
                                          "redacted_because": {
                                            "title": "ClientEventWithoutRoomID",
                                            "type": "object",
                                            "description": "The event that redacted this event, if any.",
                                            "example": {
                                              "content": {
                                                "reason": "spam"
                                              },
                                              "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                              "origin_server_ts": 1632491098485,
                                              "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                              "sender": "@moderator:example.org",
                                              "type": "m.room.redaction",
                                              "unsigned": {
                                                "age": 1257
                                              }
                                            }
                                          },
                                          "transaction_id": {
                                            "type": "string",
                                            "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "room_id"
                                    ],
                                    "properties": {
                                      "room_id": {
                                        "type": "string",
                                        "description": "The ID of the room associated with this event.",
                                        "example": "!jEsUZKDJdhlrceRyVU:example.org"
                                      },
                                      "unsigned": {
                                        "properties": {
                                          "redacted_because": {
                                            "title": "ClientEvent",
                                            "example": {
                                              "content": {
                                                "reason": "spam"
                                              },
                                              "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                              "origin_server_ts": 1632491098485,
                                              "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                              "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                                              "sender": "@moderator:example.org",
                                              "type": "m.room.redaction",
                                              "unsigned": {
                                                "age": 1257
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        },
                        "state": {
                          "title": "Current state",
                          "type": "object",
                          "description": "The current state for every room in the results.\nThis is included if the request had the\n`include_state` key set with a value of `true`.\n\nThe `string` key is the room ID for which the `State\nEvent` array belongs to.",
                          "additionalProperties": {
                            "title": "Room State",
                            "type": "array",
                            "items": {
                              "title": "ClientEvent",
                              "type": "object",
                              "description": "The format used for events when they are returned from a homeserver to a client\nvia the Client-Server API, or sent to an Application Service via the Application Services API.",
                              "allOf": [
                                {
                                  "title": "ClientEventWithoutRoomID",
                                  "type": "object",
                                  "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                                  "required": [
                                    "event_id",
                                    "type",
                                    "sender",
                                    "origin_server_ts",
                                    "content"
                                  ],
                                  "properties": {
                                    "content": {
                                      "type": "object",
                                      "description": "The body of this event, as created by the client which sent it.",
                                      "example": {
                                        "membership": "join"
                                      }
                                    },
                                    "event_id": {
                                      "type": "string",
                                      "description": "The globally unique identifier for this event.",
                                      "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                                    },
                                    "origin_server_ts": {
                                      "type": "integer",
                                      "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                                      "format": "int64",
                                      "example": 1632489532305
                                    },
                                    "sender": {
                                      "type": "string",
                                      "description": "Contains the fully-qualified ID of the user who sent this event.",
                                      "example": "@example:example.org"
                                    },
                                    "state_key": {
                                      "type": "string",
                                      "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                                      "example": "@user:example.org"
                                    },
                                    "type": {
                                      "type": "string",
                                      "description": "The type of the event.",
                                      "example": "m.room.member"
                                    },
                                    "unsigned": {
                                      "title": "UnsignedData",
                                      "type": "object",
                                      "description": "Contains optional extra information about the event.",
                                      "properties": {
                                        "age": {
                                          "type": "integer",
                                          "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                          "format": "int64",
                                          "example": 1567437
                                        },
                                        "prev_content": {
                                          "title": "EventContent",
                                          "type": "object",
                                          "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                          "x-changedInMatrixVersion": {
                                            "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                          }
                                        },
                                        "redacted_because": {
                                          "title": "ClientEventWithoutRoomID",
                                          "type": "object",
                                          "description": "The event that redacted this event, if any.",
                                          "example": {
                                            "content": {
                                              "reason": "spam"
                                            },
                                            "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                            "origin_server_ts": 1632491098485,
                                            "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                            "sender": "@moderator:example.org",
                                            "type": "m.room.redaction",
                                            "unsigned": {
                                              "age": 1257
                                            }
                                          }
                                        },
                                        "transaction_id": {
                                          "type": "string",
                                          "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "room_id"
                                  ],
                                  "properties": {
                                    "room_id": {
                                      "type": "string",
                                      "description": "The ID of the room associated with this event.",
                                      "example": "!jEsUZKDJdhlrceRyVU:example.org"
                                    },
                                    "unsigned": {
                                      "properties": {
                                        "redacted_because": {
                                          "title": "ClientEvent",
                                          "example": {
                                            "content": {
                                              "reason": "spam"
                                            },
                                            "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                            "origin_server_ts": 1632491098485,
                                            "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                            "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                                            "sender": "@moderator:example.org",
                                            "type": "m.room.redaction",
                                            "unsigned": {
                                              "age": 1257
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "search_categories": {
                  "room_events": {
                    "count": 1224,
                    "groups": {
                      "room_id": {
                        "!qPewotXpIctQySfjSy:localhost": {
                          "next_batch": "BdgFsdfHSf-dsFD",
                          "order": 1,
                          "results": [
                            "$144429830826TWwbB:localhost"
                          ]
                        }
                      }
                    },
                    "highlights": [
                      "martians",
                      "men"
                    ],
                    "next_batch": "5FdgFsd234dfgsdfFD",
                    "results": [
                      {
                        "rank": 0.00424866,
                        "result": {
                          "content": {
                            "body": "This is an example text message",
                            "format": "org.matrix.custom.html",
                            "formatted_body": "<b>This is an example text message</b>",
                            "msgtype": "m.text"
                          },
                          "event_id": "$144429830826TWwbB:localhost",
                          "origin_server_ts": 1432735824653,
                          "room_id": "!qPewotXpIctQySfjSy:localhost",
                          "sender": "@example:example.org",
                          "type": "m.room.message",
                          "unsigned": {
                            "age": 1234
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Part of the request was invalid."
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/sendToDevice/{eventType}/{txnId}": {
      "put": {
        "tags": [
          "Send-to-Device messaging"
        ],
        "summary": "Send an event to a given set of devices.",
        "description": "This endpoint is used to send send-to-device events to a set of\nclient devices.",
        "operationId": "sendToDevice",
        "parameters": [
          {
            "type": "string",
            "name": "eventType",
            "in": "path",
            "required": true,
            "description": "The type of event to send.",
            "x-example": "m.new_device"
          },
          {
            "type": "string",
            "name": "txnId",
            "in": "path",
            "required": true,
            "description": "The [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers) for this event. Clients should generate an\nID unique across requests with the same access token; it will be\nused by the server to ensure idempotency of requests.",
            "x-example": "35"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "title": "body",
              "type": "object",
              "required": [
                "messages"
              ],
              "properties": {
                "messages": {
                  "type": "object",
                  "description": "The messages to send. A map from user ID, to a map from\ndevice ID to message body. The device ID may also be `*`,\nmeaning all known devices for the user.",
                  "example": {
                    "@alice:example.com": {
                      "TLLBEANAAG": {
                        "example_content_key": "value"
                      }
                    }
                  },
                  "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                      "title": "EventContent",
                      "type": "object",
                      "description": "Message content"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The message was successfully sent.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/sync": {
      "get": {
        "tags": [
          "Room participation"
        ],
        "summary": "Synchronise the client's state and receive new messages.",
        "description": "Synchronise the client's state with the latest state on the server.\nClients use this API when they first log in to get an initial snapshot\nof the state on the server, and then continue to call this API to get\nincremental deltas to the state, and to receive new messages.\n\n*Note*: This endpoint supports lazy-loading. See [Filtering](https://spec.matrix.org/v1.5/client-server-api/#filtering)\nfor more information. Lazy-loading members is only supported on a `StateFilter`\nfor this endpoint. When lazy-loading is enabled, servers MUST include the\nsyncing user's own membership event when they join a room, or when the\nfull state of rooms is requested, to aid discovering the user's avatar &\ndisplayname.\n\nFurther, like other members, the user's own membership event is eligible\nfor being considered redundant by the server. When a sync is `limited`,\nthe server MUST return membership events for events in the gap\n(between `since` and the start of the returned timeline), regardless\nas to whether or not they are redundant. This ensures that joins/leaves\nand profile changes which occur during the gap are not lost.\n\nNote that the default behaviour of `state` is to include all membership\nevents, alongside other state, when lazy-loading is not enabled.",
        "operationId": "sync",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query",
            "description": "The ID of a filter created using the filter API or a filter JSON\nobject encoded as a string. The server will detect whether it is\nan ID or a JSON object by whether the first character is a `\"{\"`\nopen brace. Passing the JSON inline is best suited to one off\nrequests. Creating a filter using the filter API is recommended for\nclients that reuse the same filter multiple times, for example in\nlong poll requests.\n\nSee [Filtering](https://spec.matrix.org/v1.5/client-server-api/#filtering) for more information.",
            "x-example": "66696p746572"
          },
          {
            "type": "string",
            "name": "since",
            "in": "query",
            "description": "A point in time to continue a sync from. This should be the\n`next_batch` token returned by an earlier call to this endpoint.",
            "x-example": "s72594_4483_1934"
          },
          {
            "type": "boolean",
            "name": "full_state",
            "in": "query",
            "description": "Controls whether to include the full state for all rooms the user\nis a member of.\n\nIf this is set to `true`, then all state events will be returned,\neven if `since` is non-empty. The timeline will still be limited\nby the `since` parameter. In this case, the `timeout` parameter\nwill be ignored and the query will return immediately, possibly with\nan empty timeline.\n\nIf `false`, and `since` is non-empty, only state which has\nchanged since the point indicated by `since` will be returned.\n\nBy default, this is `false`.",
            "x-example": "false"
          },
          {
            "type": "string",
            "name": "set_presence",
            "in": "query",
            "description": "Controls whether the client is automatically marked as online by\npolling this API. If this parameter is omitted then the client is\nautomatically marked as online when it uses this API. Otherwise if\nthe parameter is set to \"offline\" then the client is not marked as\nbeing online when it uses this API. When set to \"unavailable\", the\nclient is marked as being idle.",
            "enum": [
              "offline",
              "online",
              "unavailable"
            ],
            "x-example": "offline"
          },
          {
            "type": "integer",
            "name": "timeout",
            "in": "query",
            "description": "The maximum time to wait, in milliseconds, before returning this\nrequest. If no events (or other data) become available before this\ntime elapses, the server will return a response with empty fields.\n\nBy default, this is `0`, so the server will return immediately\neven if the response is empty.",
            "x-example": 30000
          }
        ],
        "responses": {
          "200": {
            "description": "The initial snapshot or delta for the client to use to update their state.",
            "schema": {
              "type": "object",
              "required": [
                "next_batch"
              ],
              "properties": {
                "account_data": {
                  "title": "Account Data",
                  "type": "object",
                  "description": "The global private data created by this user.",
                  "allOf": [
                    {
                      "title": "EventBatch",
                      "type": "object",
                      "properties": {
                        "events": {
                          "type": "array",
                          "description": "List of events.",
                          "items": {
                            "type": "object",
                            "allOf": [
                              {
                                "title": "Event",
                                "type": "object",
                                "description": "The basic set of fields all events must have.",
                                "required": [
                                  "type",
                                  "content"
                                ],
                                "properties": {
                                  "content": {
                                    "type": "object",
                                    "description": "The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body."
                                  },
                                  "type": {
                                    "type": "string",
                                    "description": "The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                },
                "device_lists": {
                  "title": "DeviceLists",
                  "type": "object",
                  "description": "Information on end-to-end device updates, as specified in\n[End-to-end encryption](https://spec.matrix.org/v1.5/client-server-api/#e2e-extensions-to-sync)."
                },
                "device_one_time_keys_count": {
                  "title": "One-time keys count",
                  "type": "object",
                  "description": "Information on end-to-end encryption keys, as specified\nin [End-to-end encryption](https://spec.matrix.org/v1.5/client-server-api/#e2e-extensions-to-sync).",
                  "additionalProperties": {
                    "type": "integer"
                  }
                },
                "next_batch": {
                  "type": "string",
                  "description": "The batch token to supply in the `since` param of the next\n`/sync` request."
                },
                "presence": {
                  "title": "Presence",
                  "type": "object",
                  "description": "The updates to the presence status of other users.",
                  "allOf": [
                    {
                      "title": "EventBatch",
                      "type": "object",
                      "properties": {
                        "events": {
                          "type": "array",
                          "description": "List of events.",
                          "items": {
                            "type": "object",
                            "allOf": [
                              {
                                "title": "Event",
                                "type": "object",
                                "description": "The basic set of fields all events must have.",
                                "required": [
                                  "type",
                                  "content"
                                ],
                                "properties": {
                                  "content": {
                                    "type": "object",
                                    "description": "The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body."
                                  },
                                  "type": {
                                    "type": "string",
                                    "description": "The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                },
                "rooms": {
                  "title": "Rooms",
                  "type": "object",
                  "description": "Updates to rooms.",
                  "properties": {
                    "invite": {
                      "title": "Invited Rooms",
                      "type": "object",
                      "description": "The rooms that the user has been invited to, mapped as room ID to\nroom information.",
                      "additionalProperties": {
                        "title": "Invited Room",
                        "type": "object",
                        "properties": {
                          "invite_state": {
                            "title": "InviteState",
                            "type": "object",
                            "description": "The [stripped state](#stripped-state) of a room that the user has been invited\nto.",
                            "properties": {
                              "events": {
                                "type": "array",
                                "description": "The [stripped state events](#stripped-state) that form the invite state.",
                                "items": {
                                  "title": "StrippedStateEvent",
                                  "type": "object",
                                  "description": "A stripped down state event, with only the `type`, `state_key`,\n`sender`, and `content` keys.",
                                  "required": [
                                    "type",
                                    "state_key",
                                    "content",
                                    "sender"
                                  ],
                                  "properties": {
                                    "content": {
                                      "title": "EventContent",
                                      "type": "object",
                                      "description": "The `content` for the event."
                                    },
                                    "sender": {
                                      "type": "string",
                                      "description": "The `sender` for the event."
                                    },
                                    "state_key": {
                                      "type": "string",
                                      "description": "The `state_key` for the event."
                                    },
                                    "type": {
                                      "type": "string",
                                      "description": "The `type` for the event."
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "join": {
                      "title": "Joined Rooms",
                      "type": "object",
                      "description": "The rooms that the user has joined, mapped as room ID to\nroom information.",
                      "additionalProperties": {
                        "title": "Joined Room",
                        "type": "object",
                        "properties": {
                          "account_data": {
                            "title": "Account Data",
                            "type": "object",
                            "description": "The private data that this user has attached to\nthis room.",
                            "allOf": [
                              {
                                "title": "EventBatch",
                                "type": "object",
                                "properties": {
                                  "events": {
                                    "type": "array",
                                    "description": "List of events.",
                                    "items": {
                                      "type": "object",
                                      "allOf": [
                                        {
                                          "title": "Event",
                                          "type": "object",
                                          "description": "The basic set of fields all events must have.",
                                          "required": [
                                            "type",
                                            "content"
                                          ],
                                          "properties": {
                                            "content": {
                                              "type": "object",
                                              "description": "The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body."
                                            },
                                            "type": {
                                              "type": "string",
                                              "description": "The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          "ephemeral": {
                            "title": "Ephemeral",
                            "type": "object",
                            "description": "The new ephemeral events in the room (events that\naren't recorded in the timeline or state of the\nroom). In this version of the spec, these are\n[typing notification](#typing-notifications) and\n[read receipt](#receipts) events.",
                            "allOf": [
                              {
                                "title": "EventBatch",
                                "type": "object",
                                "properties": {
                                  "events": {
                                    "type": "array",
                                    "description": "List of events.",
                                    "items": {
                                      "type": "object",
                                      "allOf": [
                                        {
                                          "title": "Event",
                                          "type": "object",
                                          "description": "The basic set of fields all events must have.",
                                          "required": [
                                            "type",
                                            "content"
                                          ],
                                          "properties": {
                                            "content": {
                                              "type": "object",
                                              "description": "The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body."
                                            },
                                            "type": {
                                              "type": "string",
                                              "description": "The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          "state": {
                            "title": "State",
                            "type": "object",
                            "description": "Updates to the state, between the time indicated by\nthe `since` parameter, and the start of the\n`timeline` (or all state up to the start of the\n`timeline`, if `since` is not given, or\n`full_state` is true).\n\nN.B. state updates for `m.room.member` events will\nbe incomplete if `lazy_load_members` is enabled in\nthe `/sync` filter, and only return the member events\nrequired to display the senders of the timeline events\nin this response.",
                            "allOf": [
                              {
                                "title": "StateEventBatch",
                                "type": "object",
                                "properties": {
                                  "events": {
                                    "type": "array",
                                    "description": "List of events.",
                                    "items": {
                                      "title": "ClientEventWithoutRoomID",
                                      "type": "object",
                                      "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                                      "required": [
                                        "event_id",
                                        "type",
                                        "sender",
                                        "origin_server_ts",
                                        "content"
                                      ],
                                      "properties": {
                                        "content": {
                                          "type": "object",
                                          "description": "The body of this event, as created by the client which sent it.",
                                          "example": {
                                            "membership": "join"
                                          }
                                        },
                                        "event_id": {
                                          "type": "string",
                                          "description": "The globally unique identifier for this event.",
                                          "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                                        },
                                        "origin_server_ts": {
                                          "type": "integer",
                                          "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                                          "format": "int64",
                                          "example": 1632489532305
                                        },
                                        "sender": {
                                          "type": "string",
                                          "description": "Contains the fully-qualified ID of the user who sent this event.",
                                          "example": "@example:example.org"
                                        },
                                        "state_key": {
                                          "type": "string",
                                          "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                                          "example": "@user:example.org"
                                        },
                                        "type": {
                                          "type": "string",
                                          "description": "The type of the event.",
                                          "example": "m.room.member"
                                        },
                                        "unsigned": {
                                          "title": "UnsignedData",
                                          "type": "object",
                                          "description": "Contains optional extra information about the event.",
                                          "properties": {
                                            "age": {
                                              "type": "integer",
                                              "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                              "format": "int64",
                                              "example": 1567437
                                            },
                                            "prev_content": {
                                              "title": "EventContent",
                                              "type": "object",
                                              "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                              "x-changedInMatrixVersion": {
                                                "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                              }
                                            },
                                            "redacted_because": {
                                              "title": "ClientEventWithoutRoomID",
                                              "type": "object",
                                              "description": "The event that redacted this event, if any.",
                                              "example": {
                                                "content": {
                                                  "reason": "spam"
                                                },
                                                "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                                "origin_server_ts": 1632491098485,
                                                "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                                "sender": "@moderator:example.org",
                                                "type": "m.room.redaction",
                                                "unsigned": {
                                                  "age": 1257
                                                }
                                              }
                                            },
                                            "transaction_id": {
                                              "type": "string",
                                              "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          "summary": {
                            "title": "RoomSummary",
                            "type": "object",
                            "description": "Information about the room which clients may need to\ncorrectly render it to users.",
                            "properties": {
                              "m.heroes": {
                                "type": "array",
                                "description": "The users which can be used to generate a room name\nif the room does not have one. Required if the room's\n`m.room.name` or `m.room.canonical_alias` state events\nare unset or empty.\n\nThis should be the first 5 members of the room, ordered\nby stream ordering, which are joined or invited. The\nlist must never include the client's own user ID. When\nno joined or invited members are available, this should\nconsist of the banned and left users. More than 5 members\nmay be provided, however less than 5 should only be provided\nwhen there are less than 5 members to represent.\n\nWhen lazy-loading room members is enabled, the membership\nevents for the heroes MUST be included in the `state`,\nunless they are redundant. When the list of users changes,\nthe server notifies the client by sending a fresh list of\nheroes. If there are no changes since the last sync, this\nfield may be omitted.",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "m.invited_member_count": {
                                "type": "integer",
                                "description": "The number of users with `membership` of `invite`.\nIf this field has not changed since the last sync, it\nmay be omitted. Required otherwise."
                              },
                              "m.joined_member_count": {
                                "type": "integer",
                                "description": "The number of users with `membership` of `join`,\nincluding the client's own user ID. If this field has\nnot changed since the last sync, it may be omitted.\nRequired otherwise."
                              }
                            }
                          },
                          "timeline": {
                            "title": "Timeline",
                            "type": "object",
                            "description": "The timeline of messages and state changes in the\nroom.",
                            "allOf": [
                              {
                                "title": "TimelineBatch",
                                "type": "object",
                                "required": [
                                  "events"
                                ],
                                "properties": {
                                  "events": {
                                    "type": "array",
                                    "description": "List of events.",
                                    "items": {
                                      "title": "ClientEventWithoutRoomID",
                                      "type": "object",
                                      "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                                      "required": [
                                        "event_id",
                                        "type",
                                        "sender",
                                        "origin_server_ts",
                                        "content"
                                      ],
                                      "properties": {
                                        "content": {
                                          "type": "object",
                                          "description": "The body of this event, as created by the client which sent it.",
                                          "example": {
                                            "membership": "join"
                                          }
                                        },
                                        "event_id": {
                                          "type": "string",
                                          "description": "The globally unique identifier for this event.",
                                          "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                                        },
                                        "origin_server_ts": {
                                          "type": "integer",
                                          "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                                          "format": "int64",
                                          "example": 1632489532305
                                        },
                                        "sender": {
                                          "type": "string",
                                          "description": "Contains the fully-qualified ID of the user who sent this event.",
                                          "example": "@example:example.org"
                                        },
                                        "state_key": {
                                          "type": "string",
                                          "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                                          "example": "@user:example.org"
                                        },
                                        "type": {
                                          "type": "string",
                                          "description": "The type of the event.",
                                          "example": "m.room.member"
                                        },
                                        "unsigned": {
                                          "title": "UnsignedData",
                                          "type": "object",
                                          "description": "Contains optional extra information about the event.",
                                          "properties": {
                                            "age": {
                                              "type": "integer",
                                              "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                              "format": "int64",
                                              "example": 1567437
                                            },
                                            "prev_content": {
                                              "title": "EventContent",
                                              "type": "object",
                                              "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                              "x-changedInMatrixVersion": {
                                                "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                              }
                                            },
                                            "redacted_because": {
                                              "title": "ClientEventWithoutRoomID",
                                              "type": "object",
                                              "description": "The event that redacted this event, if any.",
                                              "example": {
                                                "content": {
                                                  "reason": "spam"
                                                },
                                                "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                                "origin_server_ts": 1632491098485,
                                                "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                                "sender": "@moderator:example.org",
                                                "type": "m.room.redaction",
                                                "unsigned": {
                                                  "age": 1257
                                                }
                                              }
                                            },
                                            "transaction_id": {
                                              "type": "string",
                                              "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "limited": {
                                    "type": "boolean",
                                    "description": "True if the number of events returned was limited by the `limit` on the filter."
                                  },
                                  "prev_batch": {
                                    "type": "string",
                                    "description": "A token that can be supplied to the `from` parameter of the [`/rooms/<room_id>/messages`](#get_matrixclientv3roomsroomidmessages) endpoint in order to retrieve earlier events.\nIf no earlier events are available, this property may be omitted from the response."
                                  }
                                }
                              }
                            ]
                          },
                          "unread_notifications": {
                            "title": "Unread Notification Counts",
                            "type": "object",
                            "description": "Counts of unread notifications for this room. See the\n[Receiving notifications](https://spec.matrix.org/v1.5/client-server-api/#receiving-notifications) section\nfor more information on how these are calculated.\n\nIf `unread_thread_notifications` was specified as `true` on the `RoomEventFilter`,\nthese counts will only be for the main timeline rather than all events in the room.\nSee the [threading module](#threading) for more information.",
                            "properties": {
                              "highlight_count": {
                                "title": "Highlighted notification count",
                                "type": "integer",
                                "description": "The number of unread notifications for this room with the highlight flag set."
                              },
                              "notification_count": {
                                "title": "Total notification count",
                                "type": "integer",
                                "description": "The total number of unread notifications for this room."
                              }
                            },
                            "x-changedInMatrixVersion": {
                              "1.4": "Updated to reflect behaviour of having `unread_thread_notifications` as `true` in\nthe `RoomEventFilter` for `/sync`.\n"
                            }
                          },
                          "unread_thread_notifications": {
                            "title": "Unread Thread Notification Counts",
                            "type": "object",
                            "description": "If `unread_thread_notifications` was specified as `true` on the `RoomEventFilter`,\nthe notification counts for each [thread](#threading) in this room. The object is\nkeyed by thread root ID, with values matching `unread_notifications`.\n\nIf a thread does not have any notifications it can be omitted from this object. If\nno threads have notification counts, this whole object can be omitted.",
                            "additionalProperties": {
                              "title": "ThreadNotificationCounts",
                              "type": "object",
                              "properties": {
                                "highlight_count": {
                                  "title": "ThreadedHighlightNotificationCount",
                                  "type": "integer",
                                  "description": "The number of unread notifications for this *thread* with the highlight flag set."
                                },
                                "notification_count": {
                                  "title": "ThreadedTotalNotificationCount",
                                  "type": "integer",
                                  "description": "The total number of unread notifications for this *thread*."
                                }
                              }
                            },
                            "x-addedInMatrixVersion": "1.4"
                          }
                        }
                      }
                    },
                    "knock": {
                      "title": "Knocked rooms",
                      "type": "object",
                      "description": "The rooms that the user has knocked upon, mapped as room ID to room information.",
                      "additionalProperties": {
                        "title": "Knocked Room",
                        "type": "object",
                        "properties": {
                          "knock_state": {
                            "title": "KnockState",
                            "type": "object",
                            "description": "The [stripped state](#stripped-state) of a room that the user has knocked upon.",
                            "properties": {
                              "events": {
                                "type": "array",
                                "description": "The [stripped state events](#stripped-state) that form the knock state.",
                                "items": {
                                  "title": "StrippedStateEvent",
                                  "type": "object",
                                  "description": "A stripped down state event, with only the `type`, `state_key`,\n`sender`, and `content` keys.",
                                  "required": [
                                    "type",
                                    "state_key",
                                    "content",
                                    "sender"
                                  ],
                                  "properties": {
                                    "content": {
                                      "title": "EventContent",
                                      "type": "object",
                                      "description": "The `content` for the event."
                                    },
                                    "sender": {
                                      "type": "string",
                                      "description": "The `sender` for the event."
                                    },
                                    "state_key": {
                                      "type": "string",
                                      "description": "The `state_key` for the event."
                                    },
                                    "type": {
                                      "type": "string",
                                      "description": "The `type` for the event."
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "leave": {
                      "title": "Left rooms",
                      "type": "object",
                      "description": "The rooms that the user has left or been banned from, mapped as room ID to\nroom information.",
                      "additionalProperties": {
                        "title": "Left Room",
                        "type": "object",
                        "properties": {
                          "account_data": {
                            "title": "Account Data",
                            "type": "object",
                            "description": "The private data that this user has attached to\nthis room.",
                            "allOf": [
                              {
                                "title": "EventBatch",
                                "type": "object",
                                "properties": {
                                  "events": {
                                    "type": "array",
                                    "description": "List of events.",
                                    "items": {
                                      "type": "object",
                                      "allOf": [
                                        {
                                          "title": "Event",
                                          "type": "object",
                                          "description": "The basic set of fields all events must have.",
                                          "required": [
                                            "type",
                                            "content"
                                          ],
                                          "properties": {
                                            "content": {
                                              "type": "object",
                                              "description": "The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body."
                                            },
                                            "type": {
                                              "type": "string",
                                              "description": "The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          "state": {
                            "title": "State",
                            "type": "object",
                            "description": "The state updates for the room up to the start of the timeline.",
                            "allOf": [
                              {
                                "title": "StateEventBatch",
                                "type": "object",
                                "properties": {
                                  "events": {
                                    "type": "array",
                                    "description": "List of events.",
                                    "items": {
                                      "title": "ClientEventWithoutRoomID",
                                      "type": "object",
                                      "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                                      "required": [
                                        "event_id",
                                        "type",
                                        "sender",
                                        "origin_server_ts",
                                        "content"
                                      ],
                                      "properties": {
                                        "content": {
                                          "type": "object",
                                          "description": "The body of this event, as created by the client which sent it.",
                                          "example": {
                                            "membership": "join"
                                          }
                                        },
                                        "event_id": {
                                          "type": "string",
                                          "description": "The globally unique identifier for this event.",
                                          "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                                        },
                                        "origin_server_ts": {
                                          "type": "integer",
                                          "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                                          "format": "int64",
                                          "example": 1632489532305
                                        },
                                        "sender": {
                                          "type": "string",
                                          "description": "Contains the fully-qualified ID of the user who sent this event.",
                                          "example": "@example:example.org"
                                        },
                                        "state_key": {
                                          "type": "string",
                                          "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                                          "example": "@user:example.org"
                                        },
                                        "type": {
                                          "type": "string",
                                          "description": "The type of the event.",
                                          "example": "m.room.member"
                                        },
                                        "unsigned": {
                                          "title": "UnsignedData",
                                          "type": "object",
                                          "description": "Contains optional extra information about the event.",
                                          "properties": {
                                            "age": {
                                              "type": "integer",
                                              "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                              "format": "int64",
                                              "example": 1567437
                                            },
                                            "prev_content": {
                                              "title": "EventContent",
                                              "type": "object",
                                              "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                              "x-changedInMatrixVersion": {
                                                "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                              }
                                            },
                                            "redacted_because": {
                                              "title": "ClientEventWithoutRoomID",
                                              "type": "object",
                                              "description": "The event that redacted this event, if any.",
                                              "example": {
                                                "content": {
                                                  "reason": "spam"
                                                },
                                                "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                                "origin_server_ts": 1632491098485,
                                                "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                                "sender": "@moderator:example.org",
                                                "type": "m.room.redaction",
                                                "unsigned": {
                                                  "age": 1257
                                                }
                                              }
                                            },
                                            "transaction_id": {
                                              "type": "string",
                                              "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          "timeline": {
                            "title": "Timeline",
                            "type": "object",
                            "description": "The timeline of messages and state changes in the\nroom up to the point when the user left.",
                            "allOf": [
                              {
                                "title": "TimelineBatch",
                                "type": "object",
                                "required": [
                                  "events"
                                ],
                                "properties": {
                                  "events": {
                                    "type": "array",
                                    "description": "List of events.",
                                    "items": {
                                      "title": "ClientEventWithoutRoomID",
                                      "type": "object",
                                      "description": "The format used for events when they are returned from\nAPI endpoints such as `/sync`, where the `room_id` is implied elsewhere\nin the response.",
                                      "required": [
                                        "event_id",
                                        "type",
                                        "sender",
                                        "origin_server_ts",
                                        "content"
                                      ],
                                      "properties": {
                                        "content": {
                                          "type": "object",
                                          "description": "The body of this event, as created by the client which sent it.",
                                          "example": {
                                            "membership": "join"
                                          }
                                        },
                                        "event_id": {
                                          "type": "string",
                                          "description": "The globally unique identifier for this event.",
                                          "example": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"
                                        },
                                        "origin_server_ts": {
                                          "type": "integer",
                                          "description": "Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
                                          "format": "int64",
                                          "example": 1632489532305
                                        },
                                        "sender": {
                                          "type": "string",
                                          "description": "Contains the fully-qualified ID of the user who sent this event.",
                                          "example": "@example:example.org"
                                        },
                                        "state_key": {
                                          "type": "string",
                                          "description": "Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
                                          "example": "@user:example.org"
                                        },
                                        "type": {
                                          "type": "string",
                                          "description": "The type of the event.",
                                          "example": "m.room.member"
                                        },
                                        "unsigned": {
                                          "title": "UnsignedData",
                                          "type": "object",
                                          "description": "Contains optional extra information about the event.",
                                          "properties": {
                                            "age": {
                                              "type": "integer",
                                              "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                              "format": "int64",
                                              "example": 1567437
                                            },
                                            "prev_content": {
                                              "title": "EventContent",
                                              "type": "object",
                                              "description": "The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
                                              "x-changedInMatrixVersion": {
                                                "1.2": "Previously, this field was specified at the top level of returned\nevents rather than in `unsigned` (with the exception of the [`GET\n.../notifications`](https://spec.matrix.org/v1.5/client-server-api/#get_matrixclientv3notifications)\nendpoint), though in practice no known server implementations honoured\nthis.\n"
                                              }
                                            },
                                            "redacted_because": {
                                              "title": "ClientEventWithoutRoomID",
                                              "type": "object",
                                              "description": "The event that redacted this event, if any.",
                                              "example": {
                                                "content": {
                                                  "reason": "spam"
                                                },
                                                "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                                                "origin_server_ts": 1632491098485,
                                                "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                                                "sender": "@moderator:example.org",
                                                "type": "m.room.redaction",
                                                "unsigned": {
                                                  "age": 1257
                                                }
                                              }
                                            },
                                            "transaction_id": {
                                              "type": "string",
                                              "description": "The client-supplied [transaction ID](https://spec.matrix.org/v1.5/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "limited": {
                                    "type": "boolean",
                                    "description": "True if the number of events returned was limited by the `limit` on the filter."
                                  },
                                  "prev_batch": {
                                    "type": "string",
                                    "description": "A token that can be supplied to the `from` parameter of the [`/rooms/<room_id>/messages`](#get_matrixclientv3roomsroomidmessages) endpoint in order to retrieve earlier events.\nIf no earlier events are available, this property may be omitted from the response."
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "to_device": {
                  "title": "ToDevice",
                  "type": "object",
                  "description": "Information on the send-to-device messages for the client\ndevice, as defined in [Send-to-Device messaging](https://spec.matrix.org/v1.5/client-server-api/#extensions-to-sync)."
                }
              }
            },
            "examples": {
              "application/json": {
                "account_data": {
                  "events": [
                    {
                      "content": {
                        "custom_config_key": "custom_config_value"
                      },
                      "type": "org.example.custom.config"
                    }
                  ]
                },
                "next_batch": "s72595_4483_1934",
                "presence": {
                  "events": [
                    {
                      "content": {
                        "avatar_url": "mxc://localhost/wefuiwegh8742w",
                        "currently_active": false,
                        "last_active_ago": 2478593,
                        "presence": "online",
                        "status_msg": "Making cupcakes"
                      },
                      "sender": "@example:localhost",
                      "type": "m.presence"
                    }
                  ]
                },
                "rooms": {
                  "invite": {
                    "!696r7674:example.com": {
                      "invite_state": {
                        "events": [
                          {
                            "content": {
                              "name": "My Room Name"
                            },
                            "sender": "@alice:example.com",
                            "state_key": "",
                            "type": "m.room.name"
                          },
                          {
                            "content": {
                              "membership": "invite"
                            },
                            "sender": "@alice:example.com",
                            "state_key": "@bob:example.com",
                            "type": "m.room.member"
                          }
                        ]
                      }
                    }
                  },
                  "join": {
                    "!726s6s6q:example.com": {
                      "account_data": {
                        "events": [
                          {
                            "content": {
                              "tags": {
                                "u.work": {
                                  "order": 0.9
                                }
                              }
                            },
                            "type": "m.tag"
                          },
                          {
                            "content": {
                              "custom_config_key": "custom_config_value"
                            },
                            "type": "org.example.custom.room.config"
                          }
                        ]
                      },
                      "ephemeral": {
                        "events": [
                          {
                            "content": {
                              "user_ids": [
                                "@alice:matrix.org",
                                "@bob:example.com"
                              ]
                            },
                            "type": "m.typing"
                          },
                          {
                            "content": {
                              "$1435641916114394fHBLK:matrix.org": {
                                "m.read": {
                                  "@rikj:jki.re": {
                                    "ts": 1436451550453
                                  }
                                },
                                "m.read.private": {
                                  "@self:example.org": {
                                    "ts": 1661384801651
                                  }
                                }
                              }
                            },
                            "type": "m.receipt"
                          }
                        ]
                      },
                      "state": {
                        "events": [
                          {
                            "content": {
                              "avatar_url": "mxc://example.org/SEsfnsuifSDFSSEF",
                              "displayname": "Alice Margatroid",
                              "membership": "join",
                              "reason": "Looking for support"
                            },
                            "event_id": "$143273582443PhrSn:example.org",
                            "origin_server_ts": 1432735824653,
                            "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                            "sender": "@example:example.org",
                            "state_key": "@alice:example.org",
                            "type": "m.room.member",
                            "unsigned": {
                              "age": 1234
                            }
                          }
                        ]
                      },
                      "summary": {
                        "m.heroes": [
                          "@alice:example.com",
                          "@bob:example.com"
                        ],
                        "m.invited_member_count": 0,
                        "m.joined_member_count": 2
                      },
                      "timeline": {
                        "events": [
                          {
                            "content": {
                              "avatar_url": "mxc://example.org/SEsfnsuifSDFSSEF",
                              "displayname": "Alice Margatroid",
                              "membership": "join",
                              "reason": "Looking for support"
                            },
                            "event_id": "$143273582443PhrSn:example.org",
                            "origin_server_ts": 1432735824653,
                            "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                            "sender": "@example:example.org",
                            "state_key": "@alice:example.org",
                            "type": "m.room.member",
                            "unsigned": {
                              "age": 1234
                            }
                          },
                          {
                            "content": {
                              "body": "This is an example text message",
                              "format": "org.matrix.custom.html",
                              "formatted_body": "<b>This is an example text message</b>",
                              "msgtype": "m.text"
                            },
                            "event_id": "$143273582443PhrSn:example.org",
                            "origin_server_ts": 1432735824653,
                            "room_id": "!jEsUZKDJdhlrceRyVU:example.org",
                            "sender": "@example:example.org",
                            "type": "m.room.message",
                            "unsigned": {
                              "age": 1234
                            }
                          }
                        ],
                        "limited": true,
                        "prev_batch": "t34-23535_0_0"
                      },
                      "unread_notifications": {
                        "highlight_count": 1,
                        "notification_count": 5
                      },
                      "unread_thread_notifications": {
                        "$threadroot": {
                          "highlight_count": 3,
                          "notification_count": 6
                        }
                      }
                    }
                  },
                  "knock": {
                    "!223asd456:example.com": {
                      "knock_state": {
                        "events": [
                          {
                            "content": {
                              "name": "My Room Name"
                            },
                            "sender": "@alice:example.com",
                            "state_key": "",
                            "type": "m.room.name"
                          },
                          {
                            "content": {
                              "membership": "knock"
                            },
                            "sender": "@bob:example.com",
                            "state_key": "@bob:example.com",
                            "type": "m.room.member"
                          }
                        ]
                      }
                    }
                  },
                  "leave": {}
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/thirdparty/location": {
      "get": {
        "tags": [
          "Third Party Lookup"
        ],
        "summary": "Reverse-lookup third party locations given a Matrix room alias.",
        "description": "Retrieve an array of third party network locations from a Matrix room\nalias.",
        "operationId": "queryLocationByAlias",
        "parameters": [
          {
            "type": "string",
            "name": "alias",
            "in": "query",
            "required": true,
            "description": "The Matrix room alias to look up.",
            "x-example": "#matrix:matrix.org"
          }
        ],
        "responses": {
          "200": {
            "description": "All found third party locations.",
            "schema": {
              "type": "array",
              "description": "List of matched third party locations.",
              "items": {
                "title": "Location",
                "type": "object",
                "required": [
                  "alias",
                  "protocol",
                  "fields"
                ],
                "properties": {
                  "alias": {
                    "type": "string",
                    "description": "An alias for a matrix room.",
                    "example": "#freenode_#matrix:matrix.org"
                  },
                  "fields": {
                    "type": "object",
                    "description": "Information used to identify this third party location.",
                    "example": {
                      "channel": "#matrix",
                      "network": "freenode"
                    }
                  },
                  "protocol": {
                    "type": "string",
                    "description": "The protocol ID that the third party location is a part of.",
                    "example": "irc"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The Matrix room alias was not found",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND"
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/thirdparty/location/{protocol}": {
      "get": {
        "tags": [
          "Third Party Lookup"
        ],
        "summary": "Retrieve Matrix-side portals rooms leading to a third party location.",
        "description": "Requesting this endpoint with a valid protocol name results in a list\nof successful mapping results in a JSON array. Each result contains\nobjects to represent the Matrix room or rooms that represent a portal\nto this third party network. Each has the Matrix room alias string,\nan identifier for the particular third party network protocol, and an\nobject containing the network-specific fields that comprise this\nidentifier. It should attempt to canonicalise the identifier as much\nas reasonably possible given the network type.",
        "operationId": "queryLocationByProtocol",
        "parameters": [
          {
            "type": "string",
            "name": "protocol",
            "in": "path",
            "required": true,
            "description": "The protocol used to communicate to the third party network.",
            "x-example": "irc"
          },
          {
            "type": "string",
            "name": "searchFields",
            "in": "query",
            "description": "One or more custom fields to help identify the third party\nlocation."
          }
        ],
        "responses": {
          "200": {
            "description": "At least one portal room was found.",
            "schema": {
              "type": "array",
              "description": "List of matched third party locations.",
              "items": {
                "title": "Location",
                "type": "object",
                "required": [
                  "alias",
                  "protocol",
                  "fields"
                ],
                "properties": {
                  "alias": {
                    "type": "string",
                    "description": "An alias for a matrix room.",
                    "example": "#freenode_#matrix:matrix.org"
                  },
                  "fields": {
                    "type": "object",
                    "description": "Information used to identify this third party location.",
                    "example": {
                      "channel": "#matrix",
                      "network": "freenode"
                    }
                  },
                  "protocol": {
                    "type": "string",
                    "description": "The protocol ID that the third party location is a part of.",
                    "example": "irc"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No portal rooms were found.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND"
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/thirdparty/protocol/{protocol}": {
      "get": {
        "tags": [
          "Third Party Lookup"
        ],
        "summary": "Retrieve metadata about a specific protocol that the homeserver supports.",
        "description": "Fetches the metadata from the homeserver about a particular third party protocol.",
        "operationId": "getProtocolMetadata",
        "parameters": [
          {
            "type": "string",
            "name": "protocol",
            "in": "path",
            "required": true,
            "description": "The name of the protocol.",
            "x-example": "irc"
          }
        ],
        "responses": {
          "200": {
            "description": "The protocol was found and metadata returned.",
            "schema": {
              "title": "Protocol",
              "type": "object",
              "required": [
                "user_fields",
                "location_fields",
                "icon",
                "field_types",
                "instances"
              ],
              "properties": {
                "field_types": {
                  "title": "Field Types",
                  "type": "object",
                  "description": "The type definitions for the fields defined in the `user_fields` and\n`location_fields`. Each entry in those arrays MUST have an entry here. The\n`string` key for this object is field name itself.\n\nMay be an empty object if no fields are defined.",
                  "example": {
                    "channel": {
                      "placeholder": "#foobar",
                      "regexp": "#[^\\s]+"
                    },
                    "network": {
                      "placeholder": "irc.example.org",
                      "regexp": "([a-z0-9]+\\.)*[a-z0-9]+"
                    },
                    "nickname": {
                      "placeholder": "username",
                      "regexp": "[^\\s#]+"
                    }
                  },
                  "additionalProperties": {
                    "title": "Field Type",
                    "type": "object",
                    "description": "Definition of valid values for a field.",
                    "required": [
                      "regexp",
                      "placeholder"
                    ],
                    "properties": {
                      "placeholder": {
                        "type": "string",
                        "description": "An placeholder serving as a valid example of the field value."
                      },
                      "regexp": {
                        "type": "string",
                        "description": "A regular expression for validation of a field's value. This may be relatively\ncoarse to verify the value as the application service providing this protocol\nmay apply additional validation or filtering."
                      }
                    }
                  },
                  "required": [
                    "fieldname"
                  ]
                },
                "icon": {
                  "type": "string",
                  "description": "A content URI representing an icon for the third party protocol.",
                  "example": "mxc://example.org/aBcDeFgH"
                },
                "instances": {
                  "type": "array",
                  "description": "A list of objects representing independent instances of configuration.\nFor example, multiple networks on IRC if multiple are provided by the\nsame application service.",
                  "items": {
                    "title": "Protocol Instance",
                    "type": "object",
                    "required": [
                      "desc",
                      "fields",
                      "network_id"
                    ],
                    "properties": {
                      "desc": {
                        "type": "string",
                        "description": "A human-readable description for the protocol, such as the name.",
                        "example": "Freenode"
                      },
                      "fields": {
                        "type": "object",
                        "description": "Preset values for `fields` the client may use to search by.",
                        "example": {
                          "network": "freenode"
                        }
                      },
                      "icon": {
                        "type": "string",
                        "description": "An optional content URI representing the protocol. Overrides the one provided\nat the higher level Protocol object.",
                        "example": "mxc://example.org/JkLmNoPq"
                      },
                      "network_id": {
                        "type": "string",
                        "description": "A unique identifier across all instances.",
                        "example": "freenode"
                      }
                    }
                  }
                },
                "location_fields": {
                  "type": "array",
                  "description": "Fields which may be used to identify a third party location. These should be\nordered to suggest the way that entities may be grouped, where higher\ngroupings are ordered first. For example, the name of a network should be\nsearched before the name of a channel.",
                  "example": [
                    "network",
                    "channel"
                  ],
                  "items": {
                    "type": "string",
                    "description": "Field used to identify a third party location."
                  }
                },
                "user_fields": {
                  "type": "array",
                  "description": "Fields which may be used to identify a third party user. These should be\nordered to suggest the way that entities may be grouped, where higher\ngroupings are ordered first. For example, the name of a network should be\nsearched before the nickname of a user.",
                  "example": [
                    "network",
                    "nickname"
                  ],
                  "items": {
                    "type": "string",
                    "description": "Field used to identify a third party user."
                  }
                }
              }
            }
          },
          "404": {
            "description": "The protocol is unknown.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND"
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/thirdparty/protocols": {
      "get": {
        "tags": [
          "Third Party Lookup"
        ],
        "summary": "Retrieve metadata about all protocols that a homeserver supports.",
        "description": "Fetches the overall metadata about protocols supported by the\nhomeserver. Includes both the available protocols and all fields\nrequired for queries against each protocol.",
        "operationId": "getProtocols",
        "responses": {
          "200": {
            "description": "The protocols supported by the homeserver.",
            "schema": {
              "type": "object",
              "description": "Dictionary of supported third party protocols.",
              "example": {
                "gitter": {
                  "field_types": {
                    "room": {
                      "placeholder": "matrix-org/matrix-doc",
                      "regexp": "[^\\s]+\\/[^\\s]+"
                    },
                    "username": {
                      "placeholder": "@username",
                      "regexp": "@[^\\s]+"
                    }
                  },
                  "instances": [
                    {
                      "desc": "Gitter",
                      "fields": {},
                      "icon": "mxc://example.org/zXyWvUt",
                      "network_id": "gitter"
                    }
                  ],
                  "location_fields": [
                    "room"
                  ],
                  "user_fields": [
                    "username"
                  ]
                },
                "irc": {
                  "field_types": {
                    "channel": {
                      "placeholder": "#foobar",
                      "regexp": "#[^\\s]+"
                    },
                    "network": {
                      "placeholder": "irc.example.org",
                      "regexp": "([a-z0-9]+\\.)*[a-z0-9]+"
                    },
                    "nickname": {
                      "placeholder": "username",
                      "regexp": "[^\\s]+"
                    }
                  },
                  "icon": "mxc://example.org/aBcDeFgH",
                  "instances": [
                    {
                      "desc": "Freenode",
                      "fields": {
                        "network": "freenode.net"
                      },
                      "icon": "mxc://example.org/JkLmNoPq",
                      "network_id": "freenode"
                    }
                  ],
                  "location_fields": [
                    "network",
                    "channel"
                  ],
                  "user_fields": [
                    "network",
                    "nickname"
                  ]
                }
              },
              "additionalProperties": {
                "title": "Protocol",
                "type": "object",
                "required": [
                  "user_fields",
                  "location_fields",
                  "icon",
                  "field_types",
                  "instances"
                ],
                "properties": {
                  "field_types": {
                    "title": "Field Types",
                    "type": "object",
                    "description": "The type definitions for the fields defined in the `user_fields` and\n`location_fields`. Each entry in those arrays MUST have an entry here. The\n`string` key for this object is field name itself.\n\nMay be an empty object if no fields are defined.",
                    "example": {
                      "channel": {
                        "placeholder": "#foobar",
                        "regexp": "#[^\\s]+"
                      },
                      "network": {
                        "placeholder": "irc.example.org",
                        "regexp": "([a-z0-9]+\\.)*[a-z0-9]+"
                      },
                      "nickname": {
                        "placeholder": "username",
                        "regexp": "[^\\s#]+"
                      }
                    },
                    "additionalProperties": {
                      "title": "Field Type",
                      "type": "object",
                      "description": "Definition of valid values for a field.",
                      "required": [
                        "regexp",
                        "placeholder"
                      ],
                      "properties": {
                        "placeholder": {
                          "type": "string",
                          "description": "An placeholder serving as a valid example of the field value."
                        },
                        "regexp": {
                          "type": "string",
                          "description": "A regular expression for validation of a field's value. This may be relatively\ncoarse to verify the value as the application service providing this protocol\nmay apply additional validation or filtering."
                        }
                      }
                    },
                    "required": [
                      "fieldname"
                    ]
                  },
                  "icon": {
                    "type": "string",
                    "description": "A content URI representing an icon for the third party protocol.",
                    "example": "mxc://example.org/aBcDeFgH"
                  },
                  "instances": {
                    "type": "array",
                    "description": "A list of objects representing independent instances of configuration.\nFor example, multiple networks on IRC if multiple are provided by the\nsame application service.",
                    "items": {
                      "title": "Protocol Instance",
                      "type": "object",
                      "required": [
                        "desc",
                        "fields",
                        "network_id"
                      ],
                      "properties": {
                        "desc": {
                          "type": "string",
                          "description": "A human-readable description for the protocol, such as the name.",
                          "example": "Freenode"
                        },
                        "fields": {
                          "type": "object",
                          "description": "Preset values for `fields` the client may use to search by.",
                          "example": {
                            "network": "freenode"
                          }
                        },
                        "icon": {
                          "type": "string",
                          "description": "An optional content URI representing the protocol. Overrides the one provided\nat the higher level Protocol object.",
                          "example": "mxc://example.org/JkLmNoPq"
                        },
                        "network_id": {
                          "type": "string",
                          "description": "A unique identifier across all instances.",
                          "example": "freenode"
                        }
                      }
                    }
                  },
                  "location_fields": {
                    "type": "array",
                    "description": "Fields which may be used to identify a third party location. These should be\nordered to suggest the way that entities may be grouped, where higher\ngroupings are ordered first. For example, the name of a network should be\nsearched before the name of a channel.",
                    "example": [
                      "network",
                      "channel"
                    ],
                    "items": {
                      "type": "string",
                      "description": "Field used to identify a third party location."
                    }
                  },
                  "user_fields": {
                    "type": "array",
                    "description": "Fields which may be used to identify a third party user. These should be\nordered to suggest the way that entities may be grouped, where higher\ngroupings are ordered first. For example, the name of a network should be\nsearched before the nickname of a user.",
                    "example": [
                      "network",
                      "nickname"
                    ],
                    "items": {
                      "type": "string",
                      "description": "Field used to identify a third party user."
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/thirdparty/user": {
      "get": {
        "tags": [
          "Third Party Lookup"
        ],
        "summary": "Reverse-lookup third party users given a Matrix User ID.",
        "description": "Retrieve an array of third party users from a Matrix User ID.",
        "operationId": "queryUserByID",
        "parameters": [
          {
            "type": "string",
            "name": "userid",
            "in": "query",
            "required": true,
            "description": "The Matrix User ID to look up.",
            "x-example": "@bob:matrix.org"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of third party users.",
            "schema": {
              "type": "array",
              "description": "List of matched third party users.",
              "items": {
                "title": "User",
                "type": "object",
                "required": [
                  "userid",
                  "protocol",
                  "fields"
                ],
                "properties": {
                  "fields": {
                    "type": "object",
                    "description": "Information used to identify this third party location.",
                    "example": {
                      "user": "jim"
                    }
                  },
                  "protocol": {
                    "type": "string",
                    "description": "The protocol ID that the third party location is a part of.",
                    "example": "gitter"
                  },
                  "userid": {
                    "type": "string",
                    "description": "A Matrix User ID represting a third party user.",
                    "example": "@_gitter_jim:matrix.org"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The Matrix User ID was not found",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND"
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/thirdparty/user/{protocol}": {
      "get": {
        "tags": [
          "Third Party Lookup"
        ],
        "summary": "Retrieve the Matrix User ID of a corresponding third party user.",
        "description": "Retrieve a Matrix User ID linked to a user on the third party service, given\na set of user parameters.",
        "operationId": "queryUserByProtocol",
        "parameters": [
          {
            "type": "string",
            "name": "protocol",
            "in": "path",
            "required": true,
            "description": "The name of the protocol.",
            "x-example": "irc"
          },
          {
            "type": "string",
            "name": "fields...",
            "in": "query",
            "description": "One or more custom fields that are passed to the AS to help identify the user."
          }
        ],
        "responses": {
          "200": {
            "description": "The Matrix User IDs found with the given parameters.",
            "schema": {
              "type": "array",
              "description": "List of matched third party users.",
              "items": {
                "title": "User",
                "type": "object",
                "required": [
                  "userid",
                  "protocol",
                  "fields"
                ],
                "properties": {
                  "fields": {
                    "type": "object",
                    "description": "Information used to identify this third party location.",
                    "example": {
                      "user": "jim"
                    }
                  },
                  "protocol": {
                    "type": "string",
                    "description": "The protocol ID that the third party location is a part of.",
                    "example": "gitter"
                  },
                  "userid": {
                    "type": "string",
                    "description": "A Matrix User ID represting a third party user.",
                    "example": "@_gitter_jim:matrix.org"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The Matrix User ID was not found",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND"
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/user/{userId}/account_data/{type}": {
      "get": {
        "tags": [
          "User data"
        ],
        "summary": "Get some account data for the user.",
        "description": "Get some account data for the client. This config is only visible to the user\nthat set the account data.",
        "operationId": "getAccountData",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The ID of the user to get account data for. The access token must be\nauthorized to make requests for this user ID.",
            "x-example": "@alice:example.com"
          },
          {
            "type": "string",
            "name": "type",
            "in": "path",
            "required": true,
            "description": "The event type of the account data to get. Custom types should be\nnamespaced to avoid clashes.",
            "x-example": "org.example.custom.config"
          }
        ],
        "responses": {
          "200": {
            "description": "The account data content for the given type.",
            "schema": {
              "type": "object",
              "example": {
                "custom_account_data_key": "custom_config_value"
              }
            }
          },
          "403": {
            "description": "The access token provided is not authorized to retrieve this user's account \ndata. Errcode: `M_FORBIDDEN`.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_FORBIDDEN",
                "error": "Cannot add account data for other users."
              }
            }
          },
          "404": {
            "description": "No account data has been provided for this user with the given `type`.\nErrcode: `M_NOT_FOUND`.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "Account data not found."
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "User data"
        ],
        "summary": "Set some account data for the user.",
        "description": "Set some account data for the client. This config is only visible to the user\nthat set the account data. The config will be available to clients through the\ntop-level `account_data` field in the homeserver response to\n[/sync](#get_matrixclientv3sync).",
        "operationId": "setAccountData",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The ID of the user to set account data for. The access token must be\nauthorized to make requests for this user ID.",
            "x-example": "@alice:example.com"
          },
          {
            "type": "string",
            "name": "type",
            "in": "path",
            "required": true,
            "description": "The event type of the account data to set. Custom types should be\nnamespaced to avoid clashes.",
            "x-example": "org.example.custom.config"
          },
          {
            "name": "content",
            "in": "body",
            "required": true,
            "description": "The content of the account data.",
            "schema": {
              "type": "object",
              "example": {
                "custom_account_data_key": "custom_config_value"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The account data was successfully added.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "400": {
            "description": "The request body is not a JSON object. Errcode: `M_BAD_JSON`\nor `M_NOT_JSON`.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_JSON",
                "error": "Content must be a JSON object."
              }
            }
          },
          "403": {
            "description": "The access token provided is not authorized to modify this user's account \ndata. Errcode: `M_FORBIDDEN`.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_FORBIDDEN",
                "error": "Cannot add account data for other users."
              }
            }
          },
          "405": {
            "description": "This `type` of account data is controlled by the server; it cannot be\nmodified by clients. Errcode: `M_BAD_JSON`.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_BAD_JSON",
                "error": "Cannot set m.fully_read through this API."
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/user/{userId}/filter": {
      "post": {
        "tags": [
          "Room participation"
        ],
        "summary": "Upload a new filter.",
        "description": "Uploads a new filter definition to the homeserver.\nReturns a filter ID that may be used in future requests to\nrestrict which events are returned to the client.",
        "operationId": "defineFilter",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The id of the user uploading the filter. The access token must be authorized to make requests for this user id.",
            "x-example": "@alice:example.com"
          },
          {
            "name": "filter",
            "in": "body",
            "required": true,
            "description": "The filter to upload.",
            "schema": {
              "type": "object",
              "example": {
                "event_fields": [
                  "type",
                  "content",
                  "sender"
                ],
                "event_format": "client",
                "presence": {
                  "not_senders": [
                    "@alice:example.com"
                  ],
                  "types": [
                    "m.presence"
                  ]
                },
                "room": {
                  "ephemeral": {
                    "not_rooms": [
                      "!726s6s6q:example.com"
                    ],
                    "not_senders": [
                      "@spam:example.com"
                    ],
                    "types": [
                      "m.receipt",
                      "m.typing"
                    ]
                  },
                  "state": {
                    "not_rooms": [
                      "!726s6s6q:example.com"
                    ],
                    "types": [
                      "m.room.*"
                    ]
                  },
                  "timeline": {
                    "limit": 10,
                    "not_rooms": [
                      "!726s6s6q:example.com"
                    ],
                    "not_senders": [
                      "@spam:example.com"
                    ],
                    "types": [
                      "m.room.message"
                    ]
                  }
                }
              },
              "allOf": [
                {
                  "title": "Filter",
                  "type": "object",
                  "properties": {
                    "account_data": {
                      "description": "The user account data that isn't associated with rooms to include.",
                      "allOf": [
                        {
                          "title": "EventFilter",
                          "type": "object",
                          "properties": {
                            "limit": {
                              "type": "integer",
                              "description": "The maximum number of events to return."
                            },
                            "not_senders": {
                              "type": "array",
                              "description": "A list of sender IDs to exclude. If this list is absent then no senders are excluded. A matching sender will be excluded even if it is listed in the `'senders'` filter.",
                              "items": {
                                "type": "string"
                              }
                            },
                            "not_types": {
                              "type": "array",
                              "description": "A list of event types to exclude. If this list is absent then no event types are excluded. A matching type will be excluded even if it is listed in the `'types'` filter. A '*' can be used as a wildcard to match any sequence of characters.",
                              "items": {
                                "type": "string"
                              }
                            },
                            "senders": {
                              "type": "array",
                              "description": "A list of senders IDs to include. If this list is absent then all senders are included.",
                              "items": {
                                "type": "string"
                              }
                            },
                            "types": {
                              "type": "array",
                              "description": "A list of event types to include. If this list is absent then all event types are included. A `'*'` can be used as a wildcard to match any sequence of characters.",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      ]
                    },
                    "event_fields": {
                      "type": "array",
                      "description": "List of event fields to include. If this list is absent then all fields are included. The entries may include '.' characters to indicate sub-fields. So ['content.body'] will include the 'body' field of the 'content' object. A literal '.' character in a field name may be escaped using a '\\\\'. A server may include more fields than were requested.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "event_format": {
                      "type": "string",
                      "description": "The format to use for events. 'client' will return the events in a format suitable for clients. 'federation' will return the raw event as received over federation. The default is 'client'.",
                      "enum": [
                        "client",
                        "federation"
                      ]
                    },
                    "presence": {
                      "description": "The presence updates to include.",
                      "allOf": [
                        {
                          "title": "EventFilter",
                          "type": "object",
                          "properties": {
                            "limit": {
                              "type": "integer",
                              "description": "The maximum number of events to return."
                            },
                            "not_senders": {
                              "type": "array",
                              "description": "A list of sender IDs to exclude. If this list is absent then no senders are excluded. A matching sender will be excluded even if it is listed in the `'senders'` filter.",
                              "items": {
                                "type": "string"
                              }
                            },
                            "not_types": {
                              "type": "array",
                              "description": "A list of event types to exclude. If this list is absent then no event types are excluded. A matching type will be excluded even if it is listed in the `'types'` filter. A '*' can be used as a wildcard to match any sequence of characters.",
                              "items": {
                                "type": "string"
                              }
                            },
                            "senders": {
                              "type": "array",
                              "description": "A list of senders IDs to include. If this list is absent then all senders are included.",
                              "items": {
                                "type": "string"
                              }
                            },
                            "types": {
                              "type": "array",
                              "description": "A list of event types to include. If this list is absent then all event types are included. A `'*'` can be used as a wildcard to match any sequence of characters.",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      ]
                    },
                    "room": {
                      "title": "RoomFilter",
                      "type": "object",
                      "description": "Filters to be applied to room data.",
                      "properties": {
                        "account_data": {
                          "description": "The per user account data to include for rooms.",
                          "allOf": [
                            {
                              "allOf": [
                                {
                                  "title": "EventFilter",
                                  "type": "object",
                                  "properties": {
                                    "limit": {
                                      "type": "integer",
                                      "description": "The maximum number of events to return."
                                    },
                                    "not_senders": {
                                      "type": "array",
                                      "description": "A list of sender IDs to exclude. If this list is absent then no senders are excluded. A matching sender will be excluded even if it is listed in the `'senders'` filter.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "not_types": {
                                      "type": "array",
                                      "description": "A list of event types to exclude. If this list is absent then no event types are excluded. A matching type will be excluded even if it is listed in the `'types'` filter. A '*' can be used as a wildcard to match any sequence of characters.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "senders": {
                                      "type": "array",
                                      "description": "A list of senders IDs to include. If this list is absent then all senders are included.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "types": {
                                      "type": "array",
                                      "description": "A list of event types to include. If this list is absent then all event types are included. A `'*'` can be used as a wildcard to match any sequence of characters.",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                {
                                  "title": "RoomEventFilter",
                                  "type": "object",
                                  "properties": {
                                    "contains_url": {
                                      "type": "boolean",
                                      "description": "If `true`, includes only events with a `url` key in their content. If `false`, excludes those events. If omitted, `url` key is not considered for filtering."
                                    },
                                    "include_redundant_members": {
                                      "type": "boolean",
                                      "description": "If `true`, sends all membership events for all events, even if they have already\nbeen sent to the client. Does not\napply unless `lazy_load_members` is `true`. See\n[Lazy-loading room members](https://spec.matrix.org/v1.5/client-server-api/#lazy-loading-room-members)\nfor more information. Defaults to `false`."
                                    },
                                    "lazy_load_members": {
                                      "type": "boolean",
                                      "description": "If `true`, enables lazy-loading of membership events. See\n[Lazy-loading room members](https://spec.matrix.org/v1.5/client-server-api/#lazy-loading-room-members)\nfor more information. Defaults to `false`."
                                    },
                                    "not_rooms": {
                                      "type": "array",
                                      "description": "A list of room IDs to exclude. If this list is absent then no rooms are excluded. A matching room will be excluded even if it is listed in the `'rooms'` filter.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "rooms": {
                                      "type": "array",
                                      "description": "A list of room IDs to include. If this list is absent then all rooms are included.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "unread_thread_notifications": {
                                      "type": "boolean",
                                      "description": "If `true`, enables per-[thread](https://spec.matrix.org/v1.5/client-server-api/#threading) notification\ncounts. Only applies to the `/sync` endpoint. Defaults to `false`.",
                                      "x-addedInMatrixVersion": "1.4"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        "ephemeral": {
                          "description": "The ephemeral events to include for rooms. These are the events that appear in the `ephemeral` property in the `/sync` response.",
                          "allOf": [
                            {
                              "allOf": [
                                {
                                  "title": "EventFilter",
                                  "type": "object",
                                  "properties": {
                                    "limit": {
                                      "type": "integer",
                                      "description": "The maximum number of events to return."
                                    },
                                    "not_senders": {
                                      "type": "array",
                                      "description": "A list of sender IDs to exclude. If this list is absent then no senders are excluded. A matching sender will be excluded even if it is listed in the `'senders'` filter.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "not_types": {
                                      "type": "array",
                                      "description": "A list of event types to exclude. If this list is absent then no event types are excluded. A matching type will be excluded even if it is listed in the `'types'` filter. A '*' can be used as a wildcard to match any sequence of characters.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "senders": {
                                      "type": "array",
                                      "description": "A list of senders IDs to include. If this list is absent then all senders are included.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "types": {
                                      "type": "array",
                                      "description": "A list of event types to include. If this list is absent then all event types are included. A `'*'` can be used as a wildcard to match any sequence of characters.",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                {
                                  "title": "RoomEventFilter",
                                  "type": "object",
                                  "properties": {
                                    "contains_url": {
                                      "type": "boolean",
                                      "description": "If `true`, includes only events with a `url` key in their content. If `false`, excludes those events. If omitted, `url` key is not considered for filtering."
                                    },
                                    "include_redundant_members": {
                                      "type": "boolean",
                                      "description": "If `true`, sends all membership events for all events, even if they have already\nbeen sent to the client. Does not\napply unless `lazy_load_members` is `true`. See\n[Lazy-loading room members](https://spec.matrix.org/v1.5/client-server-api/#lazy-loading-room-members)\nfor more information. Defaults to `false`."
                                    },
                                    "lazy_load_members": {
                                      "type": "boolean",
                                      "description": "If `true`, enables lazy-loading of membership events. See\n[Lazy-loading room members](https://spec.matrix.org/v1.5/client-server-api/#lazy-loading-room-members)\nfor more information. Defaults to `false`."
                                    },
                                    "not_rooms": {
                                      "type": "array",
                                      "description": "A list of room IDs to exclude. If this list is absent then no rooms are excluded. A matching room will be excluded even if it is listed in the `'rooms'` filter.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "rooms": {
                                      "type": "array",
                                      "description": "A list of room IDs to include. If this list is absent then all rooms are included.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "unread_thread_notifications": {
                                      "type": "boolean",
                                      "description": "If `true`, enables per-[thread](https://spec.matrix.org/v1.5/client-server-api/#threading) notification\ncounts. Only applies to the `/sync` endpoint. Defaults to `false`.",
                                      "x-addedInMatrixVersion": "1.4"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        "include_leave": {
                          "type": "boolean",
                          "description": "Include rooms that the user has left in the sync, default false"
                        },
                        "not_rooms": {
                          "type": "array",
                          "description": "A list of room IDs to exclude. If this list is absent then no rooms are excluded. A matching room will be excluded even if it is listed in the `'rooms'` filter. This filter is applied before the filters in `ephemeral`, `state`, `timeline` or `account_data`",
                          "items": {
                            "type": "string"
                          }
                        },
                        "rooms": {
                          "type": "array",
                          "description": "A list of room IDs to include. If this list is absent then all rooms are included. This filter is applied before the filters in `ephemeral`, `state`, `timeline` or `account_data`",
                          "items": {
                            "type": "string"
                          }
                        },
                        "state": {
                          "title": "StateFilter",
                          "type": "object",
                          "description": "The state events to include for rooms.",
                          "allOf": [
                            {
                              "allOf": [
                                {
                                  "title": "EventFilter",
                                  "type": "object",
                                  "properties": {
                                    "limit": {
                                      "type": "integer",
                                      "description": "The maximum number of events to return."
                                    },
                                    "not_senders": {
                                      "type": "array",
                                      "description": "A list of sender IDs to exclude. If this list is absent then no senders are excluded. A matching sender will be excluded even if it is listed in the `'senders'` filter.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "not_types": {
                                      "type": "array",
                                      "description": "A list of event types to exclude. If this list is absent then no event types are excluded. A matching type will be excluded even if it is listed in the `'types'` filter. A '*' can be used as a wildcard to match any sequence of characters.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "senders": {
                                      "type": "array",
                                      "description": "A list of senders IDs to include. If this list is absent then all senders are included.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "types": {
                                      "type": "array",
                                      "description": "A list of event types to include. If this list is absent then all event types are included. A `'*'` can be used as a wildcard to match any sequence of characters.",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                {
                                  "title": "RoomEventFilter",
                                  "type": "object",
                                  "properties": {
                                    "contains_url": {
                                      "type": "boolean",
                                      "description": "If `true`, includes only events with a `url` key in their content. If `false`, excludes those events. If omitted, `url` key is not considered for filtering."
                                    },
                                    "include_redundant_members": {
                                      "type": "boolean",
                                      "description": "If `true`, sends all membership events for all events, even if they have already\nbeen sent to the client. Does not\napply unless `lazy_load_members` is `true`. See\n[Lazy-loading room members](https://spec.matrix.org/v1.5/client-server-api/#lazy-loading-room-members)\nfor more information. Defaults to `false`."
                                    },
                                    "lazy_load_members": {
                                      "type": "boolean",
                                      "description": "If `true`, enables lazy-loading of membership events. See\n[Lazy-loading room members](https://spec.matrix.org/v1.5/client-server-api/#lazy-loading-room-members)\nfor more information. Defaults to `false`."
                                    },
                                    "not_rooms": {
                                      "type": "array",
                                      "description": "A list of room IDs to exclude. If this list is absent then no rooms are excluded. A matching room will be excluded even if it is listed in the `'rooms'` filter.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "rooms": {
                                      "type": "array",
                                      "description": "A list of room IDs to include. If this list is absent then all rooms are included.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "unread_thread_notifications": {
                                      "type": "boolean",
                                      "description": "If `true`, enables per-[thread](https://spec.matrix.org/v1.5/client-server-api/#threading) notification\ncounts. Only applies to the `/sync` endpoint. Defaults to `false`.",
                                      "x-addedInMatrixVersion": "1.4"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        "timeline": {
                          "description": "The message and state update events to include for rooms.",
                          "allOf": [
                            {
                              "allOf": [
                                {
                                  "title": "EventFilter",
                                  "type": "object",
                                  "properties": {
                                    "limit": {
                                      "type": "integer",
                                      "description": "The maximum number of events to return."
                                    },
                                    "not_senders": {
                                      "type": "array",
                                      "description": "A list of sender IDs to exclude. If this list is absent then no senders are excluded. A matching sender will be excluded even if it is listed in the `'senders'` filter.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "not_types": {
                                      "type": "array",
                                      "description": "A list of event types to exclude. If this list is absent then no event types are excluded. A matching type will be excluded even if it is listed in the `'types'` filter. A '*' can be used as a wildcard to match any sequence of characters.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "senders": {
                                      "type": "array",
                                      "description": "A list of senders IDs to include. If this list is absent then all senders are included.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "types": {
                                      "type": "array",
                                      "description": "A list of event types to include. If this list is absent then all event types are included. A `'*'` can be used as a wildcard to match any sequence of characters.",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                {
                                  "title": "RoomEventFilter",
                                  "type": "object",
                                  "properties": {
                                    "contains_url": {
                                      "type": "boolean",
                                      "description": "If `true`, includes only events with a `url` key in their content. If `false`, excludes those events. If omitted, `url` key is not considered for filtering."
                                    },
                                    "include_redundant_members": {
                                      "type": "boolean",
                                      "description": "If `true`, sends all membership events for all events, even if they have already\nbeen sent to the client. Does not\napply unless `lazy_load_members` is `true`. See\n[Lazy-loading room members](https://spec.matrix.org/v1.5/client-server-api/#lazy-loading-room-members)\nfor more information. Defaults to `false`."
                                    },
                                    "lazy_load_members": {
                                      "type": "boolean",
                                      "description": "If `true`, enables lazy-loading of membership events. See\n[Lazy-loading room members](https://spec.matrix.org/v1.5/client-server-api/#lazy-loading-room-members)\nfor more information. Defaults to `false`."
                                    },
                                    "not_rooms": {
                                      "type": "array",
                                      "description": "A list of room IDs to exclude. If this list is absent then no rooms are excluded. A matching room will be excluded even if it is listed in the `'rooms'` filter.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "rooms": {
                                      "type": "array",
                                      "description": "A list of room IDs to include. If this list is absent then all rooms are included.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "unread_thread_notifications": {
                                      "type": "boolean",
                                      "description": "If `true`, enables per-[thread](https://spec.matrix.org/v1.5/client-server-api/#threading) notification\ncounts. Only applies to the `/sync` endpoint. Defaults to `false`.",
                                      "x-addedInMatrixVersion": "1.4"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The filter was created.",
            "schema": {
              "type": "object",
              "required": [
                "filter_id"
              ],
              "properties": {
                "filter_id": {
                  "type": "string",
                  "description": "The ID of the filter that was created. Cannot start\nwith a `{` as this character is used to determine\nif the filter provided is inline JSON or a previously\ndeclared filter by homeservers on some APIs.",
                  "example": "66696p746572"
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/user/{userId}/filter/{filterId}": {
      "get": {
        "tags": [
          "Room participation"
        ],
        "summary": "Download a filter",
        "operationId": "getFilter",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The user ID to download a filter for.",
            "x-example": "@alice:example.com"
          },
          {
            "type": "string",
            "name": "filterId",
            "in": "path",
            "required": true,
            "description": "The filter ID to download.",
            "x-example": "66696p746572"
          }
        ],
        "responses": {
          "200": {
            "description": "The filter definition.",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "title": "Filter",
                  "type": "object",
                  "properties": {
                    "account_data": {
                      "description": "The user account data that isn't associated with rooms to include.",
                      "allOf": [
                        {
                          "title": "EventFilter",
                          "type": "object",
                          "properties": {
                            "limit": {
                              "type": "integer",
                              "description": "The maximum number of events to return."
                            },
                            "not_senders": {
                              "type": "array",
                              "description": "A list of sender IDs to exclude. If this list is absent then no senders are excluded. A matching sender will be excluded even if it is listed in the `'senders'` filter.",
                              "items": {
                                "type": "string"
                              }
                            },
                            "not_types": {
                              "type": "array",
                              "description": "A list of event types to exclude. If this list is absent then no event types are excluded. A matching type will be excluded even if it is listed in the `'types'` filter. A '*' can be used as a wildcard to match any sequence of characters.",
                              "items": {
                                "type": "string"
                              }
                            },
                            "senders": {
                              "type": "array",
                              "description": "A list of senders IDs to include. If this list is absent then all senders are included.",
                              "items": {
                                "type": "string"
                              }
                            },
                            "types": {
                              "type": "array",
                              "description": "A list of event types to include. If this list is absent then all event types are included. A `'*'` can be used as a wildcard to match any sequence of characters.",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      ]
                    },
                    "event_fields": {
                      "type": "array",
                      "description": "List of event fields to include. If this list is absent then all fields are included. The entries may include '.' characters to indicate sub-fields. So ['content.body'] will include the 'body' field of the 'content' object. A literal '.' character in a field name may be escaped using a '\\\\'. A server may include more fields than were requested.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "event_format": {
                      "type": "string",
                      "description": "The format to use for events. 'client' will return the events in a format suitable for clients. 'federation' will return the raw event as received over federation. The default is 'client'.",
                      "enum": [
                        "client",
                        "federation"
                      ]
                    },
                    "presence": {
                      "description": "The presence updates to include.",
                      "allOf": [
                        {
                          "title": "EventFilter",
                          "type": "object",
                          "properties": {
                            "limit": {
                              "type": "integer",
                              "description": "The maximum number of events to return."
                            },
                            "not_senders": {
                              "type": "array",
                              "description": "A list of sender IDs to exclude. If this list is absent then no senders are excluded. A matching sender will be excluded even if it is listed in the `'senders'` filter.",
                              "items": {
                                "type": "string"
                              }
                            },
                            "not_types": {
                              "type": "array",
                              "description": "A list of event types to exclude. If this list is absent then no event types are excluded. A matching type will be excluded even if it is listed in the `'types'` filter. A '*' can be used as a wildcard to match any sequence of characters.",
                              "items": {
                                "type": "string"
                              }
                            },
                            "senders": {
                              "type": "array",
                              "description": "A list of senders IDs to include. If this list is absent then all senders are included.",
                              "items": {
                                "type": "string"
                              }
                            },
                            "types": {
                              "type": "array",
                              "description": "A list of event types to include. If this list is absent then all event types are included. A `'*'` can be used as a wildcard to match any sequence of characters.",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      ]
                    },
                    "room": {
                      "title": "RoomFilter",
                      "type": "object",
                      "description": "Filters to be applied to room data.",
                      "properties": {
                        "account_data": {
                          "description": "The per user account data to include for rooms.",
                          "allOf": [
                            {
                              "allOf": [
                                {
                                  "title": "EventFilter",
                                  "type": "object",
                                  "properties": {
                                    "limit": {
                                      "type": "integer",
                                      "description": "The maximum number of events to return."
                                    },
                                    "not_senders": {
                                      "type": "array",
                                      "description": "A list of sender IDs to exclude. If this list is absent then no senders are excluded. A matching sender will be excluded even if it is listed in the `'senders'` filter.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "not_types": {
                                      "type": "array",
                                      "description": "A list of event types to exclude. If this list is absent then no event types are excluded. A matching type will be excluded even if it is listed in the `'types'` filter. A '*' can be used as a wildcard to match any sequence of characters.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "senders": {
                                      "type": "array",
                                      "description": "A list of senders IDs to include. If this list is absent then all senders are included.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "types": {
                                      "type": "array",
                                      "description": "A list of event types to include. If this list is absent then all event types are included. A `'*'` can be used as a wildcard to match any sequence of characters.",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                {
                                  "title": "RoomEventFilter",
                                  "type": "object",
                                  "properties": {
                                    "contains_url": {
                                      "type": "boolean",
                                      "description": "If `true`, includes only events with a `url` key in their content. If `false`, excludes those events. If omitted, `url` key is not considered for filtering."
                                    },
                                    "include_redundant_members": {
                                      "type": "boolean",
                                      "description": "If `true`, sends all membership events for all events, even if they have already\nbeen sent to the client. Does not\napply unless `lazy_load_members` is `true`. See\n[Lazy-loading room members](https://spec.matrix.org/v1.5/client-server-api/#lazy-loading-room-members)\nfor more information. Defaults to `false`."
                                    },
                                    "lazy_load_members": {
                                      "type": "boolean",
                                      "description": "If `true`, enables lazy-loading of membership events. See\n[Lazy-loading room members](https://spec.matrix.org/v1.5/client-server-api/#lazy-loading-room-members)\nfor more information. Defaults to `false`."
                                    },
                                    "not_rooms": {
                                      "type": "array",
                                      "description": "A list of room IDs to exclude. If this list is absent then no rooms are excluded. A matching room will be excluded even if it is listed in the `'rooms'` filter.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "rooms": {
                                      "type": "array",
                                      "description": "A list of room IDs to include. If this list is absent then all rooms are included.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "unread_thread_notifications": {
                                      "type": "boolean",
                                      "description": "If `true`, enables per-[thread](https://spec.matrix.org/v1.5/client-server-api/#threading) notification\ncounts. Only applies to the `/sync` endpoint. Defaults to `false`.",
                                      "x-addedInMatrixVersion": "1.4"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        "ephemeral": {
                          "description": "The ephemeral events to include for rooms. These are the events that appear in the `ephemeral` property in the `/sync` response.",
                          "allOf": [
                            {
                              "allOf": [
                                {
                                  "title": "EventFilter",
                                  "type": "object",
                                  "properties": {
                                    "limit": {
                                      "type": "integer",
                                      "description": "The maximum number of events to return."
                                    },
                                    "not_senders": {
                                      "type": "array",
                                      "description": "A list of sender IDs to exclude. If this list is absent then no senders are excluded. A matching sender will be excluded even if it is listed in the `'senders'` filter.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "not_types": {
                                      "type": "array",
                                      "description": "A list of event types to exclude. If this list is absent then no event types are excluded. A matching type will be excluded even if it is listed in the `'types'` filter. A '*' can be used as a wildcard to match any sequence of characters.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "senders": {
                                      "type": "array",
                                      "description": "A list of senders IDs to include. If this list is absent then all senders are included.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "types": {
                                      "type": "array",
                                      "description": "A list of event types to include. If this list is absent then all event types are included. A `'*'` can be used as a wildcard to match any sequence of characters.",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                {
                                  "title": "RoomEventFilter",
                                  "type": "object",
                                  "properties": {
                                    "contains_url": {
                                      "type": "boolean",
                                      "description": "If `true`, includes only events with a `url` key in their content. If `false`, excludes those events. If omitted, `url` key is not considered for filtering."
                                    },
                                    "include_redundant_members": {
                                      "type": "boolean",
                                      "description": "If `true`, sends all membership events for all events, even if they have already\nbeen sent to the client. Does not\napply unless `lazy_load_members` is `true`. See\n[Lazy-loading room members](https://spec.matrix.org/v1.5/client-server-api/#lazy-loading-room-members)\nfor more information. Defaults to `false`."
                                    },
                                    "lazy_load_members": {
                                      "type": "boolean",
                                      "description": "If `true`, enables lazy-loading of membership events. See\n[Lazy-loading room members](https://spec.matrix.org/v1.5/client-server-api/#lazy-loading-room-members)\nfor more information. Defaults to `false`."
                                    },
                                    "not_rooms": {
                                      "type": "array",
                                      "description": "A list of room IDs to exclude. If this list is absent then no rooms are excluded. A matching room will be excluded even if it is listed in the `'rooms'` filter.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "rooms": {
                                      "type": "array",
                                      "description": "A list of room IDs to include. If this list is absent then all rooms are included.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "unread_thread_notifications": {
                                      "type": "boolean",
                                      "description": "If `true`, enables per-[thread](https://spec.matrix.org/v1.5/client-server-api/#threading) notification\ncounts. Only applies to the `/sync` endpoint. Defaults to `false`.",
                                      "x-addedInMatrixVersion": "1.4"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        "include_leave": {
                          "type": "boolean",
                          "description": "Include rooms that the user has left in the sync, default false"
                        },
                        "not_rooms": {
                          "type": "array",
                          "description": "A list of room IDs to exclude. If this list is absent then no rooms are excluded. A matching room will be excluded even if it is listed in the `'rooms'` filter. This filter is applied before the filters in `ephemeral`, `state`, `timeline` or `account_data`",
                          "items": {
                            "type": "string"
                          }
                        },
                        "rooms": {
                          "type": "array",
                          "description": "A list of room IDs to include. If this list is absent then all rooms are included. This filter is applied before the filters in `ephemeral`, `state`, `timeline` or `account_data`",
                          "items": {
                            "type": "string"
                          }
                        },
                        "state": {
                          "title": "StateFilter",
                          "type": "object",
                          "description": "The state events to include for rooms.",
                          "allOf": [
                            {
                              "allOf": [
                                {
                                  "title": "EventFilter",
                                  "type": "object",
                                  "properties": {
                                    "limit": {
                                      "type": "integer",
                                      "description": "The maximum number of events to return."
                                    },
                                    "not_senders": {
                                      "type": "array",
                                      "description": "A list of sender IDs to exclude. If this list is absent then no senders are excluded. A matching sender will be excluded even if it is listed in the `'senders'` filter.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "not_types": {
                                      "type": "array",
                                      "description": "A list of event types to exclude. If this list is absent then no event types are excluded. A matching type will be excluded even if it is listed in the `'types'` filter. A '*' can be used as a wildcard to match any sequence of characters.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "senders": {
                                      "type": "array",
                                      "description": "A list of senders IDs to include. If this list is absent then all senders are included.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "types": {
                                      "type": "array",
                                      "description": "A list of event types to include. If this list is absent then all event types are included. A `'*'` can be used as a wildcard to match any sequence of characters.",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                {
                                  "title": "RoomEventFilter",
                                  "type": "object",
                                  "properties": {
                                    "contains_url": {
                                      "type": "boolean",
                                      "description": "If `true`, includes only events with a `url` key in their content. If `false`, excludes those events. If omitted, `url` key is not considered for filtering."
                                    },
                                    "include_redundant_members": {
                                      "type": "boolean",
                                      "description": "If `true`, sends all membership events for all events, even if they have already\nbeen sent to the client. Does not\napply unless `lazy_load_members` is `true`. See\n[Lazy-loading room members](https://spec.matrix.org/v1.5/client-server-api/#lazy-loading-room-members)\nfor more information. Defaults to `false`."
                                    },
                                    "lazy_load_members": {
                                      "type": "boolean",
                                      "description": "If `true`, enables lazy-loading of membership events. See\n[Lazy-loading room members](https://spec.matrix.org/v1.5/client-server-api/#lazy-loading-room-members)\nfor more information. Defaults to `false`."
                                    },
                                    "not_rooms": {
                                      "type": "array",
                                      "description": "A list of room IDs to exclude. If this list is absent then no rooms are excluded. A matching room will be excluded even if it is listed in the `'rooms'` filter.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "rooms": {
                                      "type": "array",
                                      "description": "A list of room IDs to include. If this list is absent then all rooms are included.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "unread_thread_notifications": {
                                      "type": "boolean",
                                      "description": "If `true`, enables per-[thread](https://spec.matrix.org/v1.5/client-server-api/#threading) notification\ncounts. Only applies to the `/sync` endpoint. Defaults to `false`.",
                                      "x-addedInMatrixVersion": "1.4"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        "timeline": {
                          "description": "The message and state update events to include for rooms.",
                          "allOf": [
                            {
                              "allOf": [
                                {
                                  "title": "EventFilter",
                                  "type": "object",
                                  "properties": {
                                    "limit": {
                                      "type": "integer",
                                      "description": "The maximum number of events to return."
                                    },
                                    "not_senders": {
                                      "type": "array",
                                      "description": "A list of sender IDs to exclude. If this list is absent then no senders are excluded. A matching sender will be excluded even if it is listed in the `'senders'` filter.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "not_types": {
                                      "type": "array",
                                      "description": "A list of event types to exclude. If this list is absent then no event types are excluded. A matching type will be excluded even if it is listed in the `'types'` filter. A '*' can be used as a wildcard to match any sequence of characters.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "senders": {
                                      "type": "array",
                                      "description": "A list of senders IDs to include. If this list is absent then all senders are included.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "types": {
                                      "type": "array",
                                      "description": "A list of event types to include. If this list is absent then all event types are included. A `'*'` can be used as a wildcard to match any sequence of characters.",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                {
                                  "title": "RoomEventFilter",
                                  "type": "object",
                                  "properties": {
                                    "contains_url": {
                                      "type": "boolean",
                                      "description": "If `true`, includes only events with a `url` key in their content. If `false`, excludes those events. If omitted, `url` key is not considered for filtering."
                                    },
                                    "include_redundant_members": {
                                      "type": "boolean",
                                      "description": "If `true`, sends all membership events for all events, even if they have already\nbeen sent to the client. Does not\napply unless `lazy_load_members` is `true`. See\n[Lazy-loading room members](https://spec.matrix.org/v1.5/client-server-api/#lazy-loading-room-members)\nfor more information. Defaults to `false`."
                                    },
                                    "lazy_load_members": {
                                      "type": "boolean",
                                      "description": "If `true`, enables lazy-loading of membership events. See\n[Lazy-loading room members](https://spec.matrix.org/v1.5/client-server-api/#lazy-loading-room-members)\nfor more information. Defaults to `false`."
                                    },
                                    "not_rooms": {
                                      "type": "array",
                                      "description": "A list of room IDs to exclude. If this list is absent then no rooms are excluded. A matching room will be excluded even if it is listed in the `'rooms'` filter.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "rooms": {
                                      "type": "array",
                                      "description": "A list of room IDs to include. If this list is absent then all rooms are included.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "unread_thread_notifications": {
                                      "type": "boolean",
                                      "description": "If `true`, enables per-[thread](https://spec.matrix.org/v1.5/client-server-api/#threading) notification\ncounts. Only applies to the `/sync` endpoint. Defaults to `false`.",
                                      "x-addedInMatrixVersion": "1.4"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": {
                "event_fields": [
                  "type",
                  "content",
                  "sender"
                ],
                "event_format": "client",
                "presence": {
                  "not_senders": [
                    "@alice:example.com"
                  ],
                  "types": [
                    "m.presence"
                  ]
                },
                "room": {
                  "ephemeral": {
                    "not_rooms": [
                      "!726s6s6q:example.com"
                    ],
                    "not_senders": [
                      "@spam:example.com"
                    ],
                    "types": [
                      "m.receipt",
                      "m.typing"
                    ]
                  },
                  "state": {
                    "not_rooms": [
                      "!726s6s6q:example.com"
                    ],
                    "types": [
                      "m.room.*"
                    ]
                  },
                  "timeline": {
                    "limit": 10,
                    "not_rooms": [
                      "!726s6s6q:example.com"
                    ],
                    "not_senders": [
                      "@spam:example.com"
                    ],
                    "types": [
                      "m.room.message"
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Unknown filter."
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/user/{userId}/openid/request_token": {
      "post": {
        "tags": [
          "OpenID"
        ],
        "summary": "Get an OpenID token object to verify the requester's identity.",
        "description": "Gets an OpenID token object that the requester may supply to another\nservice to verify their identity in Matrix. The generated token is only\nvalid for exchanging for user information from the federation API for\nOpenID.\n\nThe access token generated is only valid for the OpenID API. It cannot\nbe used to request another OpenID access token or call `/sync`, for\nexample.",
        "operationId": "requestOpenIdToken",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The user to request and OpenID token for. Should be the user who\nis authenticated for the request.",
            "x-example": "@alice:example.com"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "An empty object. Reserved for future expansion.",
            "schema": {
              "type": "object",
              "example": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OpenID token information. This response is nearly compatible with the\nresponse documented in the\n[OpenID Connect 1.0 Specification](http://openid.net/specs/openid-connect-core-1_0.html#TokenResponse)\nwith the only difference being the lack of an `id_token`. Instead,\nthe Matrix homeserver's name is provided.",
            "schema": {
              "title": "OpenIdCredentials",
              "type": "object",
              "required": [
                "access_token",
                "token_type",
                "matrix_server_name",
                "expires_in"
              ],
              "properties": {
                "access_token": {
                  "type": "string",
                  "description": "An access token the consumer may use to verify the identity of\nthe person who generated the token. This is given to the federation\nAPI `GET /openid/userinfo` to verify the user's identity."
                },
                "expires_in": {
                  "type": "integer",
                  "description": "The number of seconds before this token expires and a new one must\nbe generated."
                },
                "matrix_server_name": {
                  "type": "string",
                  "description": "The homeserver domain the consumer should use when attempting to\nverify the user's identity."
                },
                "token_type": {
                  "type": "string",
                  "description": "The string `Bearer`."
                }
              }
            },
            "examples": {
              "application/json": {
                "access_token": "SomeT0kenHere",
                "expires_in": 3600,
                "matrix_server_name": "example.com",
                "token_type": "Bearer"
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/user/{userId}/rooms/{roomId}/account_data/{type}": {
      "get": {
        "tags": [
          "User data"
        ],
        "summary": "Get some account data for the user that is specific to a room.",
        "description": "Get some account data for the client on a given room. This config is only\nvisible to the user that set the account data.",
        "operationId": "getAccountDataPerRoom",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The ID of the user to get account data for. The access token must be\nauthorized to make requests for this user ID.",
            "x-example": "@alice:example.com"
          },
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The ID of the room to get account data for.",
            "x-example": "!726s6s6q:example.com"
          },
          {
            "type": "string",
            "name": "type",
            "in": "path",
            "required": true,
            "description": "The event type of the account data to get. Custom types should be\nnamespaced to avoid clashes.",
            "x-example": "org.example.custom.room.config"
          }
        ],
        "responses": {
          "200": {
            "description": "The account data content for the given type.",
            "schema": {
              "type": "object",
              "example": {
                "custom_account_data_key": "custom_config_value"
              }
            }
          },
          "400": {
            "description": "The given `roomID` is not a valid room ID. Errcode: `M_INVALID_PARAM`.",
            "examples": {
              "application/json": {
                "errcode": "M_INVALID_PARAM",
                "error": "@notaroomid:example.org is not a valid room ID."
              }
            }
          },
          "403": {
            "description": "The access token provided is not authorized to retrieve this user's account \ndata. Errcode: `M_FORBIDDEN`.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_FORBIDDEN",
                "error": "Cannot add account data for other users."
              }
            }
          },
          "404": {
            "description": "No account data has been provided for this user and this room with the \ngiven `type`. Errcode: `M_NOT_FOUND`.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_FOUND",
                "error": "Room account data not found."
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "User data"
        ],
        "summary": "Set some account data for the user that is specific to a room.",
        "description": "Set some account data for the client on a given room. This config is only\nvisible to the user that set the account data. The config will be delivered to\nclients in the per-room entries via [/sync](#get_matrixclientv3sync).",
        "operationId": "setAccountDataPerRoom",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The ID of the user to set account data for. The access token must be\nauthorized to make requests for this user ID.",
            "x-example": "@alice:example.com"
          },
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The ID of the room to set account data on.",
            "x-example": "!726s6s6q:example.com"
          },
          {
            "type": "string",
            "name": "type",
            "in": "path",
            "required": true,
            "description": "The event type of the account data to set. Custom types should be\nnamespaced to avoid clashes.",
            "x-example": "org.example.custom.room.config"
          },
          {
            "name": "content",
            "in": "body",
            "required": true,
            "description": "The content of the account data.",
            "schema": {
              "type": "object",
              "example": {
                "custom_account_data_key": "custom_account_data_value"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The account data was successfully added.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          },
          "400": {
            "description": "The request body is not a JSON object (errcode `M_BAD_JSON` or\n`M_NOT_JSON`), or the given `roomID` is not a valid room ID\n(errcode `M_INVALID_PARAM`).",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_NOT_JSON",
                "error": "Content must be a JSON object."
              }
            }
          },
          "403": {
            "description": "The access token provided is not authorized to modify this user's account \ndata. Errcode: `M_FORBIDDEN`.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_FORBIDDEN",
                "error": "Cannot add account data for other users."
              }
            }
          },
          "405": {
            "description": "This `type` of account data is controlled by the server; it cannot be\nmodified by clients. Errcode: `M_BAD_JSON`.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_BAD_JSON",
                "error": "Cannot set m.fully_read through this API."
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/user/{userId}/rooms/{roomId}/tags": {
      "get": {
        "tags": [
          "User data"
        ],
        "summary": "List the tags for a room.",
        "description": "List the tags set by a user on a room.",
        "operationId": "getRoomTags",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The id of the user to get tags for. The access token must be\nauthorized to make requests for this user ID.",
            "x-example": "@alice:example.com"
          },
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The ID of the room to get tags for.",
            "x-example": "!726s6s6q:example.com"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of tags for the user for the room.",
            "schema": {
              "type": "object",
              "properties": {
                "tags": {
                  "type": "object",
                  "additionalProperties": {
                    "title": "Tag",
                    "type": "object",
                    "additionalProperties": {},
                    "properties": {
                      "order": {
                        "type": "number",
                        "description": "A number in a range `[0,1]` describing a relative\nposition of the room under the given tag.",
                        "format": "float"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "tags": {
                  "m.favourite": {
                    "order": 0.1
                  },
                  "u.Customers": {},
                  "u.Work": {
                    "order": 0.7
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/user/{userId}/rooms/{roomId}/tags/{tag}": {
      "delete": {
        "tags": [
          "User data"
        ],
        "summary": "Remove a tag from the room.",
        "description": "Remove a tag from the room.",
        "operationId": "deleteRoomTag",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The id of the user to remove a tag for. The access token must be\nauthorized to make requests for this user ID.",
            "x-example": "@alice:example.com"
          },
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The ID of the room to remove a tag from.",
            "x-example": "!726s6s6q:example.com"
          },
          {
            "type": "string",
            "name": "tag",
            "in": "path",
            "required": true,
            "description": "The tag to remove.",
            "x-example": "u.work"
          }
        ],
        "responses": {
          "200": {
            "description": "The tag was successfully removed.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "User data"
        ],
        "summary": "Add a tag to a room.",
        "description": "Add a tag to the room.",
        "operationId": "setRoomTag",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The id of the user to add a tag for. The access token must be\nauthorized to make requests for this user ID.",
            "x-example": "@alice:example.com"
          },
          {
            "type": "string",
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "The ID of the room to add a tag to.",
            "x-example": "!726s6s6q:example.com"
          },
          {
            "type": "string",
            "name": "tag",
            "in": "path",
            "required": true,
            "description": "The tag to add.",
            "x-example": "u.work"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Extra data for the tag, e.g. ordering.",
            "schema": {
              "type": "object",
              "example": {
                "order": 0.25
              },
              "additionalProperties": {},
              "properties": {
                "order": {
                  "type": "number",
                  "description": "A number in a range `[0,1]` describing a relative\nposition of the room under the given tag.",
                  "format": "float"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The tag was successfully added.",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/user_directory/search": {
      "post": {
        "tags": [
          "User directory"
        ],
        "summary": "Searches the user directory.",
        "description": "Performs a search for users. The homeserver may\ndetermine which subset of users are searched, however the homeserver\nMUST at a minimum consider the users the requesting user shares a\nroom with and those who reside in public rooms (known to the homeserver).\nThe search MUST consider local users to the homeserver, and SHOULD\nquery remote users as part of the search.\n\nThe search is performed case-insensitively on user IDs and display\nnames preferably using a collation determined based upon the\n`Accept-Language` header provided in the request, if present.",
        "operationId": "searchUserDirectory",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "search_term"
              ],
              "properties": {
                "limit": {
                  "type": "integer",
                  "description": "The maximum number of results to return. Defaults to 10.",
                  "example": 10
                },
                "search_term": {
                  "type": "string",
                  "description": "The term to search for",
                  "example": "foo"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The results of the search.",
            "schema": {
              "type": "object",
              "required": [
                "results",
                "limited"
              ],
              "properties": {
                "limited": {
                  "type": "boolean",
                  "description": "Indicates if the result list has been truncated by the limit."
                },
                "results": {
                  "type": "array",
                  "description": "Ordered by rank and then whether or not profile info is available.",
                  "items": {
                    "title": "User",
                    "type": "object",
                    "required": [
                      "user_id"
                    ],
                    "properties": {
                      "avatar_url": {
                        "type": "string",
                        "description": "The avatar url, as an MXC, if one exists.",
                        "format": "uri",
                        "example": "mxc://bar.com/foo"
                      },
                      "display_name": {
                        "type": "string",
                        "description": "The display name of the user, if one exists.",
                        "example": "Foo"
                      },
                      "user_id": {
                        "type": "string",
                        "description": "The user's matrix user ID.",
                        "example": "@foo:bar.com"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "limited": false,
                "results": [
                  {
                    "avatar_url": "mxc://bar.com/foo",
                    "display_name": "Foo",
                    "user_id": "@foo:bar.com"
                  }
                ]
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/v3/voip/turnServer": {
      "get": {
        "tags": [
          "VOIP"
        ],
        "summary": "Obtain TURN server credentials.",
        "description": "This API provides credentials for the client to use when initiating\ncalls.",
        "operationId": "getTurnServer",
        "responses": {
          "200": {
            "description": "The TURN server credentials.",
            "schema": {
              "type": "object",
              "required": [
                "username",
                "password",
                "uris",
                "ttl"
              ],
              "properties": {
                "password": {
                  "type": "string",
                  "description": "The password to use."
                },
                "ttl": {
                  "type": "integer",
                  "description": "The time-to-live in seconds"
                },
                "uris": {
                  "type": "array",
                  "description": "A list of TURN URIs",
                  "items": {
                    "type": "string"
                  }
                },
                "username": {
                  "type": "string",
                  "description": "The username to use."
                }
              }
            },
            "examples": {
              "application/json": {
                "password": "JlKfBy1QwLrO20385QyAtEyIv0=",
                "ttl": 86400,
                "uris": [
                  "turn:turn.example.com:3478?transport=udp",
                  "turn:10.20.30.40:3478?transport=tcp",
                  "turns:10.20.30.40:443?transport=tcp"
                ],
                "username": "1443779631:@user:example.com"
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/client/versions": {
      "get": {
        "tags": [
          "Server administration"
        ],
        "summary": "Gets the versions of the specification supported by the server.",
        "description": "Gets the versions of the specification supported by the server.\n\nValues will take the form `vX.Y` or `rX.Y.Z` in historical cases. See\n[the Specification Versioning](../#specification-versions) for more\ninformation.\n\nThe server may additionally advertise experimental features it supports\nthrough `unstable_features`. These features should be namespaced and\nmay optionally include version information within their name if desired.\nFeatures listed here are not for optionally toggling parts of the Matrix\nspecification and should only be used to advertise support for a feature\nwhich has not yet landed in the spec. For example, a feature currently\nundergoing the proposal process may appear here and eventually be taken\noff this list once the feature lands in the spec and the server deems it\nreasonable to do so. Servers may wish to keep advertising features here\nafter they've been released into the spec to give clients a chance to\nupgrade appropriately. Additionally, clients should avoid using unstable\nfeatures in their stable releases.",
        "operationId": "getVersions",
        "responses": {
          "200": {
            "description": "The versions supported by the server.",
            "schema": {
              "type": "object",
              "required": [
                "versions"
              ],
              "properties": {
                "unstable_features": {
                  "type": "object",
                  "description": "Experimental features the server supports. Features not listed here,\nor the lack of this property all together, indicate that a feature is\nnot supported.",
                  "additionalProperties": {
                    "type": "boolean",
                    "description": "Whether or not the namespaced feature is supported."
                  }
                },
                "versions": {
                  "type": "array",
                  "description": "The supported versions.",
                  "items": {
                    "type": "string",
                    "description": "The supported versions"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "unstable_features": {
                  "org.example.my_feature": true
                },
                "versions": [
                  "r0.0.1",
                  "v1.1"
                ]
              }
            }
          }
        }
      }
    },
    "/_matrix/media/v3/config": {
      "get": {
        "tags": [
          "Media"
        ],
        "summary": "Get the configuration for the content repository.",
        "description": "This endpoint allows clients to retrieve the configuration of the content\nrepository, such as upload limitations.\nClients SHOULD use this as a guide when using content repository endpoints.\nAll values are intentionally left optional. Clients SHOULD follow\nthe advice given in the field description when the field is not available.\n\n**NOTE:** Both clients and server administrators should be aware that proxies\nbetween the client and the server may affect the apparent behaviour of content\nrepository APIs, for example, proxies may enforce a lower upload size limit\nthan is advertised by the server on this endpoint.",
        "operationId": "getConfig",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The public content repository configuration for the matrix server.",
            "schema": {
              "type": "object",
              "properties": {
                "m.upload.size": {
                  "type": "integer",
                  "description": "The maximum size an upload can be in bytes.\nClients SHOULD use this as a guide when uploading content.\nIf not listed or null, the size limit should be treated as unknown.",
                  "format": "int64"
                }
              }
            },
            "examples": {
              "application/json": {
                "m.upload.size": 50000000
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/media/v3/download/{serverName}/{mediaId}": {
      "get": {
        "tags": [
          "Media"
        ],
        "summary": "Download content from the content repository.",
        "operationId": "getContent",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "serverName",
            "in": "path",
            "required": true,
            "description": "The server name from the `mxc://` URI (the authoritory component)\n",
            "x-example": "matrix.org"
          },
          {
            "type": "string",
            "name": "mediaId",
            "in": "path",
            "required": true,
            "description": "The media ID from the `mxc://` URI (the path component)\n",
            "x-example": "ascERGshawAWawugaAcauga"
          },
          {
            "type": "boolean",
            "name": "allow_remote",
            "in": "query",
            "description": "Indicates to the server that it should not attempt to fetch the media if it is deemed\nremote. This is to prevent routing loops where the server contacts itself. Defaults to\ntrue if not provided.\n",
            "default": true,
            "x-example": false
          }
        ],
        "responses": {
          "200": {
            "description": "The content that was previously uploaded.",
            "schema": {
              "type": "file",
              "description": "**Required.** The bytes for the uploaded file."
            },
            "headers": {
              "Content-Disposition": {
                "type": "string",
                "description": "The name of the file that was previously uploaded, if set."
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the file that was previously uploaded."
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          },
          "502": {
            "description": "The content is too large for the server to serve.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_TOO_LARGE",
                "error": "Content is too large to serve"
              }
            }
          }
        }
      }
    },
    "/_matrix/media/v3/download/{serverName}/{mediaId}/{fileName}": {
      "get": {
        "tags": [
          "Media"
        ],
        "summary": "Download content from the content repository overriding the file name",
        "description": "This will download content from the content repository (same as\nthe previous endpoint) but replace the target file name with the one\nprovided by the caller.",
        "operationId": "getContentOverrideName",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "serverName",
            "in": "path",
            "required": true,
            "description": "The server name from the `mxc://` URI (the authoritory component)\n",
            "x-example": "matrix.org"
          },
          {
            "type": "string",
            "name": "mediaId",
            "in": "path",
            "required": true,
            "description": "The media ID from the `mxc://` URI (the path component)\n",
            "x-example": "ascERGshawAWawugaAcauga"
          },
          {
            "type": "string",
            "name": "fileName",
            "in": "path",
            "required": true,
            "description": "A filename to give in the `Content-Disposition` header.",
            "x-example": "filename.jpg"
          },
          {
            "type": "boolean",
            "name": "allow_remote",
            "in": "query",
            "description": "Indicates to the server that it should not attempt to fetch the media if it is deemed\nremote. This is to prevent routing loops where the server contacts itself. Defaults to\ntrue if not provided.\n",
            "default": true,
            "x-example": false
          }
        ],
        "responses": {
          "200": {
            "description": "The content that was previously uploaded.",
            "schema": {
              "type": "file",
              "description": "**Required.** The bytes for the uploaded file."
            },
            "headers": {
              "Content-Disposition": {
                "type": "string",
                "description": "The `fileName` requested or the name of the file that was previously\nuploaded, if set."
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the file that was previously uploaded."
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          },
          "502": {
            "description": "The content is too large for the server to serve.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_TOO_LARGE",
                "error": "Content is too large to serve"
              }
            }
          }
        }
      }
    },
    "/_matrix/media/v3/preview_url": {
      "get": {
        "tags": [
          "Media"
        ],
        "summary": "Get information about a URL for a client",
        "description": "Get information about a URL for the client. Typically this is called when a\nclient sees a URL in a message and wants to render a preview for the user.\n\n**Note:**\nClients should consider avoiding this endpoint for URLs posted in encrypted\nrooms. Encrypted rooms often contain more sensitive information the users\ndo not want to share with the homeserver, and this can mean that the URLs\nbeing shared should also not be shared with the homeserver.",
        "operationId": "getUrlPreview",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "url",
            "in": "query",
            "required": true,
            "description": "The URL to get a preview of.",
            "format": "uri",
            "x-example": "https://matrix.org"
          },
          {
            "type": "integer",
            "name": "ts",
            "in": "query",
            "description": "The preferred point in time to return a preview for. The server may\nreturn a newer version if it does not have the requested version\navailable.",
            "format": "int64",
            "x-example": 1510610716656
          }
        ],
        "responses": {
          "200": {
            "description": "The OpenGraph data for the URL, which may be empty. Some values are\nreplaced with matrix equivalents if they are provided in the response.\nThe differences from the OpenGraph protocol are described here.",
            "schema": {
              "type": "object",
              "properties": {
                "matrix:image:size": {
                  "type": "integer",
                  "description": "The byte-size of the image. Omitted if there is no image attached.",
                  "format": "int64"
                },
                "og:image": {
                  "type": "string",
                  "description": "An [MXC URI](https://spec.matrix.org/v1.5/client-server-api/#matrix-content-mxc-uris) to the image. Omitted if there is no image.",
                  "format": "uri"
                }
              }
            },
            "examples": {
              "application/json": {
                "matrix:image:size": 102400,
                "og:description": "This is a really cool blog post from matrix.org",
                "og:image": "mxc://example.com/ascERGshawAWawugaAcauga",
                "og:image:height": 48,
                "og:image:type": "image/png",
                "og:image:width": 48,
                "og:title": "Matrix Blog Post"
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/_matrix/media/v3/thumbnail/{serverName}/{mediaId}": {
      "get": {
        "tags": [
          "Media"
        ],
        "summary": "Download a thumbnail of content from the content repository",
        "description": "Download a thumbnail of content from the content repository.\nSee the [Thumbnails](https://spec.matrix.org/v1.5/client-server-api/#thumbnails) section for more information.",
        "operationId": "getContentThumbnail",
        "produces": [
          "image/jpeg",
          "image/png"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "serverName",
            "in": "path",
            "required": true,
            "description": "The server name from the `mxc://` URI (the authoritory component)\n",
            "x-example": "example.org"
          },
          {
            "type": "string",
            "name": "mediaId",
            "in": "path",
            "required": true,
            "description": "The media ID from the `mxc://` URI (the path component)\n",
            "x-example": "ascERGshawAWawugaAcauga"
          },
          {
            "type": "integer",
            "name": "width",
            "in": "query",
            "required": true,
            "description": "The *desired* width of the thumbnail. The actual thumbnail may be\nlarger than the size specified.",
            "x-example": 64
          },
          {
            "type": "integer",
            "name": "height",
            "in": "query",
            "required": true,
            "description": "The *desired* height of the thumbnail. The actual thumbnail may be\nlarger than the size specified.",
            "x-example": 64
          },
          {
            "type": "string",
            "name": "method",
            "in": "query",
            "description": "The desired resizing method. See the [Thumbnails](https://spec.matrix.org/v1.5/client-server-api/#thumbnails)\nsection for more information.",
            "enum": [
              "crop",
              "scale"
            ],
            "x-example": "scale"
          },
          {
            "type": "boolean",
            "name": "allow_remote",
            "in": "query",
            "description": "Indicates to the server that it should not attempt to fetch\nthe media if it is deemed remote. This is to prevent routing loops\nwhere the server contacts itself. Defaults to true if not provided.",
            "default": true,
            "x-example": false
          }
        ],
        "responses": {
          "200": {
            "description": "A thumbnail of the requested content.",
            "schema": {
              "type": "file",
              "description": "**Required.** The bytes for the thumbnail."
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the thumbnail.",
                "enum": [
                  "image/jpeg",
                  "image/png"
                ]
              }
            }
          },
          "400": {
            "description": "The request does not make sense to the server, or the server cannot thumbnail\nthe content. For example, the client requested non-integer dimensions or asked\nfor negatively-sized images.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_UNKNOWN",
                "error": "Cannot generate thumbnails for the requested content"
              }
            }
          },
          "413": {
            "description": "The local content is too large for the server to thumbnail.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_TOO_LARGE",
                "error": "Content is too large to thumbnail"
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          },
          "502": {
            "description": "The remote content is too large for the server to thumbnail.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_TOO_LARGE",
                "error": "Content is too large to thumbnail"
              }
            }
          }
        }
      }
    },
    "/_matrix/media/v3/upload": {
      "post": {
        "tags": [
          "Media"
        ],
        "summary": "Upload some content to the content repository.",
        "operationId": "uploadContent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "Content-Type",
            "in": "header",
            "description": "The content type of the file being uploaded",
            "x-example": "application/pdf"
          },
          {
            "type": "string",
            "name": "filename",
            "in": "query",
            "description": "The name of the file being uploaded",
            "x-example": "War and Peace.pdf"
          },
          {
            "name": "<content>",
            "in": "body",
            "required": true,
            "description": "The content to be uploaded.",
            "schema": {
              "type": "string",
              "format": "byte",
              "example": "<bytes>"
            },
            "x-example": "<bytes>"
          }
        ],
        "responses": {
          "200": {
            "description": "The [MXC URI](https://spec.matrix.org/v1.5/client-server-api/#matrix-content-mxc-uris) for the uploaded content.",
            "schema": {
              "type": "object",
              "required": [
                "content_uri"
              ],
              "properties": {
                "content_uri": {
                  "type": "string",
                  "description": "The [MXC URI](https://spec.matrix.org/v1.5/client-server-api/#matrix-content-mxc-uris) to the uploaded content.",
                  "format": "uri"
                }
              }
            },
            "examples": {
              "application/json": {
                "content_uri": "mxc://example.com/AQwafuaFswefuhsfAFAgsw"
              }
            }
          },
          "403": {
            "description": "The user does not have permission to upload the content. Some reasons for this error include:\n\n- The server does not permit the file type.\n- The user has reached a quota for uploaded content.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_FORBIDDEN",
                "error": "Cannot upload this content"
              }
            }
          },
          "413": {
            "description": "The uploaded content is too large for the server.",
            "schema": {
              "title": "Error",
              "type": "object",
              "description": "A Matrix-level Error",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "An error code.",
                  "example": "M_UNKNOWN"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "An unknown error occurred"
                }
              }
            },
            "examples": {
              "application/json": {
                "errcode": "M_TOO_LARGE",
                "error": "Cannot upload files larger than 100mb"
              }
            }
          },
          "429": {
            "description": "This request was rate-limited.",
            "schema": {
              "title": "RateLimitError",
              "type": "object",
              "description": "The rate limit was reached for this request",
              "required": [
                "errcode"
              ],
              "properties": {
                "errcode": {
                  "type": "string",
                  "description": "The M_LIMIT_EXCEEDED error code",
                  "example": "M_LIMIT_EXCEEDED"
                },
                "error": {
                  "type": "string",
                  "description": "A human-readable error message.",
                  "example": "Too many requests"
                },
                "retry_after_ms": {
                  "type": "integer",
                  "description": "The amount of time in milliseconds the client should wait\nbefore trying the request again.",
                  "example": 2000
                }
              }
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "accessToken": {
      "type": "apiKey",
      "description": "The access_token returned by a call to `/login` or `/register`",
      "name": "access_token",
      "in": "query"
    }
  },
  "servers": [
    {
      "url": "https://{homeserver_address}/",
      "variables": {
        "homeserver_address": {
          "default": "matrix-client.matrix.org",
          "description": "The base URL for your homeserver"
        }
      }
    }
  ]
}